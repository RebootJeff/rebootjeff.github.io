<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: career development | RebootJeff.com]]></title>
  <link href="http://RebootJeff.github.io/blog/categories/career-development/atom.xml" rel="self"/>
  <link href="http://RebootJeff.github.io/"/>
  <updated>2017-08-16T23:12:57-07:00</updated>
  <id>http://RebootJeff.github.io/</id>
  <author>
    <name><![CDATA[Jeff Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What's the Point of One-on-Ones with Your Manager?]]></title>
    <link href="http://RebootJeff.github.io/blog/2017/08/14/one-on-ones-with-manager/"/>
    <updated>2017-08-14T22:38:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2017/08/14/one-on-ones-with-manager</id>
    <content type="html"><![CDATA[<p>I’ve heard some newbies and even not-so-newbies wonder about what to do in 1:1 meetings with their managers. As a result, I gave some advice, and I listened to others’ advice. After collecting some thoughts, here’s the not-so-short overview…</p>

<h2 id="the-easy-stuff">The Easy Stuff</h2>

<h3 id="company-inquiries">Company Inquiries</h3>
<p>Ask for clarifications or details on the company’s roadmap. How’s the business side of things? How is the engineering dept progressing towards meeting roadmap goals? How is the roadmap changing? What factors might cause it to change?</p>

<p>Keep in mind that this topic depends on your company’s size. A smaller company means your manager is more likely to have more knowledge about the company’s direction and decision-making.</p>

<h3 id="team-improvement">Team Improvement</h3>
<p>Bring up any pain points. Talk about possible improvements in company processes (PTO, food, etc) or technical process (git practices, code reviews, hiring, dev environment, deployment, tech stack).</p>

<h3 id="self-improvement">Self Improvement</h3>
<p>How can you improve your value to the company?
Are there any upcoming training opportunities. What do you want to learn? What does the company want you to learn? What can the company help you learn via training classes and conferences?</p>

<h2 id="the-tough-stuff-get-feedback">The Tough Stuff (Get Feedback!)</h2>
<p>But make try to get specific feedback. Asking “How am I doing?” is imprecise, and therefore, it could be less helpful. Unless you’re screwing up something big, most managers probably don’t have a solid response ready (they’ve got other things on their minds –like other meetings they have that day). More precise: “What skills should I focus on? How can I help more? Are there new projects in the roadmap that I can really add value to? What goals does the company has for my role?”</p>

<p>Anyway, one of the biggest things I focus on in my 1:1s is training/learning opportunities. For example, “What’s the company’s training budget/policy? Is there any training I could take that would benefit the company directly? What about training that I’m personally interested in? Can I go to conference A, B, and/or C? Can I attend workshop D, E, and/or F? There’s a meetup I want to attend, but I’d have to leave work early every Tuesday; is that ok?”</p>

<p>I also like to discuss new hotness. For example, “I’ve been interested in technology X; can I give a presentation to the team about it even if we can’t use it any time soon? Can we possibly start using it?”</p>

<p>And suggestions for process improvements. For example, “Here are my thoughts re: onboarding, hiring, story planning, etc”.</p>

<p>Sometimes, I discuss team issues (personnel or process). For example, personnel issues: “Person X tends to interrupt me a lot. I’ve tried A, B, and C. So things have gotten better, but there’s still room for improvement. Can you help?” For example, process issues: “We need a better convention for git branching/merging.”</p>

<p>After the first 2 or 3 1:1 meetings, a decent chunk of time is dedicated to just reflect on the topics brought up in the previous meeting.</p>

<p>You can also talk about a lot of initiatives outside of the day-to-day. You can express desire to: spearhead company culture stuff, organize team events, be a mentor, start an internship program, organize meetups, volunteer at recruiting events, etc.</p>

<p>So I guess it’s a mutual feedback session: I want to discuss ways for me to grow + ways for company/team to grow.</p>

<p>Less directly, it’s a good way to see if your interests are still aligned with the team. For example, through the 1:1s, if you express concerns that are never addressed or if you express desire to work on something but you never get the opportunity –then the 1:1s help you learn it’s time to switch teams or even jobs :(</p>

<h2 id="the-bonus-stuff-get-perspective">The Bonus Stuff (Get Perspective)</h2>
<p>Ask your manager about their experiences. How many meetings do they attend on a typical (and atypical) week? What goals do they have for themselves? What do they like/dislike about the job? What did it take for them to achieve their own career goals?</p>

<p>You gain a lot of insight by learning about your manager, their perspectives, and their typical day (outside of directly interacting with you and your team). You gain insight on what it’s like to be in a formal leadership role, how content/stressed your manager is (look out for burnout), etc. This insight can help you better approach your manager with new ideas and even help make sure there are no major signs that the manager might be unhappy at the company. If the manager leaves, that could have a huge impact on your job.</p>

<h2 id="what-not-to-do">What NOT To Do</h2>

<p>It’s not a status meeting, code review session, etc.</p>

<p>This isn’t a time for simply recapping “so what have you been working on?” If your manager doesn’t already know the answer to that question, that’s a bad sign or your organization isn’t properly structured to give your managers the time/opportunity to understand direct reports’ work.</p>

<p>In other words, the 1-on-1 shouldn’t just be used as a more in-depth SCRUM/status meeting.</p>

<p>I’ve also heard that 1-on-1s could be used for in-depth code reviews, but if your organization doesn’t do proper code reviews as part of the usual process of development, that’s another bad sign.</p>

<h2 id="remember-have-a-plan-and-get-takeaways">Remember: Have a Plan and Get Takeaways</h2>
<p>Go into the 1-on-1 meeting with some kind of agenda, plan, questions, etc. Don’t just go into the meeting empty handed.</p>

<p>Based on the conversation, take some notes. Use them as reference, but also use them to track your own progress towards meeting any goals or action items discussed in previous meetings.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Talk While Coding and Whiteboarding in 7 Steps]]></title>
    <link href="http://RebootJeff.github.io/blog/2015/04/19/how-to-talk-while-coding-and-whiteboarding/"/>
    <updated>2015-04-19T21:13:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2015/04/19/how-to-talk-while-coding-and-whiteboarding</id>
    <content type="html"><![CDATA[<p><img src="/images/20150419/startupstock_whiteboarding.jpg" alt="Photo of whiteboarding" /></p>

<p>In <a href="/blog/2014/09/02/communication-for-engineers-101-we-have-a-problem/">my first article on Communication For Engineers</a>, I ranted about my disappointment surrounding engineering and communication skills. I ended that blog post with a list of communication-related topics that I promised to write about. Instead of addressing any of those topics (sorry!), this post will talk about how software engineers can improve their communication while coding collaboratively or while solving coding challenges for a job interview.</p>

<p><strong>Warning:</strong> JavaScript is my specialty, so some of the advice below is JS-centric, and all code examples are written in JS.</p>

<h4 id="i-cooked-up-7-steps-for-how-to-discuss-code-smoothly">I cooked up 7 steps for how to discuss code smoothly:</h4>

<ol>
  <li>Draw the situation</li>
  <li>Ask clarifying questions</li>
  <li>Explain approach</li>
  <li>Breadth-first coding</li>
  <li>Refactor</li>
  <li>Walkthrough</li>
  <li>Testing</li>
</ol>

<p>Notice that these steps don’t magically provide a complete guide to actually solving problems. For example, they don’t tell you which data structures to use. Instead, these steps show you how to communicate better as you solve a challenge. They help you talk with your interviewer or colleague about the problem space, your initial impressions, your ability to break down the problem into sub-problems, and your quality assurance process.</p>

<h1 id="the-7-steps-explained">The 7 Steps Explained</h1>

<h2 id="drawing-the-problem">1. Drawing the Problem</h2>
<p>Admittedly, this step could be optional. Drawing is best for folks who work well with visuals. But even if you’re not an artist, you should still consider drawing a diagram or picture of the problem because visuals tend to be effective tools for communicating complex subjects and situations. For example, data structures are usually easier to talk about after you draw them out.</p>

<p>Furthermore, you might reveal certain questions through the act of drawing. At the very least, <strong>drawing stuff out can help an interviewer follow you</strong>. Going back to the data structures example: imagine you’re supposed to work with a binary tree. It’s easier to talk about it if you draw a tree and point to nodes rather than just saying, “First we will process the root node, then we will go to the left child and do blah blah blah. At that point, depending on the value, we might go down to the child’s child or we might…”</p>

<p>By the way, <strong>you don’t have to stick to drawing pictures</strong>. This step could be about writing down example data, example inputs, example outputs, example use cases; and then mapping them together by drawing arrows, circles, etc. Examples are great for communication, and they are also good for problem-solving in general. Try to think of examples that are really simple (to get a basic grasp of the problem), examples that are more realistic, and examples that are crazy (to reveal edge cases and potential validation concerns).</p>

<h2 id="asking-clarifying-questions">2. Asking Clarifying Questions</h2>
<p>Do not follow any of your assumptions without asking a question first. It’s tempting to hear a challenge or puzzle and immediately get into solving it. But there are real-world concerns for real-world problems, and you should demonstrate your familiarity with such issues.</p>

<p>Also, you can save time by asking clarifying questions during an interview because interview challenges tend to be contrived. Do you have to account for crazy input values? Does the output need to be formatted in a certain way? If the puzzle involves numbers, do you have to account for negative values, decimals, etc? Are you expected to do input validation, error handling, or memory optimization?</p>

<h2 id="explaining-your-approach">3. Explaining Your Approach</h2>

<p>At this point, you might have a solution in mind and you’re eager to get coding. Or you might just have a partial solution. Either way, take a moment to give a quick overview of the <strong>purpose</strong> of the code you’re about to write. Also, give a sense of what <strong>algorithms or concepts</strong> will be implemented as part of your approach to the problem at hand.</p>

<p>For example, “This looks like a problem we can solve with a recursive solution that traverses all nodes of the dataset.” In this example, “recursion” is the concept and traversal is the purpose.</p>

<h2 id="breadth-first-coding">4. Breadth-First Coding</h2>

<p>When it comes time to actually write out some code (or pseudocode), write out as much as possible at a high-level before going into the low-level details. For example, if your solution requires looping over objects received from an AJAX request in order to parse some data, don’t dive into that AJAX request. That’s a low-level detail. Start from the high-level approach of “fetching data” and then immediately move to the next high-level step of “parsing data”. With this strategy, you cover the whole breadth of the solution before diving into any detail of the solution.</p>

<p>In other words, write modular code by using a breadth-first mindset. Everyone knows it’s a good idea to write several small functions rather than one giant function, so apply that approach to your communication too. When you explain how a computer works, you start the explanation at a high level (e.g., “hard drives store data, CPUs crunch data, …”) rather than starting at a low level (e.g., “the flow of electrons is controlled by gates known as transistors”).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Example - Breadth-First Coding </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Challenge (aka Prompt) - Write a function that determines the average number of</span>
<span class="comment">// retweets for a given user after a given cut off date.&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>// Phase 0 - Psuedocode (optional)
function getRetweetAverage(username, cutOffDate) {
  /**
   * 1. Fetch tweets via Twiter API
   * 2. Filter tweets based on date
   * 3. Calculate avg count of retweets from filtered data
   * 4. Return a promise that resolves to the answer
  **/
}<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>// Phase 1 - Coding with declarative helper functions
function getRetweetAverage(username, cutOffDate) {
  return fetchTweets(username).then(function(tweets) {
    var recentTweets = filterTweetsByDate(tweets, cutOffDate);
    return calculateAverageRetweets(recentTweets);
  });
}<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>// Phase 2 - Implement low-level helper functions
function fetchTweets(username) {
  // Let’s pretend we’re using AngularJS’s HTTP request service, which uses promises.
  var params = {
    screen_name: username,
    count: 200 // FYI this is the max allowed by Twitter’s API
  };
  return $http.get(‘https://api.twitter.com/1.1/statuses/user_timeline.json’, params);
}<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>function filterTweetsByDate(tweets, cutOffDate) {
  return tweets.filter(function(tweet) {
    // Convert tweet’s String date into a JS Date object before comparing.
    var createdAt = new Date(tweet.created_at);
    return createdAt <span class="entity">&amp;gt;</span> cutOffDate;
  });
}<span class="tag">&lt;/p&gt;</span>

&lt;p&gt;<span class="keyword">function</span> <span class="function">calculateAverageRetweets</span>(tweets) {
  <span class="keyword">var</span> totalRetweets = tweets.reduce(<span class="keyword">function</span>(sum, tweet) {
    <span class="keyword">return</span> sum + tweet.retweet_count;
  }, <span class="integer">0</span>);
  <span class="keyword">return</span> totalRetweets / tweets.length;
}
</pre></div>
</div>
 </figure></notextile></div></p>

<p>In the example above, you should write code one “phase” at a time. Starting with psuedocode is optional, but it might be a good idea to at least verbalize it if you don’t plan on writing it. Then write the code in a declarative style as seen in “Phase 1”. Lastly, flesh out the functionality of your solution by writing the code that actually makes things work.</p>

<p>By the way, I’ve never actually used the Twitter API, so the example code might not follow best practices or might not take into account how it actually behaves. For instance, maybe the API accepts a parameter to do the date filtering for you.</p>

<h2 id="refactoring-your-first-draft">5. Refactoring Your First Draft</h2>

<p>Once you’ve reached the point where the code seems to solve the challenge at hand, it’s time to refactor. If you’re writing under pressure in an interview situation, it’s likely that you haven’t written the cleanest code. If you’re writing without any pressure, it’s still good to refactor your first draft into a more readable/maintainable variant. Here’s a list of tips for deciding what to refactor:</p>

<ul>
  <li><strong>Improve readability</strong> by fixing indentation, whitespace, names, etc.
    <ul>
      <li><strong>Rename variables</strong> into semantic names. It’s tempting to use very short variable names during interviews because you feel pressure to finish quickly. Consider renaming them into more recognizable names to show your audience that you know how to write maintainable code that potential co-workers could easily read.</li>
      <li><strong>Replace loops</strong> with a <code>map</code>, <code>filter</code>, <code>reduce</code>, etc where possible.</li>
      <li><strong>Consider naming anonymous functions</strong> if they have potential to be re-used as a helper.</li>
    </ul>
  </li>
  <li><strong>Extract code</strong> into helper functions. It’s very common for interview candidates to inadvertently write long functions. Even if you tried to follow Breadth-First Coding in Step 4, you may have slipped.</li>
  <li><strong>Double-check promises</strong> and look for opportunities to reduce boilerplate and anonymous functions.
    <ul>
      <li><strong>Check return statements</strong> to ensure that your promises will resolve to the correct values (and that the segments of your promise chain will pass correct values).</li>
      <li><strong>Use promise library helpers</strong> such as <code>all</code>, <code>spread</code>, etc where possible.</li>
    </ul>
  </li>
  <li><strong>Add error-handling</strong>/logging for professional bonus points.</li>
  <li><strong>Rewrite in another style</strong> (e.g., Functional Programming vs Object-Oriented Programming) for massive bonus points.</li>
</ul>

<p>Admittedly, this Step 5 isn’t as directly related to communication as other steps. It’s mostly focused on improving your code. However, there is still a communiation-related opportunity here. As you are refactoring, verbalize your intentions. Discuss what you want to improve before you improve it. Explain the rationale behind the improvements. Mentions the pros and cons of your code without the improvements and with the improvements (i.e., before vs after).</p>

<h2 id="walking-through-your-answer">6. Walking Through Your Answer</h2>

<p>At this point, your code should be presentable. By following the previous steps, your audience should already have a solid, high-level understanding of your code. So now it’s time to give a detailed walkthrough.</p>

<p>Explain any nuances, use precise terminology, and expound on any interesting control flow or references (e.g., closures in JavaScript). You can also mention any implications regarding speed, memory, I/O, security, etc. But overall, your goal is to describe your code <em>in detail</em>.</p>

<h2 id="testing-your-answer">7. Testing Your Answer</h2>

<p>You might actually want to perform this step before step 6, but it depends on how you roll. After you’ve gotten to the point where you have a solution that seems to be good, take a minute to describe how you’d make sure it’s robust. When you normally write code on your own, you of course test it out by running it with various inputs or circumstances. Describe them; verbalize them.</p>

<p>For example, if you’re writing a function with some parameters, you’ll probably run the function with a bunch of different arguments with different values and maybe different datatypes.</p>

<ul>
  <li><strong>Numbers:</strong> negative values, 0, 1, odd vs even, really big numbers, decimals</li>
  <li><strong>Strings:</strong> upper vs lower case, single character, numeric characters, punctuation and non-alphanumeric characters.</li>
  <li><strong>Object Literals:</strong> check for weird keys (much like <em>Strings</em>)</li>
  <li><strong>Collections &amp; Data Structures:</strong> empty collections, only 1 item, several items, check for mutation side-effects, ascending order, descending order, random order, nested objects/arrays/other data structures.</li>
</ul>

<h1 id="where-did-these-steps-come-from">Where Did These Steps Come From?</h1>

<p>I came up with these 7 steps based on…</p>

<ul>
  <li><a href="/blog/2014/05/31/dev-job-search-tips-from-the-coding-interview-guru/">advice from Gayle Laakmann McDowell</a></li>
  <li><a href="/blog/2014/05/11/hackr-diary-weeks-11-12-and-beyond/">advice from Hack Reactor instructors</a></li>
  <li>my experience interviewing for jobs</li>
  <li>my experience conducting a handful of mock interviews for Hack Reactor grads</li>
  <li>my experience conducting interviews where I work (10+ so far)</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Communication for Engineers 101: We Have A Problem]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/09/02/communication-for-engineers-101-we-have-a-problem/"/>
    <updated>2014-09-02T12:01:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/09/02/communication-for-engineers-101-we-have-a-problem</id>
    <content type="html"><![CDATA[<p>Software Engineers are hot shit right now. Recruiters pander to us by calling us rockstars, ninjas, and gurus. We are revered for our intellect, our problem solving skills, our powerful working memory, our familiarity with mysterious tech –but not for our communication skills. <strong>Why is this ok?</strong> If we’re expected to be smart, shouldn’t we be expected to grasp effective information exchange with <em>fellow humans</em>? Why is modern society still excusing coding “rockstars” from having to come equipped with high quality communication skills?</p>

<p><img src="/images/20140902/tin_can_walkies.jpg" alt="Tin Can Tech" /></p>

<p class="my-caption">Photo by <a href="http://gratisography.com/">Gratisography</a></p>

<p>How do I know that software engineers aren’t expected to have stellar communication abilities? While I don’t have hard data, I have met, worked with, or listened to a lot of engineers who have sub-par comm skills. And no one makes a big fuss of it, which makes me think no one has high standards for the skills I’m talking about.</p>

<p>On top of that, job interviews target coding skills, web tech trivia, and algorithms with minimal examination of proficiency in structuring arguments, explaining complex concepts, and intelligent discussion. There’s a <a href="http://qz.com/258066/this-is-why-you-dont-hire-good-developers/">pretty great article</a> by the CTO of npm that drills into this topic.</p>

<p>Maybe it’s all rooted by the tendency for engineering schools to suck at emphasizing communication in their curricula. My time in college certainly didn’t include any lessons on effective speaking. You often hear schools talk about the importance of group projects and working together, but they never explain what good teamwork looks like, what common pitfalls plague discussions/meeting, etc. Instead, they focus on teaching the hard sciences and math. Then class after class of students walk away with little or no appreciation for the subtleties and subjective nuances of conveying ideas to one another.</p>

<p><blockquote><p>I find it so funny that programmers laugh at all these subjective fields of endeavor when that is what they do.</p><footer><strong>David Heinemeier Hansson, Creator of Ruby on Rails,</strong> <cite><a href='https://www.youtube.com/watch?v=9LfmrkyP81M?t=18m30s'>RailsConf 2014 Keynote: Writing Software</a></cite></footer></blockquote></p>

<p>The ability to “work well with others” is often mentioned as a requirement in job descriptions for programming positions, but how many interviewers and interviewees really know wtf that means? Does it mean employees are expected to avoid conflict like their lives depend on it? Is it benchmarked by low quantum of drama? Should it be deeply linked to “likeability”?</p>

<p>No. It’s about empathy, open-mindedness with regards to homo sapiens, and communication skills (among other things).</p>

<h3 id="who-died-and-made-you-king-of-communication-skills">Who died and made you king of communication skills?</h3>

<p>My point is that it’s time to stop letting engineers off the hook for lacking skills in listening, speaking, presenting, asking, writing, and critiquing. I’m no master in these subjects. My own skills are far from honed, but you don’t need to be a master to have some ideas on how to improve. Also, it can be fun to explore communication issues just like how it can be fun to solve mysteries in web app development. Besides, as engineers, we pride ourselves in being good at what we do, so shouldn’t we put some effort into gaining communication skills that make us even better at what we do?</p>

<p><strong>If you’re pondering my motivation for making such a big deal out of all this</strong>, then let me just say that impatience is a potent impetus. I started analyzing communication when I started noticing miscommunication and the toll it took on my patience. I’m not just talking about miscommunication during meetings at work. I’m also referring to poor presentations at meetups, chatting at networking events, conversing during job interviews, writing open-source documentation, writing test descriptions, etc.</p>

<p>When I don’t understand someone, I tend to wonder, “Wtf is this person even saying?” Then that little voice in my head chimes in, “Don’t be so harsh, Jeff. Maybe you’re just too dumb to understand.” After that, another inner commentator adds, “Fellas. Shut up. Let’s use our detail-oriented brain to brainstorm reasons why communication has fallen apart here.”</p>

<h1 id="lets-do-this">Let’s Do This</h1>

<p>We engineers are problem-solvers, right? Well here’s a problem: miscommunication. So let’s solve it. What’s the first step for solving stuff? Comprehend the problem space. Break it down. Then divide and conquer.</p>

<h2 id="breaking-it-down">Breaking it Down</h2>

<p>We’ve confirmed miscommunication. Now what are the root causes? There are too many possibilities to cover now, but here are a few:</p>

<ul>
  <li><strong>Knowledge Imbalance:</strong> Person A knows something person B doesn’t know. The imbalance results in lack of context or incorrect assumptions.</li>
  <li><strong>Ambiguity:</strong> Is the person talking about this? Or is the speaker talking about that? What is this? What is that? Maybe we’re referring to different things. Perhaps less ambiguous nouns are needed.</li>
  <li><strong>Suboptimal Terminology:</strong> Lack of or misuse of terminology and jargon is pretty common in programming. For example, does everyone know what you mean when you say “collection”? Are you referring to an object literal that has a bunch of properties, an array with a bunch of elements, a MongoDB collection, or a more abstract thingamabob that “collects” stuff?</li>
</ul>

<h2 id="divide-and-conquer">Divide and Conquer</h2>

<p><em>If X, then Y.</em></p>

<ul>
  <li>If there is a knowledge imbalance, then identify who needs what info and let the glorious sharing of knowledge begin.</li>
  <li>If something is ambiguous, then ask clarifying questions.</li>
</ul>

<p>Et cetera. One at a time. We can get through this together! Let’s hold hands! –or not. Because even the nicest people fail to wash their hands frequently enough to earn hand-holding privileges. Don’t let your guard down.</p>

<h1 id="whats-next">What’s Next?</h1>

<p>The next blog post in my <a href="/blog/categories/communication-for-engineers/">Communication for Engineers</a> series will focus on tips for presenting a tech talk. I’m oddly excited about it. I haven’t done any big tech talks, but I’ve attended plenty. There are some easy ways they could be better. There are common issues that are easy to solve. That said, I’m also working on a blog post covering web security fundamentals. In due time, I will write tips for:</p>

<ul>
  <li>Presenting a tech talk</li>
  <li>Conversation (with emphasis on listening)</li>
  <li>Asking Questions</li>
</ul>

<p>If I’m not burnt out from writing about communication skills, I will also blog about:</p>

<ul>
  <li>Giving &amp; Getting Feedback</li>
  <li>Writing (with emphasis on concision)</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dev Job Searching Tools Roundup Part 2: Readyforce, The Muse, The Sourcery, AngelList, VC job listings]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/08/14/dev-job-searching-tools-roundup-part-2/"/>
    <updated>2014-08-14T18:49:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/08/14/dev-job-searching-tools-roundup-part-2</id>
    <content type="html"><![CDATA[<p><img src="/images/20140814/code_and_trees.jpg" alt="JavaScript and Palm Trees" /></p>

<p class="my-caption">If you find the right job, you can feast your eyes on sweet code <strong>and palm trees</strong>.</p>

<p>In <a href="/blog/2014/06/28/dev-job-search-tools-part-1">my previous post</a>, I described my experience using LinkedIn, Whitetruffle, Hired, and Dice. This time around, I’m going to cover a crop of sites that I used less extensively. Although they didn’t yield fruitful leads, they’re still pretty interesting to me, and with job searching, you <em>can’t not</em> explore more than a few avenues.</p>

<h1 id="job-sites-and-search-tools">Job Sites and Search Tools</h1>

<h2 id="readyforce">Readyforce</h2>
<ul>
  <li><strong>The gist:</strong> Job board for entry-level opportunities (mostly for recent college grads)</li>
  <li><strong>My experience:</strong> I only browsed Readyforce for a bit</li>
  <li><strong>My recommendation:</strong> Give it a shot, but keep expectations low if you’re not a recent college student.</li>
</ul>

<p>The <a href="http://www.readyforce.com/">Readyforce website</a> has undergone a big redesign since my job searching days. I was originally drawn to the site by its large selection of companies listing their open positions. However, the site is clearly marketed towards college grads, and the creators want job seekers to “connect” with employers through their own social(?) network.</p>

<p>When I visited the site a few days ago, it looked quite different. While it does look cooler nowadays, it also feels buggier. On top of that, there doesn’t seem to be a clear way to apply for jobs. Maybe I just don’t understand their model, or more likely: maybe I have to register an account first.</p>

<h2 id="the-muse">The Muse</h2>
<ul>
  <li><strong>The gist:</strong> Job listing featuring “rich media”</li>
  <li><strong>My experience:</strong> Browsing The Muse was so fun that I even signed up for the email newsletter.</li>
  <li><strong>My recommendation:</strong> Must visit! The site does a fantastic job of profiling each company. Their email newsletter does a pretty bland job of standing out from other self-help resources.</li>
</ul>

<p>I love what <a href="https://www.themuse.com/">The Muse</a> is doing. Muse peeps travel to employers’ offices to take professional photos and record video interviews with current employees to highlight the benefits of working for the employers. It’s great to see photos of cool offices, and although the videos have mediocre audio/visual quality, they still provide some decent insight. The end result is that The Muse feels like a portal for quick tours of hiring companies. I felt like I was getting a fun, behind-the-scenes look at a bunch of tech jobs rather than just browsing endless, cookie-cutter job descriptions like you do with most other job sites.</p>

<p>During my first few visits to their site, I was so enamored with The Muse that I signed up for their email newsletter. That’s right, I actually <em>wanted</em> their spam. Sadly, their emails are pretty lame. Each message uses a click-bait subject line like “This Genius Formula Can Tell You Your Dream Job”. Opening one of these emails just reveals a giant button to take you to their blog where the short articles don’t live up to the hype of their titles/headlines. By the way, the “genius formula” is <code>gifts + passions + values = your calling</code>. <em>Genius</em>.</p>

<h2 id="the-sourcery">The Sourcery</h2>
<ul>
  <li><strong>The gist:</strong> Recruiting firm that actually lists job opportunities on their site.</li>
  <li><strong>My experience:</strong> I talked to a couple of their recruiters, and I got minimal results.</li>
  <li><strong>My recommendation:</strong> I’m not a fan.</li>
</ul>

<p>You can find a lot of <a href="http://www.thesourcery.com/job_seekers">job postings on The Sourcery</a>. The companies that use The Sourcery for recruiting will often post on other job sites, but there will be a note at the bottom of the job description that mentions the requirement to apply via The Sourcery. After filling out a job application on The Sourcery, one of their recruiters will let you know whether or not your candidacy will be pursued.</p>

<p>For me, the problems come from the recruiters. They noticed I was a Hack Reactor <a href="/blog/2014/05/11/hackr-diary-weeks-11-12-and-beyond/">grad</a>, and they immediately labeled me as just another coding bootcamp grad –in a bad way. Although they were friendly, the recruiters implied that all coding bootcamp grads are the same, that they’re all “great” <em>junior-level</em> coders, and that they all can’t handle more than the average entry-level job. What’s really weird is that I would get emails from some recruiters telling me that my job application was rejected due to a lack of work experience, but then other Sourcery recruiters would contact me and tell me that they want to interview me for the exact same job. Maybe the recruiters reach out to rejected applicants if the pool of applicants is running low for a particular job.</p>

<p>Obviously, The Sourcery is not the only company that treats bootcamp grads as low-level programmers. This is why Hack Reactor <a href="http://sympatheticvibration.com/hack-reaction-week-8-no-recognition/">doesn’t want you to talk about them during interviews</a>. It’s also why Hack Reactor avoids calling itself a bootcamp. I’m getting off-topic, but the gist is: the bootcamp market is getting bigger, and the quality is very inconsistent. Consequently, the mediocre bootcamps are hurting the reputation for all bootcamps. The Sourcery’s expectations for bootcamp grads have already been adjusted downwards.</p>

<h2 id="angellist">AngelList</h2>
<ul>
  <li><strong>The gist:</strong> Networking in the startup bubble.</li>
  <li><strong>My experience:</strong> I hit the “I’m interested!” button several times without much luck.</li>
  <li><strong>My recommendation:</strong> Meh. It’s easy enough to use, but results will be hit-or-miss.</li>
</ul>

<p>In my last couple of weeks at <a href="/blog/categories/hackr-diary/">Hack Reactor</a>, I was instructed to make sure I had 3 online profiles ready to show off: LinkedIn, GitHub, and AngelList. The nice thing about <a href="http://angel.co">AngelList</a> is that you’re more likely to get in contact with an in-house recruiter. You don’t have to go through 3rd party recruiters. The bad thing about AngelList is that you might not get in contact with any one. When I say it’s “hit-or-miss”, what I mean is that I know some colleagues who were contacted via AngelList by several companies, and I know other colleagues who were getting zero interest. There was no apparent reason for the two distinct outcomes.</p>

<p>I was only contacted by a few companies via AngelList, and I wasn’t too interested in them. There are plenty of startups on the site, and if you’re hoping to join a tiny company, you should at least try to use AngelList.In my experience, although some companies reached out to me, none of the contacts yielded real conversations about interviewing. Also, there are a ton of companies that don’t distinguish themselves (i.e., there are a ton of startups in the advertising industry –and their profiles look too similar).</p>

<h2 id="vc-sites">VC Sites</h2>
<ul>
  <li><strong>The gist:</strong> Easy way to discover jobs (but doesn’t make applying to jobs any easier).</li>
  <li><strong>My experience:</strong> Lots of browsing filled me with hope.</li>
  <li><strong>My recommendation:</strong> Definitely worthwhile, but it’s going to require plenty of effort.</li>
</ul>

<p>Many moons ago, a <a href="https://github.com/Ken123777/megatwillions">ridiculous</a> fellow Hack Reactor grad pointed out that Venture Capital websites tend to have giant lists of job openings for their respective startups. I eventually validated his insight for myself by checking out job lists maintained by:</p>

<ul>
  <li><a href="http://www.sparkcapital.com/jobs/">Spark Capital</a></li>
  <li><a href="http://careers.accel.com/careers_home.php">Accel Partners</a></li>
  <li><a href="http://www.kpcb.com/careers">Kleiner Perkins</a></li>
</ul>

<p>You can find a huge number of jobs. It definitely helps keep your hopes up, knowing that if you fail a job interview, there are so many other jobs to go for. But the caveat to remember is that these job postings are just like any other: it’s hard to get noticed when applying for a job without a referral/connection. For smaller companies, you have a much better chance, but overall, you will have to apply to a lot of jobs just to hear back from a couple employers. Like with all job openings, I recommend putting in some extra effort by checking LinkedIn (or maybe other social networks like Twitter?) to see if you can contact the employer’s engineers, hiring managers, and/or in-house recruiters.</p>

<h1 id="in-other-news">In other news</h1>
<p>I’m exicted to start a new series of blog posts covering various tips, tricks, hacks, best practices, puzzles, challenges, questions, and mysteries (both solves and unsolved) that I’ve encountered at work. This “Learned On The Job” series will be arriving shortly!</p>

<p>That said, I haven’t finished writing about what I learned from the job search process. More job hunt-related content is still to come (including “WTF moments” :D), but I want to mix things up a bit too. After all, talking about software engineering is more fun than talking about searching for software engineering jobs, right?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dev Job Searching Tools Roundup Part 1: LinkedIn vs Whitetruffle vs Hired vs Dice]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/06/28/dev-job-search-tools-part-1/"/>
    <updated>2014-06-28T11:14:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/06/28/dev-job-search-tools-part-1</id>
    <content type="html"><![CDATA[<p><img src="/images/20140628/unemployed_easter_bunny.jpg" alt="Unemployed Easter Bunny" /></p>

<p class="my-caption">"Will Decorate Eggs For Food" by <a href="http://gratisography.com/">Gratisography.com</a></p>

<p>Back in December of 2013, <a href="/blog/2014/05/11/hackr-diary-weeks-11-12-and-beyond/">I graduated from Hack Reactor</a>. After graduating, I started casually looking for a job, but due to the winter holidays, I didn’t start searching in earnest until early-to-mid January. In hindsight, perhaps I should’ve spent less time searching by myself and more time using Hack Reactor’s network/connections. That said, Hack Reactor encourages grads to look for jobs using all sorts of resources, and I benefited from <a href="/blog/2014/05/11/hackr-diary-weeks-11-12-and-beyond/#overtime-support">other forms of job search support</a> from the HackR staff.</p>

<p>This blog post covers a bunch of online resources I tried out myself. I ultimately found my current job through a recruiter, but that doesn’t mean that job sites felt useless to me. Therefore, I’m happy to share some opinions and experiences with you. Maybe you’ll have better results. At the very least, job sites showed me just how many awesome jobs are available, which kept my spirits up during my battles with job interview stress.</p>

<h1 id="job-sites-and-search-tools">Job Sites and Search Tools</h1>

<h2 id="whitetruffle">Whitetruffle</h2>
<ul>
  <li><strong>The gist:</strong> Employers and job seekers are matched using a system akin to online dating.</li>
  <li><strong>My experience:</strong> I only tried out <a href="http://www.whitetruffle.com/">Whitetruffle</a> for a few days. I revisisted sparingly.</li>
  <li><strong>My recommendation:</strong> Thumbs down. I see potential for the site, but for now, it’s lackluster.</li>
</ul>

<p>It feels a bit hollow. Much like with online dating, everyone makes a profile. Companies look at job seekers’ profiles, and job seekers like you can look at companies’ profiles. There are Like buttons to express interest. Mutual interest leads to a match. A match leads to an email notification. An email notification is <em>supposed to</em> lead to a conversation or some sort of initial phase of job candidacy…right?</p>

<p>You are also given notifications when an employer says they like your profile. The site will nag you to respond to the employer. However, in my experience, employers didn’t respond after I indicated mutual interest. Boooo! This made me wonder if employers just click the Like button on every profile (i.e., spamming) in hopes of stirring up job seeker interest.</p>

<h2 id="hired">Hired</h2>
<ul>
  <li><strong>The gist:</strong> “Auctions” occur regularly. During auctions, employers “bid” on you.</li>
  <li><strong>My experience:</strong> I went through a couple of auctions, which resulted in a few on-site interviews.</li>
  <li><strong>My recommendation:</strong> Thumbs up. I will explain some shortcomings, but overall, Hired is looking good.</li>
</ul>

<p><a href="http://www.hired.com/">Hired</a> is quite an ambitious setup. Job seekers must pass a few coding challenges to enter their pool of candidates, but when I joined, the site hadn’t yet implemented the challenges, so I was able to join after my profile was approved. Hired must have convinced employers that their candidates are top notch because employers were “bidding” salaries between $105,000 and $130,000 on me.</p>

<h3 id="misleading-but-worth-it">Misleading, but worth it?</h3>

<p>However, the auction format is quite misleading because it implies that you must accept the highest bid. It also implies that employers must hire you and offer you whatever they bid. This is not the case. There are no strict obligations. You must still pass whatever interview process employers have. Employers can still ultimately reject you. Employers can offer you whatever salary they want to offer you if you pass their interviews. In other words, Hired simply uses an auction format as a gimmick to get people excited to participate. It’s a trick, but I’m not even mad.</p>

<p>Why not? Because the pool of employers on Hired is pretty darn good. I got serious interest from 5+ companies. I got multiple on-site interviews. I got two offers. Plus, if you get a job, Hired will give you a $2,000 bonus. Awesome, right?</p>

<p>Now it’s not all rosy. Some companies that were interested in me seemed really boring. The companies that gave me offers both offered me salaries below their respective bids. In the end, I didn’t accept any job offers because I didn’t think I was going to fit well within the companies or something irked me about the company. I should also note that Hired “provides” you with an “advocate” –in less disguised terms, Hired assigns a recruiter to you. The recruiter will call you pretty often to help plan interviews and to eventually nudge you into accepting an offer. If this sounds potentially annoying to you, don’t fret because I’ve dealt with many recruiters, and my Hired recruiter was definitely one of the nicer ones (my only beef is that the recruiter would sometimes call me in the morning when I was sleeping in late).</p>

<p><strong>Caveat:</strong> some of my friends used Hired, and they didn’t have a great experience. For me, the only real bummer was when Hired stopped including me in auctions. I think I may have disappointed my “advocate” by not accepting job offers, and I may have reacted poorly to the recruiter’s nudging because at the time, I thought it was a bit too much. Little did I know that he was far less pushy than most recruiters.</p>

<h2 id="dice">Dice</h2>
<ul>
  <li><strong>The gist:</strong> Generic job board with a reputation for being stalked by recruiters.</li>
  <li><strong>My experience:</strong> I put my résumé on Dice and within 2 days, I was receiving tons of emails from 3rd party recruiters and head hunters.</li>
  <li><strong>My recommendation:</strong> Thumbs up. Dice is effective, but you will NOT enjoy the experience.</li>
</ul>

<p>Dice is an ugly site that is incredibly helpful in a painful way. First, I created a résumé specifically for Dice. What does this mean? Dice is for when you WANT spam from recruiters. Dice is for when you want to turbocharge your job search. <strong>Dice is for when you’re finally ready to destroy your fear of sharks, so you jump in a shark tank with craploads of bleeding tuna attached to your wetsuit.</strong> Do you get the picture, or must I throw more ridiculous warnings at your eyes? You must be mentally prepared to be inundated with contact from recruiters. They can sometimes be…unpleasant.</p>

<p>The onslaught of recruiter spam arrives from Dice because your profile is <em>public</em>. Your profile is rather pointless <em>except</em> for the résumé part of the profile. This means that your résumé has to be public, so it’s a good idea to upload a variant that excludes your contact info. Recruiters will check out your résumé and contact you via Dice messaging (which gets sent to your email). You then respond to recruiters, and work with them to get interviews and get hired. It’s a very clunky process. I could rant for several more paragraphs on the downsides of working with recruiters. However, it can be worth it. I’m very happy at my current job, which I earned through a recruiter.</p>

<h2 id="linkedin">LinkedIn</h2>
<ul>
  <li><strong>The gist:</strong> Networking, stalking, and head hunters.</li>
  <li><strong>My experience:</strong> Messaging through LinkedIn actually helped me. Also, I got the feeling that employers/recruiters viewed my LinkedIn more than they read my actual résumé.</li>
  <li><strong>My recommendation:</strong> Thumbs up. Linkedin is overrated, but it’s versitile and omnipresent.</li>
</ul>

<p>I didn’t get a ton of recruiters reaching out to me via LinkedIn. It can’t compete with Dice in that department, but at least with LinkedIn, you get contacted by in-house recruiters, not just 3rd party recruiters.</p>

<p>That said, after I got a job, I updated my LinkedIn profile to show my new gainful employment. Consequently, I’ve been contacted by recruiters at least a few times a week even though I’m not actively trying to get a job. In other words, the recruiter “spam” really only pours in if you’re currently employed (or experienced).</p>

<h3 id="other-uses">Other Uses</h3>

<p>Not to give false hope, but you may want to consider paying for a LinkedIn pro account. This lets you send a few messages to people you’re not connected with. I used this feature to contact executives and engineers at a few companies I was interested in. A couple of folks at one company actually replied to my messages, in which, I sincerely gushed about the company (and bragged about my 1337ness of course).</p>

<h3 id="quick-aside-unique-rsums-and-cool-profiles">Quick Aside: “Unique” résumés and cool profiles</h3>

<p>I consider my LinkedIn profile to be a way for me to show off a bit of my personal style. Some people try to be edgy or unique by formatting their résumés in a different way, but I’ve heard that’s actually a bad idea. Not to mention, a lot of people just don’t come up with good designs. Some do, but plenty don’t. Besides, <a href="/blog/2014/05/31/dev-job-search-tips-from-the-coding-interview-guru/#interviewers-process--employers-perspective">résumés need to be easily skimmed</a> by human eyes and easily scanned by software. After I got hired, I switched from being a job seeker to being an interviewer within my first week at the company. I saw over 10 resumes and sadly, the bland-looking ones were generally easier to skim. The uniquely formatted ones showed good intentions, but poor execution. You should think twice before you use bombastic fonts and lighter colors.</p>

<p>Oh! Back to my original point: I use my LinkedIn profile to demonstrate a bit of my personality through <em>writing style</em> –not through formatting (although I do add bullet points because their text organization powers are un-friggin’-paralleled). In fact, <strong>for pretty much any job site that required me to create a profile, I put in quite a bit of effort to write something actually interesting</strong>. It can be difficult to flex creative muscles for such tasks, but I believe it’s worth it to prevent your profile from being read with the same dry tone as every other candidates’ boring dossier. If you have 5+ years of perfectly relevant skills, then you can probably write a profile devoid of personality/creativity, and you’ll still stand out as a stellar candidate. Hooray for when that day arrives.</p>

<h1 id="stay-tuned">Stay Tuned</h1>

<p>Check back (somewhat) soon for more opinions and anecdotes on software developer job search sites. In part 2 of this Dev Job Searching Tools Roundup, I will ramble about Readyforce, The Muse, The Sourcery, AngelList, VC job listings, and more.</p>

<p>In future blog posts, I will cover other software engineering job hunting topics. I’m particularly excited to discuss my impressions from the other side of interview process. Also on my to-blog list: inheritance in JavaScript and lots of AngularJS best practices / app architecture patterns.</p>
]]></content>
  </entry>
  
</feed>
