<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | RebootJeff.com]]></title>
  <link href="http://RebootJeff.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://RebootJeff.github.io/"/>
  <updated>2015-11-15T23:06:08-08:00</updated>
  <id>http://RebootJeff.github.io/</id>
  <author>
    <name><![CDATA[Jeff Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why fast code matters even when phones have octa-core CPUs]]></title>
    <link href="http://RebootJeff.github.io/blog/2015/11/16/why-fast-code-matters-even-when-phones-have-octa-core-cpus/"/>
    <updated>2015-11-16T10:29:00-08:00</updated>
    <id>http://RebootJeff.github.io/blog/2015/11/16/why-fast-code-matters-even-when-phones-have-octa-core-cpus</id>
    <content type="html"><![CDATA[<p>Have you seen the new Nexus 6P smartphone? It packs a “system on a chip” that features <em>two</em> CPUs, each with <em>four</em> cores. What a crazy, powerful world we live in! Surely modern smartphones can run your JavaScript code without breaking a sweat, right?</p>

<p><img src="/images/20151116/ss_snapdragon810.png" alt="Snapdragon 810 promo material" /></p>

<h2 id="writing-performant-code-is-hard">Writing Performant Code is Hard</h2>

<p>It’s true that really low-level performance optimizations often don’t feel like they’re worth learning or worrying about. You’ve got to deal with complicated business logic and juggling user data and state! You don’t have time to record CPU profiles for every new function you write!</p>

<p>On top of that, <strong>computers keep getting more powerful, right?</strong></p>

<h2 id="but-what-does-the-future-hold">But What Does the Future Hold?</h2>

<p>Here’s the insight*: if you’re targeting laptops/desktops, then you can probably feel safe about imperfect code in many respects. However, <strong>the trend of computers getting more powerful isn’t what it seems.</strong></p>

<h3 id="devices-speed-up-after-slow-starts">Devices speed up after slow starts</h3>

<p>Look at the trend from a bigger picture perspective: modern tech has gone from powerful desktops to less powerful laptops (and netbooks and Chromebooks!) to even less powerful smartphones/tablets to much less powerful wearables and IoT devices. Consider that smartphone apps might not be so popular if web apps were more performant earlier in the history of iOS, Android, and web views.</p>

<p><em>*Disclaimer:</em> I can’t take credit for the insight. I read it somewhere on the Internet, and I don’t remember where. Probably Quora though.</p>

<p>I’ll also add my own thought to chew on: Memory optimizations might still be important as folks browsing the web tend to leave a ton of tabs open and don’t close/reopen their browsers as often as they used to.</p>

<h2 id="whats-a-well-intentioned-developer-to-do">What’s a well-intentioned developer to do?</h2>

<p>To be fair, browsers have come a long way. And it can be tough to care about tiny performance optimizations when browsers might end up handling them for you. For example, string concatenation used to be a no-no in JavaScript. The recommended best practice was to use <code>Array.prototype.join</code> instead of string concatenation.</p>

<p>This “best practice” is now <a href="http://archive.oreilly.com/pub/a/server-administration/excerpts/even-faster-websites/writing-efficient-javascript.html">very outdated</a>.</p>

<p>Like most decisions in reality, there will be trade-offs and ROI concerns. Like most decisions, the right answer is probably somewhere in between two extremes. Like most of my commentary on this blog, I’m dispensing info with JavaScript in mind, but some takeaways are language-agnostic.</p>

<p>My decision-making process for how to spend my time on performance involves a few key points:</p>

<ul>
  <li>Always stay curious about current best practices.</li>
  <li>Don’t learn a “best practice” and expect it to remain “best” forever. If someone teaches you a performance optimization tactic, check the Internet to make sure it’s still relevant.</li>
  <li>Focus on higher-level performance optimizations (e.g., learning <a href="https://blog.codeschool.io/2015/09/11/how-to-keep-web-animations-from-slowing-you-down/">performant animation techniques</a>, shaming nested loops/traversals, plugging memory leaks, refactoring to recursion for <a href="http://www.2ality.com/2015/06/tail-call-optimization.html">Tail Call Optimization</a>) rather than lower-level concerns (e.g., <code>while</code> loop vs <code>for</code> loop, <code>i++</code> vs <code>++i</code>, etc).</li>
  <li>Learn how code is actually digested by your target platform (e.g., for browser-based apps, <a href="https://www.udacity.com/course/website-performance-optimization--ud884">learn the Critical Rendering Path</a>, learn the <a href="http://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/">JavaScript Event Loop</a> –and Web Workers as a bonus).</li>
  <li>Readability matters. If other devs can’t understand your code because of obscure micro-optimizations, then you’re probably hurting the team. Consider sacrificing the optimizations to prioritize collaboration.</li>
  <li>Keep dreaming for the day when platforms will optimize your code for you! Just kidding. It’s kinda sorta already happening (<a href="https://twitter.com/RebootJeff/status/603281637070123008">learn about JIT compilers</a>).</li>
</ul>

<p>I’ve noticed many of my “key points” really just boil down to “do your best, buddy!” Freaking brilliant.</p>

<h4 id="ps">P.S.</h4>

<p>Because JavaScript is single-threaded, the multi-core loveliness of modern CPUs doesn’t directly help your web app unless you use web workers.</p>

<p>That said, there will be some benefit regardless of web workers just because devices such as smartphones usually have to juggle more than just your web app (e.g., background apps, managing sensors, etc). The extra cores should help prevent the phone from stressing out from the juggling, so that tangentially helps your web app’s performance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Towards Functional Programming in JavaScript]]></title>
    <link href="http://RebootJeff.github.io/blog/2015/06/14/refactoring-towards-functional-programming-in-javascript/"/>
    <updated>2015-06-14T13:58:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2015/06/14/refactoring-towards-functional-programming-in-javascript</id>
    <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/0b4c12a5daec02b72e6e6879861ac70f75046e65/687474703a2f2f72616d64612e6a637068696c6c697070732e636f6d2f6c6f676f2f72616d646146696c6c65645f323030783233352e706e67" alt="Ramda.js logo" /></p>

<p>This is not a “What is FP?” guide that uses JavaScript. If that’s what you’re looking for, you’ll love <a href="https://github.com/DrBoolean/mostly-adequate-guide">Brian Lonsdorf’s free GitHub-based guide</a>. For this blog post, I will assume you already know currying and composition. I won’t assume you know functors, monads, and the other funky whatchamacallits that I’m still trying to learn for myself.</p>

<p>There are a lot of blogs and presentations that answer “What is Functional Programming?” and “Why bother with Functional Programming?”. There aren’t a lot of resources answering “How do I start using Functional Programming in REAL life?”. Most intro-to-FP resources leave you feeling like you’re supposed to just drop everything and start coding from scratch in Haskell or an FP-focused language that transpiles into JavaScript (e.g., <a href="http://elm-lang.org/">Elm</a> and <a href="https://github.com/clojure/clojurescript">ClosureScript</a>).</p>

<p>My team at work has recently been exploring FP in JavaScript by using a library called <a href="http://ramdajs.com/">Ramda</a>. It’s a functional programming JavaScript library. Ramda offers some common FP utilities to help you code in the FP style or just slowly convert parts of your codebase to the FP style.</p>

<p>Most of the team is unfamiliar with FP, so rather than diving into massive re-writes to convert large chunks of code from Object-Oriented Programming to FP, we’ve been starting small. Along the way, we’ve learned some solid steps for introducing FP into an existing codebase at a comfy pace. The gist of it is: don’t dive into the world of endofunctors, monoids, and catamorphisms. Instead, focus on treating functions differently by cutting down on anonymous functions, subdividing functions into tiny functions, and using the simplest FP concepts such as currying and composition.</p>

<h2 id="code-smells">Code smells</h2>

<p>These are some signs that code is very imperative and not very FP-like:</p>

<ul>
  <li><strong>Anonymous callbacks</strong> - It’s harder to re-use functions that don’t have names, it’s harder to write pointfree code with anonymous <em>callbacks</em> in particular, and function expressions will be more commonplace when you start using more FP (due to frequent use of <code>curry</code> and <code>composition</code>).</li>
  <li><strong>Suboptimal parameter order</strong> - Function signatures should have parameters arranged in an order that fits currying. This means putting config-like parameters first and main data parameters last (which is pretty much the exact opposite order that we’re all used to).</li>
  <li><strong>Loops</strong> - In JS, loops are usually for-loops that iterate over collections. There are specialized methods such as <code>map</code>, <code>reduce</code>, and <code>filter</code> that can perform the most common looping operations in a style that is more functional and declarative.</li>
  <li><strong>Localized mutation</strong> - This is a bit harder to explain, but local mutation (usually limited to the scope of a single function and a few nested anonymous callbacks) generally seems innocent enough until you realize it makes it more difficult to split up your functions into tiny functions, which is a major part of refactoring towards FP.</li>
  <li><strong>Side-effects from functions</strong> - One of the major principles in FP is that <a href="https://github.com/DrBoolean/mostly-adequate-guide/blob/master/ch3.md">functions should be pure</a>. When functions affect data outside their own local scope, it is usually due to IO actions or an OOP construct such as a method operating on the properties of its context object.</li>
</ul>

<h2 id="refactoring-steps">Refactoring steps</h2>

<h3 id="easy-difficulty">Easy Difficulty</h3>

<ul>
  <li><strong>Use named functions</strong> - This will make it easier to write pointfree code and to compose functions.</li>
  <li><strong>Use predicates</strong> - Functions that encapsulate conditional statements can be composed with other functions for the FP/declarative equivalent of imperative control flow.</li>
  <li><strong>Refactor loops via <code>each</code>, <code>map</code>, <code>filter</code>, <code>reduce</code>, etc</strong> - Using these FP iteration functions encourage you to also write small helper functions and predicates. They will guide you towards more FP.</li>
</ul>

<h3 id="medium-difficulty">Medium Difficulty</h3>

<ul>
  <li><strong>Focus on simple FP utilities</strong> - <code>R.curry</code>, <code>R.compose</code>, <code>R.composeP</code>, <code>R.prop</code>, <code>R.is</code>, <code>R.has</code>, <code>R.anyPass</code>/<code>R.allPass</code> are all worth checking out. Set a goal to use these as much as possible. It’s a great (and reasonable!) goal to get started with the FP style without getting too overwhelmed.
    <ul>
      <li>Using <code>curry</code> and <code>compose</code> get you to the heart of FP’s flexibility. Your code will look significantly different once you start currying and composing functions.</li>
      <li>Dot notation for accessing properties that will be used as input to a function (use <code>R.prop</code> or <code>R.has</code> as needed).</li>
    </ul>
  </li>
  <li><strong>Simplify all functions</strong> - Break down larger functions into smaller functions; break down helper functions into more and more generalized helper functions.
    <ul>
      <li>Minimize the number of arguments</li>
      <li>Write pure functions as often as possible</li>
    </ul>
  </li>
  <li><strong>Segregate mutation/state</strong> - If mutation/state is absolutely necessary, then try to separate the mutation into a traditional function and the rest into something that can be more FP-like. For example, if a function called <code>foo</code> changes some parent scope variables in addition to performing some calculation, then change <code>foo</code> so it calls two helper functions: the parent scope manipulation is done by one helper function while the calculation is done by another helper function.</li>
</ul>

<h2 id="getting-comfortable">Getting Comfortable</h2>

<p>What can you expect as you start writing FP code?</p>

<ul>
  <li>Function names should be very expressive and more verbose.
    <ul>
      <li>…which leads to code that looks more semantic.</li>
    </ul>
  </li>
  <li>Higher-level functions should be composed of smaller, lower-level functions.
    <ul>
      <li>Making functions from functions will look/feel like a tree of nested functions.</li>
      <li>Lower-level functions should be only a handful of lines (and 1-line functions become common-place). Higher-level functions might also be really short because they just rely on calling multiple functions without much additional logic.</li>
    </ul>
  </li>
  <li>Remember: Function compositions are normally read from right to left.</li>
  <li>Debugging may be tricky at first, but you should be able to easily test lower-level functions, which means higher-level functions should be less fragile.
    <ul>
      <li>For debugging with <code>console.log</code>, you may have to add it to compositions. E.g., <code>var processData = R.compose(calculateStuff, logFilteredData, filterData);</code> You can find a more detailed example of this logging tactic later in this blog post.</li>
    </ul>
  </li>
  <li>Naming functions becomes even more important; names no longer always start with verbs because they are often treated as data (nouns) rather than actions/procedures (verbs).
    <ul>
      <li>However, due to FP’s relative obscurity, naming conventions are not as widespread, which could lead to codebases with poorly named functions (significantly more helper functions means more opportunities to get function names messed up). Make sure your team is on the same page for nomenclature.</li>
    </ul>
  </li>
</ul>

<h2 id="examples">Examples</h2>

<p>Keep in mind that I’m using <a href="http://ramdajs.com/">Ramda.js</a> for these examples.</p>

<h3 id="ex-filtering-an-array">Ex: Filtering an array</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Example - Filtering for odd numbers and multiples of 6 </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">var</span> originalArray = [<span class="integer">1</span>, <span class="integer">2</span>, <span class="integer">3</span>, <span class="integer">4</span>];&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;</span><span class="delimiter">/</span></span>/ Bad - using a <span class="keyword">for</span>-loop to mutate a <span class="keyword">new</span> array
<span class="keyword">var</span> filteredArray = [];
<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="integer">0</span>; i &amp;lt; originalArray.length; i++) {
  <span class="keyword">var</span> number = originalArray[i];
  <span class="keyword">if</span>(number % <span class="integer">2</span> || number % <span class="integer">6</span> === <span class="integer">0</span>) {
    filteredArray.push(number);
  }
}&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;</span><span class="delimiter">/</span></span>/ Better - using the <span class="reserved">native</span> Array filter method <span class="keyword">with</span> a typical anonymous <span class="keyword">function</span>
<span class="keyword">var</span> filteredArray = originalArray.filter(<span class="keyword">function</span>(number) {
  <span class="keyword">return</span> number % <span class="integer">2</span> || number % <span class="integer">6</span> === <span class="integer">0</span>;
});&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;</span><span class="delimiter">/</span></span>/ Most Functional - using predicates <span class="keyword">with</span> a filter method
<span class="keyword">var</span> <span class="function">isOdd</span> = <span class="keyword">function</span>(number) {
  <span class="keyword">return</span> number % <span class="integer">2</span>;
};
<span class="keyword">var</span> <span class="function">isDivisibleBySix</span> = <span class="keyword">function</span>(number) {
  <span class="keyword">return</span> number % <span class="integer">6</span> === <span class="integer">0</span>;
};
<span class="keyword">var</span> isValid = R.allPass([isOdd, isDivisibleBySix]);
<span class="keyword">var</span> filteredArray = R.filter(isValid, originalArray);
</pre></div>
</div>
 </figure></notextile></div></p>

<p>The “most functional” technique may seem unappealling because it requires so many lines of code, but it’s vital to remember that predicates serve as re-usable, easily testable utilities. Also, <code>R.allPass([isOdd, isDivisibleBySix])</code> is more expressive than <code>number % 2 || number % 6 === 0</code>. In the latter case, readers must remember how <code>%</code> works and how the result is a number that gets coerced into a boolean value for truthiness/falsiness.</p>

<h3 id="ex-debugging-via-consolelog">Ex: Debugging via console.log</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Example - Adding a logger for debugging </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Let’s try to debug the following function</span>
<span class="keyword">var</span> processData = R.compose(calculateStuff, sortByDate, filterByStatus);&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;</span><span class="delimiter">/</span></span>/ First, we need an FP-friendly logger that works <span class="keyword">with</span> composition
<span class="keyword">function</span> <span class="function">log</span>(note, input) {
  console.log(note + <span class="error">‘</span> <span class="error">—</span> <span class="error">‘</span> + input);
  <span class="keyword">return</span> input; <span class="comment">// this return is vital</span>
}&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;</span><span class="delimiter">/</span></span>/ Second, we insert the logger into the composition to check <span class="keyword">if</span> filtering worked
<span class="keyword">var</span> processData = R.compose(calculateStuff, sortByDate, log(<span class="error">‘</span>filtered data<span class="error">’</span>), filterByStatus);&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;</span><span class="delimiter">/</span></span>/ Then we run processData <span class="keyword">with</span> some data, check the log output, and adjust
<span class="comment">// the placement of the log within the composition until we find where</span>
<span class="comment">// things go wrong.</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Once again, it may seem a tad painful. You’re being forced to create a special logger function. But much like in the previous example, keep in mind that you’re being forced to create specialized functions that will probably be useful enough to be part of your project’s internal library of utilities and helpers.</p>

<h3 id="ex-promises">Ex: Promises</h3>
<p>Let’s pretend we need to grab data about an animal.
First, we query our database of animals.
Second, we use our query results to get more info from a 3rd-party animal API.
Third, we use some part of that info to search for relevant photos from the Flickr API.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Example - Writing promise chains </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Bad - using typical anonymous function boilerplate</span>
<span class="keyword">function</span> <span class="function">getAnimalData</span>() {
  <span class="keyword">return</span> getAnimalInfoFromDatabase().then(<span class="keyword">function</span>(response1) {
    <span class="keyword">return</span> getRelevantInfoFrom3rdPartyAPI(response1);
  }).then(<span class="keyword">function</span>(response2) {
    <span class="keyword">return</span> getRelevantPhotoFromFlickrAPI(response2);
  }).then(<span class="keyword">function</span>(response3) {
    <span class="keyword">return</span> response3;
    <span class="comment">// Note: This last part of the promise chain is actually unnecessary, but</span>
    <span class="comment">// newbies tend to include it.</span>
  });
}&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;</span><span class="delimiter">/</span></span>/ Better - using pointfree style
<span class="keyword">function</span> <span class="function">getAnimalData</span>() {
  <span class="keyword">return</span> getAnimalInfoFromDatabase()
    .then(getRelevantInfoFrom3rdPartyAPI)
    .then(getRelevantPhotoFromFlickrAPI);
}&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;</span><span class="delimiter">/</span></span>/ Most Radtastic - using Ramda<span class="error">’</span>s promise composer
<span class="keyword">var</span> getAnimalData = R.composeP(
  getRelevantPhotoFromFlickrAPI,
  getRelevantInfoFrom3rdPartyAPI,
  getAnimalInfoFromDatabase
);
<span class="comment">// Notice how the order of composition goes from right to left.</span>
</pre></div>
</div>
 </figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Talk While Coding and Whiteboarding in 7 Steps]]></title>
    <link href="http://RebootJeff.github.io/blog/2015/04/19/how-to-talk-while-coding-and-whiteboarding/"/>
    <updated>2015-04-19T21:13:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2015/04/19/how-to-talk-while-coding-and-whiteboarding</id>
    <content type="html"><![CDATA[<p><img src="/images/20150419/startupstock_whiteboarding.jpg" alt="Photo of whiteboarding" /></p>

<p>In <a href="/blog/2014/09/02/communication-for-engineers-101-we-have-a-problem/">my first article on Communication For Engineers</a>, I ranted about my disappointment surrounding engineering and communication skills. I ended that blog post with a list of communication-related topics that I promised to write about. Instead of addressing any of those topics (sorry!), this post will talk about how software engineers can improve their communication while coding collaboratively or while solving coding challenges for a job interview.</p>

<p><strong>Warning:</strong> JavaScript is my specialty, so some of the advice below is JS-centric, and all code examples are written in JS.</p>

<h4 id="i-cooked-up-7-steps-for-how-to-discuss-code-smoothly">I cooked up 7 steps for how to discuss code smoothly:</h4>

<ol>
  <li>Draw the situation</li>
  <li>Ask clarifying questions</li>
  <li>Explain approach</li>
  <li>Breadth-first coding</li>
  <li>Refactor</li>
  <li>Walkthrough</li>
  <li>Testing</li>
</ol>

<p>Notice that these steps don’t magically provide a complete guide to actually solving problems. For example, they don’t tell you which data structures to use. Instead, these steps show you how to communicate better as you solve a challenge. They help you talk with your interviewer or colleague about the problem space, your initial impressions, your ability to break down the problem into sub-problems, and your quality assurance process.</p>

<h1 id="the-7-steps-explained">The 7 Steps Explained</h1>

<h2 id="drawing-the-problem">1. Drawing the Problem</h2>
<p>Admittedly, this step could be optional. Drawing is best for folks who work well with visuals. But even if you’re not an artist, you should still consider drawing a diagram or picture of the problem because visuals tend to be effective tools for communicating complex subjects and situations. For example, data structures are usually easier to talk about after you draw them out.</p>

<p>Furthermore, you might reveal certain questions through the act of drawing. At the very least, <strong>drawing stuff out can help an interviewer follow you</strong>. Going back to the data structures example: imagine you’re supposed to work with a binary tree. It’s easier to talk about it if you draw a tree and point to nodes rather than just saying, “First we will process the root node, then we will go to the left child and do blah blah blah. At that point, depending on the value, we might go down to the child’s child or we might…”</p>

<p>By the way, <strong>you don’t have to stick to drawing pictures</strong>. This step could be about writing down example data, example inputs, example outputs, example use cases; and then mapping them together by drawing arrows, circles, etc. Examples are great for communication, and they are also good for problem-solving in general. Try to think of examples that are really simple (to get a basic grasp of the problem), examples that are more realistic, and examples that are crazy (to reveal edge cases and potential validation concerns).</p>

<h2 id="asking-clarifying-questions">2. Asking Clarifying Questions</h2>
<p>Do not follow any of your assumptions without asking a question first. It’s tempting to hear a challenge or puzzle and immediately get into solving it. But there are real-world concerns for real-world problems, and you should demonstrate your familiarity with such issues.</p>

<p>Also, you can save time by asking clarifying questions during an interview because interview challenges tend to be contrived. Do you have to account for crazy input values? Does the output need to be formatted in a certain way? If the puzzle involves numbers, do you have to account for negative values, decimals, etc? Are you expected to do input validation, error handling, or memory optimization?</p>

<h2 id="explaining-your-approach">3. Explaining Your Approach</h2>

<p>At this point, you might have a solution in mind and you’re eager to get coding. Or you might just have a partial solution. Either way, take a moment to give a quick overview of the <strong>purpose</strong> of the code you’re about to write. Also, give a sense of what <strong>algorithms or concepts</strong> will be implemented as part of your approach to the problem at hand.</p>

<p>For example, “This looks like a problem we can solve with a recursive solution that traverses all nodes of the dataset.” In this example, “recursion” is the concept and traversal is the purpose.</p>

<h2 id="breadth-first-coding">4. Breadth-First Coding</h2>

<p>When it comes time to actually write out some code (or pseudocode), write out as much as possible at a high-level before going into the low-level details. For example, if your solution requires looping over objects received from an AJAX request in order to parse some data, don’t dive into that AJAX request. That’s a low-level detail. Start from the high-level approach of “fetching data” and then immediately move to the next high-level step of “parsing data”. With this strategy, you cover the whole breadth of the solution before diving into any detail of the solution.</p>

<p>In other words, write modular code by using a breadth-first mindset. Everyone knows it’s a good idea to write several small functions rather than one giant function, so apply that approach to your communication too. When you explain how a computer works, you start the explanation at a high level (e.g., “hard drives store data, CPUs crunch data, …”) rather than starting at a low level (e.g., “the flow of electrons is controlled by gates known as transistors”).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Example - Breadth-First Coding </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Challenge (aka Prompt) - Write a function that determines the average number of</span>
<span class="comment">// retweets for a given user after a given cut off date.&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>// Phase 0 - Psuedocode (optional)
function getRetweetAverage(username, cutOffDate) {
  /**
   * 1. Fetch tweets via Twiter API
   * 2. Filter tweets based on date
   * 3. Calculate avg count of retweets from filtered data
   * 4. Return a promise that resolves to the answer
  **/
}<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>// Phase 1 - Coding with declarative helper functions
function getRetweetAverage(username, cutOffDate) {
  return fetchTweets(username).then(function(tweets) {
    var recentTweets = filterTweetsByDate(tweets, cutOffDate);
    return calculateAverageRetweets(recentTweets);
  });
}<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>// Phase 2 - Implement low-level helper functions
function fetchTweets(username) {
  // Let’s pretend we’re using AngularJS’s HTTP request service, which uses promises.
  var params = {
    screen_name: username,
    count: 200 // FYI this is the max allowed by Twitter’s API
  };
  return $http.get(‘https://api.twitter.com/1.1/statuses/user_timeline.json’, params);
}<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>function filterTweetsByDate(tweets, cutOffDate) {
  return tweets.filter(function(tweet) {
    // Convert tweet’s String date into a JS Date object before comparing.
    var createdAt = new Date(tweet.created_at);
    return createdAt <span class="entity">&amp;gt;</span> cutOffDate;
  });
}<span class="tag">&lt;/p&gt;</span>

&lt;p&gt;<span class="keyword">function</span> <span class="function">calculateAverageRetweets</span>(tweets) {
  <span class="keyword">var</span> totalRetweets = tweets.reduce(<span class="keyword">function</span>(sum, tweet) {
    <span class="keyword">return</span> sum + tweet.retweet_count;
  }, <span class="integer">0</span>);
  <span class="keyword">return</span> totalRetweets / tweets.length;
}
</pre></div>
</div>
 </figure></notextile></div></p>

<p>In the example above, you should write code one “phase” at a time. Starting with psuedocode is optional, but it might be a good idea to at least verbalize it if you don’t plan on writing it. Then write the code in a declarative style as seen in “Phase 1”. Lastly, flesh out the functionality of your solution by writing the code that actually makes things work.</p>

<p>By the way, I’ve never actually used the Twitter API, so the example code might not follow best practices or might not take into account how it actually behaves. For instance, maybe the API accepts a parameter to do the date filtering for you.</p>

<h2 id="refactoring-your-first-draft">5. Refactoring Your First Draft</h2>

<p>Once you’ve reached the point where the code seems to solve the challenge at hand, it’s time to refactor. If you’re writing under pressure in an interview situation, it’s likely that you haven’t written the cleanest code. If you’re writing without any pressure, it’s still good to refactor your first draft into a more readable/maintainable variant. Here’s a list of tips for deciding what to refactor:</p>

<ul>
  <li><strong>Improve readability</strong> by fixing indentation, whitespace, names, etc.
    <ul>
      <li><strong>Rename variables</strong> into semantic names. It’s tempting to use very short variable names during interviews because you feel pressure to finish quickly. Consider renaming them into more recognizable names to show your audience that you know how to write maintainable code that potential co-workers could easily read.</li>
      <li><strong>Replace loops</strong> with a <code>map</code>, <code>filter</code>, <code>reduce</code>, etc where possible.</li>
      <li><strong>Consider naming anonymous functions</strong> if they have potential to be re-used as a helper.</li>
    </ul>
  </li>
  <li><strong>Extract code</strong> into helper functions. It’s very common for interview candidates to inadvertently write long functions. Even if you tried to follow Breadth-First Coding in Step 4, you may have slipped.</li>
  <li><strong>Double-check promises</strong> and look for opportunities to reduce boilerplate and anonymous functions.
    <ul>
      <li><strong>Check return statements</strong> to ensure that your promises will resolve to the correct values (and that the segments of your promise chain will pass correct values).</li>
      <li><strong>Use promise library helpers</strong> such as <code>all</code>, <code>spread</code>, etc where possible.</li>
    </ul>
  </li>
  <li><strong>Add error-handling</strong>/logging for professional bonus points.</li>
  <li><strong>Rewrite in another style</strong> (e.g., Functional Programming vs Object-Oriented Programming) for massive bonus points.</li>
</ul>

<p>Admittedly, this Step 5 isn’t as directly related to communication as other steps. It’s mostly focused on improving your code. However, there is still a communiation-related opportunity here. As you are refactoring, verbalize your intentions. Discuss what you want to improve before you improve it. Explain the rationale behind the improvements. Mentions the pros and cons of your code without the improvements and with the improvements (i.e., before vs after).</p>

<h2 id="walking-through-your-answer">6. Walking Through Your Answer</h2>

<p>At this point, your code should be presentable. By following the previous steps, your audience should already have a solid, high-level understanding of your code. So now it’s time to give a detailed walkthrough.</p>

<p>Explain any nuances, use precise terminology, and expound on any interesting control flow or references (e.g., closures in JavaScript). You can also mention any implications regarding speed, memory, I/O, security, etc. But overall, your goal is to describe your code <em>in detail</em>.</p>

<h2 id="testing-your-answer">7. Testing Your Answer</h2>

<p>You might actually want to perform this step before step 6, but it depends on how you roll. After you’ve gotten to the point where you have a solution that seems to be good, take a minute to describe how you’d make sure it’s robust. When you normally write code on your own, you of course test it out by running it with various inputs or circumstances. Describe them; verbalize them.</p>

<p>For example, if you’re writing a function with some parameters, you’ll probably run the function with a bunch of different arguments with different values and maybe different datatypes.</p>

<ul>
  <li><strong>Numbers:</strong> negative values, 0, 1, odd vs even, really big numbers, decimals</li>
  <li><strong>Strings:</strong> upper vs lower case, single character, numeric characters, punctuation and non-alphanumeric characters.</li>
  <li><strong>Object Literals:</strong> check for weird keys (much like <em>Strings</em>)</li>
  <li><strong>Collections &amp; Data Structures:</strong> empty collections, only 1 item, several items, check for mutation side-effects, ascending order, descending order, random order, nested objects/arrays/other data structures.</li>
</ul>

<h1 id="where-did-these-steps-come-from">Where Did These Steps Come From?</h1>

<p>I came up with these 7 steps based on…</p>

<ul>
  <li><a href="/blog/2014/05/31/dev-job-search-tips-from-the-coding-interview-guru/">advice from Gayle Laakmann McDowell</a></li>
  <li><a href="/blog/2014/05/11/hackr-diary-weeks-11-12-and-beyond/">advice from Hack Reactor instructors</a></li>
  <li>my experience interviewing for jobs</li>
  <li>my experience conducting a handful of mock interviews for Hack Reactor grads</li>
  <li>my experience conducting interviews where I work (10+ so far)</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Myth of the AngularJS Armageddon]]></title>
    <link href="http://RebootJeff.github.io/blog/2015/01/05/maybe-the-angularjs-armageddon-isnt-real/"/>
    <updated>2015-01-05T19:26:00-08:00</updated>
    <id>http://RebootJeff.github.io/blog/2015/01/05/maybe-the-angularjs-armageddon-isnt-real</id>
    <content type="html"><![CDATA[<p><img src="/images/20150105/AngularRIP.png" alt="RIP? AngularJS" /></p>

<p>A few months ago, the JavaScript community had a rather negative <a href="https://www.quora.com/Why-are-many-developers-upset-about-the-changes-in-Angular-2-0">reaction to an announcement about Angular v2.0</a>. <em>Quick aside: my boss lost faith in Google and jumped on the ReactJS bandwagon.</em> On a <a href="http://devchat.tv/adventures-in-angular/016-aia-ng-1-3-and-2-0-with-brad-green-igor-minar-and-mi-ko-hevery">recent episode</a> of the Adventures in Angular podcast, the Angular core dev team tried to clear the air regarding the general approach for Angular 2.0 and the differences between Angular 1.3 and 2.0. The podcast is surprisingly well-done. There are 9 people included (1 of them is THE <a href="http://www.johnpapa.net/angularjs-patterns-clean-code-released/">John Papa</a>; 4 of them are Angular team members) and yet they never accidentally interrupt one another or talk over one another.</p>

<p>I’ve listed some interesting bits I gleaned:</p>

<h3 id="some-misunderstandings">Some Misunderstandings</h3>

<ul>
  <li>It sounds like there might actually be a migration path for 1.3 to 2.0. There is no path yet because 2.0 isn’t close enough to completion to judge. The idea of <strong>“no migration path” was a misunderstanding</strong>.</li>
  <li>It is not necessary to use AtScript for Angular 2.0 (and it is not necessary to use Angular 2.0 for AtScript).</li>
</ul>

<h3 id="some-rationale">Some Rationale</h3>

<ul>
  <li>They’re trying to re-make their routing module in a way that will be easier to use.</li>
  <li>Some things are disappearing for logical reasons:
    <ul>
      <li><code>$scope</code> is disappearing because they realized “controller as” syntax is best, so they want to revamp that system completely to avoid common <code>$scope</code> confusion.</li>
      <li>Code for directives will be totally different because <a href="https://d2eip9sf3oo6c2.cloudfront.net/pdf/egghead-io-directive-definition-object-cheat-sheet.pdf">Directive Definition Objects</a> as they currently stand are ugly and kind of convoluted (e.g., most directives don’t need a linking function, they just need a controller function –kind of like how most views/templates should use <code>controllerAs</code> instead of <code>$scope</code>).</li>
      <li>Angular’s module system will disappear because ECMAScript6 will have a native module system. By embracing the new ES6 system, it will make Angular 2.0 more compatible with future non-Angular modules (much like how all back-end JS embraces Node’s system).</li>
    </ul>
  </li>
  <li>There are a few <strong>key motivations behind Angular 2.0’s design:</strong>
    <ul>
      <li>Mobile friendliness.</li>
      <li>Fixing mistakes they’ve made when creating Angular 1.x (e.g., getting rid of $scope).</li>
      <li>Simplicity and performance.</li>
      <li>Embracing future tech like ES6 and web components.</li>
    </ul>
  </li>
</ul>

<h3 id="some-points-of-emphasis">Some Points of Emphasis</h3>

<ul>
  <li>The new syntax looks crazy, but the Angular team claims that it will be much harder to convert a non-Angular 1.3 app to 2.0 than to convert Angular 1.3 to 2.0 –which sounds like a no-brainer, but as you can imagine, they’re really trying to emphasize that you should not abandon 1.3 just because 2.0 looks so different now.</li>
  <li>They emphasized how Angular 2.0 is still in a state of flux, so it’s too early to make business decisions based on it.</li>
  <li>The Angular team claims they are making changes for practical reasons, not purely academic reasons. In other words, they have examined how current Angular apps are made, deployed, etc. They don’t just think about what would be cool, they do think about what would be truly helpful/useful.</li>
</ul>

<h3 id="my-takeaways">My Takeaways</h3>

<p>I know I sound like I’m defending the Angular team. To a certain extent, that’s true (I need to try some React.js one day to hopefully reduce my bias for Angular), but it really comes down to:</p>

<ul>
  <li>They’re converting to ES6, which means it will probably be necessary to use a transpiler to convert core Angular 2.0 code to ES5 for older browsers.
    <ul>
      <li>Ideally, this won’t be a huge problem for evergreen (self-updating) browsers. Maybe they will support key ES6 features by the time Angular 2.0 becomes “mainstream” (in the same sense that Angular 1.3 is currently “mainstream”). Or maybe I’m dreaming :p.</li>
    </ul>
  </li>
  <li>There were some huge misunderstandings when Angular 2.0 was announced (re: lack of migration path, role of AtScript, etc).</li>
  <li>It’s too early to really tell what Angular 2.0 will look like when it’s released.</li>
  <li>When Angular 2.0 does arrive, it may look syntactically different, but it will do many of the same, <em>Angulary</em> things (i.e., the Angular “flavor” of MVC, augmenting HTML markup, enabling powerful custom components, etc).</li>
</ul>

<h3 id="newsflash-angular-1x-is-not-dead">Newsflash! Angular 1.x is NOT Dead!</h3>

<p><strong>Angular 1.4 is <a href="http://angularjs.blogspot.com/2014/12/planning-angular-14.html">coming in Spring 2015</a>.</strong></p>

<p>News of 1.4 landed <em>after</em> the podcast aired. It will bring the new router I mentioned earlier, a “first class” I18N system, slick-looking documentation (using <a href="https://material.angularjs.org/">Angular-Material</a>), and other goodies –including some breaking changes. :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Start AND Continue Learning JavaScript and Web Development]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/11/23/how-to-learn-javascript-and-web-development/"/>
    <updated>2014-11-23T21:37:00-08:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/11/23/how-to-learn-javascript-and-web-development</id>
    <content type="html"><![CDATA[<p><img src="/images/20141123/IMG_20141116_135049sp.jpg" alt="Teaching my JS Fundamentals workshop" /></p>

<p class="my-caption">Me teaching a JavaScript workshop for beginners</p>

<p class="last-updated">Last update on Nov 30, 2014 to add a great link to the "Compilations" section.</p>

<ol>
  <li>A couple of weeks ago, a friend asked me for advice on giving advice to beginners.</li>
  <li>One week ago, I taught a <a href="http://www.meetup.com/hackreactor/events/217841372/">class on JavaScript</a> for beginners (or <em>advanced</em> beginners –as I like to say).</li>
  <li>A few days ago, I recently found a <a href="https://www.quora.com/Should-I-purchase-a-Code-School-subscription-to-prepare-for-the-Hack-Reactor-interview">Quora question about getting better at JS</a>.</li>
</ol>

<p>These three moments have had my brain wondering about how to point coding newbies in the right direction. After some Googling and recalling my own past, I’ve gathered some links that will hopefully help beginners and maybe even intermediate folks. However, I should warn you that I haven’t tried out all the various services for myself.</p>

<h2 id="the-basics">The Basics</h2>

<p><a href="http://imgur.com/gallery/BL6Vs">This Imgur post</a> lists 6 sites that provide tutorials for getting started in coding. I’ve personally used Code School and Codecademy. They’re great, but after awhile, you’ll want to explore other options. They are not sufficient by themselves.</p>

<h2 id="compilations">Compilations</h2>

<p>These sites gather tutorials and various resources into one place. Most of these also give some guidance or roadmap to help beginners prioritize what to learn:</p>

<ul>
  <li><a href="http://programming-motherfucker.com/become.html">Programming, Motherf…</a>: Categorized links for various languages.</li>
  <li><a href="https://www.bento.io/">Bento</a>: Links organized into manageable sections.</li>
  <li><a href="http://www.whatsnext.info/#/javascript">What’s Next</a>: Links grouped by topic and difficulty.</li>
  <li><a href="http://www.theodinproject.com/courses">The Odin Project</a>: Open-source web dev curriculum.</li>
  <li><a href="http://www.jstherightway.org/">JavaScript The Right Way</a>: Links covering the entire JS ecosystem (basics, patterns, testing, frameworks, news/podcasts/feeds).</li>
</ul>

<h2 id="the-fundamentals-of-js">The Fundamentals of JS</h2>

<p>If you’re specifically trying to learn the quirks of JavaScript, then <a href="http://www.meetup.com/hackreactor/events/217841372/">classes like the one I teach</a> are perfect for you. If you’re not near San Francisco, you can try <a href="https://frontendmasters.com/workshops/js-fundamentals-to-functional/">online classes</a> taught by the one who helped me become a teacher (<a href="https://twitter.com/biancagando">@BiancaGando</a>).</p>

<p>But these aren’t free. Ya know what is free? This great gathering of words describing vital JS concepts: <a href="http://javascriptissexy.com/16-javascript-concepts-you-must-know-well/">16 JavaScript Concepts JavaScript Professionals Must Know Well</a></p>

<h2 id="the-community">The Community</h2>

<p>San Francisco is my neck of the woods. If you’re lucky enough to be around here, then you should take advantage of the stellar community. There are lots of free meetups/events that can help you learn. If you’re not in the area, check Meetup.com for groups that provide similar events.</p>

<ul>
  <li><a href="http://www.meetup.com/tinderbox/events/212435202/">Tinderbox</a>: They often host “hack nights”, which might sound intimidating, but they’re very open-ended so you could show up and just ask for help learning a particular subject.</li>
  <li><a href="http://www.meetup.com/SFRails/events/199733902/">SF Rails</a>: Much like Tinderbox, the SF Rails group hosts open-ended “protonight” events. The group might focus on Ruby on Rails, but you’re likely to find people who can help with any beginner or intermediate level coding topic.</li>
</ul>

<p>If you’re female, you might want to search for organizations that provide free support for women. Some examples:</p>

<ul>
  <li><a href="https://www.womenwhocode.com/">Women Who Code</a></li>
  <li><a href="http://www.girldevelopit.com/">Girl Develop It</a></li>
  <li><a href="http://railsbridge.org/">Railsbridge</a></li>
  <li><a href="https://twitter.com/tevgende">Aysegul Office Hours</a></li>
</ul>

<p>Back in the day, I used <a href="http://curriculum.railsbridge.org/frontend/frontend">a free, online curriculum</a> created by Railsbridge to learn some web dev skills.</p>

<p>A Hack Reactor alum recently launched a free service called Hackvard. It helps people quickly find nearby programmers who want to meet up. After a few weeks (or days?), it was renamed to <a href="http://www.codaround.com/">Codaround</a>. One of the co-founders contacted me and mentioned that Codaround might be changed to focus on helping match mentors/teachers with students/beginners. I don’t know any details, but it’s worth keeping an eye on this.</p>

<h2 id="games">Games</h2>

<p>Want to play while you program? Here are some sites that turn learning to code into a game:</p>

<ul>
  <li><a href="http://www.checkio.org/">CheckIO</a>: When I <a href="http://localhost:4000/blog/2013/09/02/mini-review-of-checkio/">tried them out</a>, I wasn’t impressed by their attempt to cover coding challenges in a layer of gamification. A CheckIO employee reached out to me and told me things have changed a lot. I haven’t verified his claims, but their user base was pretty large last time I checked, and their blog is very active, so they’re alive and kicking.</li>
  <li><a href="http://codecombat.com/">Code Combat</a>: I played with this a couple months ago. It was fun, but a tad buggy. I like the idea of writing code to control your character.</li>
  <li><a href="http://www.screeps.com/">Screeps</a>: This looks quite promising. You write code to control small armies.</li>
</ul>

<h2 id="what-else">What else?</h2>

<p>Let me know in the comments (or via Twitter) if you know of any other solid resources that help people learn JavaScript and other programming skills.</p>
]]></content>
  </entry>
  
</feed>
