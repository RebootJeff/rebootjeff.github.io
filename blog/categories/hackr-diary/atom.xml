<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: HackR Diary | RebootJeff.com]]></title>
  <link href="http://RebootJeff.github.io/blog/categories/hackr-diary/atom.xml" rel="self"/>
  <link href="http://RebootJeff.github.io/"/>
  <updated>2013-10-28T22:00:25-07:00</updated>
  <id>http://RebootJeff.github.io/</id>
  <author>
    <name><![CDATA[Jeff Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[HackR Diary] Week 5: Final Sprints]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/10/28/hackr-diary-week-5/"/>
    <updated>2013-10-28T22:42:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/10/28/hackr-diary-week-5</id>
    <content type="html"><![CDATA[<p><img src="/images/20131028/caltrain.jpg" alt="caltrain" /></p>

<p class="my-caption">Good morning</p>

<p>No more sprints! I’m both sad and relieved. The sprints have provided enough structure to ensure a guided education thus far. They’ve equipped me with enough skill to yield the self-belief that I can actually build a complete web app …which is good because that’s exactly what I’m going to do starting this week. Looking back on week 5 makes me think I might miss the relative safety of paired programming, but I’m pumped to be diving into my own project.</p>

<p>By the way, this blog post is really long. I think I’m going to split up future blog posts, and I’m going to post more frequently.</p>

<h1 id="recap-of-events">Recap of Events</h1>

<h3 id="alumni-panel">Alumni Panel</h3>

<p>Early in the week, there was a truly invaluable guest speaker event. Six Hack Reactor alumni held a Q&amp;A session with current students. One alumnus is a Hacker-in-Residence at Hack Reactor. His role is a paid, part-time, short-term job supporting the school. There are a handful of Hacker-in-Residences at HackR at any given time. After their stints, they are put through the same job finding process that students who didn’t want to become a Resident normally go through.</p>

<p>The other five alumni were from Adap.tv, Adobe, DocuSign, Edmodo, and Versal, respectively. They had a variety of roles including smartphone app development, front-end MVC engineering, internal QA, data visualization, and full-stack development. I have to admit that I was a bit judgemental about the QA role at first, but it actually sounded legit by the end of the Q&amp;A session. For what it’s worth, the Adap.tv guy was hired even though he doesn’t have a college degree! In my opinion, that’s awesome, and it really says a lot about the meritocracy found in the tech job market (…or the non-traditional, new-school nature of the Bay Area).</p>

<p>There was a ton of insight gleaned from the alumni panel. Examples of advice include:</p>

<ul>
  <li>Ask employers about their onboarding process (smaller companies might not have one, and that can be a turn-off for some newbies).</li>
  <li>Invest in social capital. Wow, that was a really buzzwordy sentence so let me translate: get to know your co-workers. “Ask them out” to coffee breaks, happy hours, lunches, etc. This may sound like basic networking at first, but I think the point is that in software development, you’re going to be asking others for help quite a lot, so it’s good to build a rapport ASAP to make asking for assistance as natural as possible. This is something I never really considered before, but after all the paired programming I’ve done at Hack Reactor, it makes a ton of sense to establish rapports that foster collaborative vibes.</li>
  <li>Ask employers to set up a meeting between you and your potential boss. It’s ok –this is totally ok. I used to work in an industry where this would never really be possible, so I had to ask if this is ok after one alumnus mentioned how one of his prioties when job hunting was to find a cool boss. I want a cool boss too!</li>
  <li>NEVER make the first move for salary negotiations. Let them make an offer before you start specifying any numbers.</li>
  <li>Specific to HackR: Don’t be too eager to accept your first job offer. You will get more. Shop around. It’s tempting to accept your first or second job offer just because employment is such a major goal when deciding to join Hack Reactor in the first place. However, joining Hack Reactor isn’t something you do just to get a job –it’s something you do to get an <em>ideal</em> job.</li>
</ul>

<p>Sorry, but I forgot to take thorough notes during the alumni panel, so the list above is rather short.</p>

<h3 id="more-guest-speakers">More Guest Speakers</h3>

<p>Now might be a good time to point out that Hack Reactor has guest speakers at least one evening per week. Attendance is optional. Oftentimes students choose to work on their assignments/projects at the workstations rather than stay in the lecture area to listen to the guest speaker.</p>

<p>What’s my point? This week was the first time I didn’t really have enough time to fully invest in the guest speakers. Rudely, I’ve forgotten that names of the speakers, but one guy spoke about databases (i.e., engineering decisions you might face when designing/creating/maintaining/scaling a database) and another guy (from Khan Academy) spoke about <a href="http://facebook.github.io/react/">React</a>, the JavaScript library written and open-sourced by Facebook. Relevant link: <a href="http://www.youtube.com/watch?v=GW0rj4sNH2w">React presented at JSConf</a></p>

<h3 id="picking-personal-projects">Picking Personal Projects</h3>

<p>To be honest, I wasn’t thrilled with the way HackR arranged the transition from sprints to personal projects. Students were under the impression that we’d get more support/attention for coming up with project ideas, but we weren’t given much time to brainstorm. Instead of dedicating a lecture to a guided brainstorming session, students had to come up with ideas in their spare time (which is tough when busy worrying about Ruby and Angular for the sprints).</p>

<h3 id="social-night-haunted-house">Social Night: Haunted House</h3>

<p>Once again, I did not attend social night. On one hand, I feel bad that my cohort has generally had low participation in the weekly social nights. On the other hand, the consensus seems to be that the social nights just don’t feel all that appealing. The first one was awesome; the others were “meh.”</p>

<p>Instead of going to the Social Night event last Saturday, I went to a nice happy hour/dinner with a few other students. Afterwards, I went back to HackR to continue tackling client-side user authentication with my Angular sprint partner. We failed, but we got a lot of other stuff done during the day, so I felt ok about the sprint as a whole. Plus, my partner and I established a fun rapport so even failing to get “auth” working was a funny time.</p>

<h1 id="what-i-learned">What I Learned</h1>

<p>Week 5 included assignments for building a URL shortening web app to further improve students’ full-stack skills.</p>

<h3 id="ruby-sinatra-activerecord-sqlite">Ruby, Sinatra, ActiveRecord, SQLite</h3>

<p>Server-side code used a lot of Ruby and Sinatra. HackR chose not to teach us students Ruby on Rails (RoR) because Sinatra is simpler than Rails. It’s easy to be bummed about this, but in hindsight, I’m not worried about it. Yes, Rails is a big deal right now in Silicon Valley, but I’m under the impression that RoR was embraced because of it’s great for rapid prototyping. Times are changing though. There are now more options for rapid prototyping. More importantly, I’m at the point in my HackR-guided education where I have built up enough fundamental know-how to make me confident that I can learn RoR later.</p>

<p>For now, it’s more important to learn concepts about MVC/MV* development, user authentication, databases, etc. Speaking of databases, there isn’t much for me to say about SQLite because students were harnessing ActiveRecord magic to manipulate a simple SQLite database with only two tables. We had to use <a href="https://github.com/cldwalker/tux">tux</a> to do database probing, which is slightly less convenient than using MySQL’s terminal interface (as we did in the previous week).</p>

<h3 id="angular">Angular</h3>

<p>The students were pretty hyped up to learn Angular as our final sprint. We’ve invested a lot of time into learning Backbone, but word on the street (a really nerdy street) is that Angular is the “new hotness” that will take over the world of front-end JavaScript for single-page web apps.</p>

<p>Overall, I think the students’ reception of Angular was torn. Some love the power (Angular’s data-binding is pretty addicting); some find discomfort in the need to learn some rather bizarre syntax (Angular forces you to write HTML with “directives”).</p>

<p>Here’s the low down: Backbone feels like the traditional, familiar option whereas Angular feels like the more experimental, exotic option. Yes, it took us awhile to appreciate Backbone, but once we got comfortable with it, we realized how easy it is to comprehend after you get your mind around it.</p>

<p>For Angular, the learning curve is a lot less steep, but it also seems like it will be harder to master. There is more “magic” …and now I’m realizing I should explain that word.</p>

<h4 id="aside-what-is-magic">Aside: What is “magic”?</h4>

<p>When I say “magic,” I’m using it colloquially to refer to abstraction that feels harder to comprehend and feels less intuitive. For analogy*, a door knob abstracts mechanical bits. You may not be a locksmith, but it’s probably easy for a child to imagine how it works. Even as a child, you probably had some intuition that door knobs just have some simple mechanism for converting rotational movement of the knob into longitudinal movement of the latch On the other hand, it’s a bit hard for a child to imagine how a digital camera works. Even an old-school film-based camera feels magical at that tender age when you’re first capable of comprehending door knobs. Ahhh…those were the days, am I right?</p>

<p><strong>*By the way, can we make “for analogy” a thing in the same way that “for example” is a thing?</strong></p>

<p>Also, if you google “parts of a door knob,” you will see some complex diagrams, but I will defend my analogy! For the sake of argument, let’s just say door knobs use simple cams.</p>

<h4 id="back-to-my-thoughts-on-angular">Back to my thoughts on Angular</h4>

<p>So why does Angular seem so magical? By using Angular’s library of directives, you can have the browser display a list of items without writing DOM-manipulating code (i.e., jQuery). You can sort those items without writing a sorting function. You can filter those items without writing a sorting function. In Angular, you’re not supposed to use jQuery to change/update the HTML on the page. Angular takes care of that for you. How does it do that? Magic (directives). I haven’t even touched Angular’s feature that allows you to just create your own semantic HTML tags (e.g., <code>&lt;tab&gt;&lt;pane&gt;Content for Pane 1&lt;/pane&gt;&lt;pane&gt;Content for Pane 2&lt;/pane&gt;&lt;/tab&gt;</code>).</p>

<h3 id="routers-templates-user-authentication">Routers, Templates, User Authentication</h3>

<p>With MVC frameworks comes routers and templates. With web apps comes user authentication (sometimes).</p>

<p>On the server-side, routing involves RESTful APIs, which are fairly tidy interfaces that allow clients to talk to servers. On the client-side, routing involves flow control and updating the URL in the browser address bar so that it looks pretty/semantic. For example, you may want to switch to an editing panel when the user clicks a button. The router changes the URL to end in <code>/edit</code> without causing the page to refresh. The router also calls a function that might do edit-related things such as rendering an editing panel.</p>

<p>Templates are used to create sections of HTML that will contain dynamic content. Let’s say you want to render an unordered list (<code>&lt;ul&gt;&lt;/ul&gt;</code>), and the app will determine how many items (<code>&lt;li&gt;&lt;/li&gt;</code>) will be in the list. Templates take care of that.</p>

<p>On the server-side, routing and templating is pretty easy with Sinatra. On the client-side, routing with Angular feels easier than routing with Backbone. Templates are way easier in Angular for me.</p>

<p>In any case, I find user authentication isn’t very straightforward, but I haven’t tried many gems for Ruby nor <a href="http://passportjs.org/">Passport</a> for Node.js. You need to check for authentication, redirect visitors as necessary, encrypt passwords (AND usernames –don’t forget that), save login info into a database, manage sessions/cookies, etc. A surprising amount of mistakes can be made.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HackR Diary] Week 4: Now Entering Callback Hell]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/10/21/hackr-diary-week-4/"/>
    <updated>2013-10-21T21:45:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/10/21/hackr-diary-week-4</id>
    <content type="html"><![CDATA[<p><img src="/images/20131021/joebowers_at_hackreactor.jpg" alt="photo of Joe Bowers presentation" /></p>

<p class="my-caption">Joe Bowers from Mixpanel discussing tech decisions based on company culture</p>

<p>Another week down, another blog post arriving a Monday rather than the planned Sunday. Woops. Week 4 ended on a more stressful note for me (more on that in the <em>What I Learned</em> section <a href="#what-i-learned">below</a>), so I really felt the need to relax and decompress yesterday rather than write up this blog post. That said, once I complete roughly 25% of a blog post, I really start enjoying the writing process.</p>

<p>Because the school educates us students at such a tough pace, it’s tempting to say every week is a game changer, the most challenging week ever, the most interesting, etc. Well I’m going to induldge and say week #4 was the craziest week thus far.</p>

<p>I discovered that the Hack Reactor directory contains a partially complete list of all alumni’s employers. I started looking up some of the companies during a break from work. I didn’t have much time, but what I saw really inspired me. Now I’m even more excited about my own future prospects. <em>Hooray!</em></p>

<p>There were two guest speakers this week. They both were quite technical, and I took time to smell the roses by taking a moment to think to myself, “Wow I’ve learned a lot because I understand all this very technical, very specific stuff discussed by these speakers.” <em>Hooray!</em></p>

<p>There were a couple of <a href="/blog/2013/10/06/hackr-diary-week-2/#toy-problems">toy problems</a> that gave me some trouble this week. Maybe I’m putting too much pressure on myself, but solving a toy problem gives me a lot of self-confidence …and failing a toy problem puts a figurative frown on the figurative face of my mood for the rest of the morning (or longer). <em>Dammit!</em></p>

<p>Students are told not to worry about comparing themselves to peers, but the seniors are killing it. I feel happy for them, but sometimes their impressive projects make me second-guess myself. Can I come up with a cool idea for an app? Self-doubt is creeping in. I only have one more week to think of something. <em>Dammit!</em></p>

<p>As you can tell from the previous four paragraphs, the previous week was a bit of a battle between fear and pride. The worst part was falling behind on the databases sprint. The best part was watching seniors’ presentations.</p>

<h1 id="recap-of-events">Recap of Events</h1>

<h3 id="guest-speaker-pamela-fox">Guest Speaker: Pamela Fox</h3>

<p>On Monday, Pamela Fox (formerly Coursera, currently Khan Academy) gave a great Backbone presentation at Hack Reactor. I wrote about it <a href="/blog/2013/10/16/hackr-diary-a-visit-from-pamela-fox-re-backbone/">right here</a>.</p>

<h3 id="guest-speaker-joe-bowers">Guest Speaker: Joe Bowers</h3>

<p>On Thursday, Joe Bowers (pictured at the top) gave an intriguing talk about intra-company coding culture. There are a lot of decisions to make with regards to software architecture/design, and Joe explained that many decisions are made based on coding culture/philosophy. In other words, many decisions come down to subjective thinking and preferences for certain aesthetics. His primary example was about Mixpanel’s tendency to embrace code cleanliness to the point of sacrificing <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRYness</a> and abstraction. Their code is very explicit, so you always know what it’s doing without having to spend hours studying various layers of abstraction or other quirks that might improve elegance at the cost of human-readability.</p>

<h3 id="social-night-lit-crawl-skipped">Social Night: Lit Crawl (skipped)</h3>

<p>I’m not sure what <a href="http://litcrawl.org/sf/">SF Lit Crawl</a> is, but that was the designated event for social night. I decided not to join because I felt like I needed to spend more time studying ORMs (more on that below). Spending Saturday evening at Hack Reactor is actually quite nice. There were probably 10-20 students/staff still hanging out at HackR. Sadly, I wasn’t very productive. I think my brain was just too tired from battling asychronous database queries.</p>

<p>On a related note, I’ve told HackR staff that the Social Nights are not well-organized. It’s clear that they are not given a high priority (attendance is optional for students), and I think they’re missed opportunities for cohort bonding. With a class size of nearly 30 students, it’s hard to get to know everyone when you spend most of your time with one person every two days (during 2-day paired programming sprints).</p>

<h3 id="seniors-group-project-presentations-practice">Seniors’ Group Project Presentations (practice)</h3>

<p>So. Friggin’. Stellar.</p>

<p>Just. Absolutely. Outstanding.</p>

<p>I was truly blown away by the seniors’ final projects. HackR students work on two major projects during their time here. The first is an individual project, the second is a group project. Students present their projects to some Hack Reactor staff and fellow students as practice for when they have to present to employers on hiring day.</p>

<p>The group projects I saw last Saturday were incredible. They only had 2-3 weeks to create something worth bragging about, and they certainly surpassed my expectations. I’m half-inspired and half-worried. What they’ve done makes me prouder to be associated with Hack Reactor, but now I definitely feel more pressure to reach a similar level of awesomeness. Here are a few highlights:</p>

<ul>
  <li>Personal website powered by <a href="http://famo.us/">Famo.us</a>: Making a personal website might not sound impressive, but don’t get the wrong idea. I’m not talking about an About.me page. The site has very sexy Twitter/Facebook feed integration. The product looks like something Feedly or Flipboard would create (pro quality). <strong>More importantly</strong>, the team behind the product is one of the first to use brand new tech called Famous. Famous is a JavaScript framework for continuously rendering webpages with the power of client GPUs rather than CPUs. It replaces typical HTML with a bunch of <code>div</code> elements that are constantly being updated (at ~60 frames per second) with new values for their properties. The Hack Reactor students not only used the new tech (which is still in <em>private</em> beta), they also <em>contributed</em> to the Famous codebase. In fact, Famous will be using the students’ product at future HTML5 conferences to demo the power of the framework!</li>
  <li>Virtual Furniture Placement: A group of 4 (or was it 5?) made an app that takes user-uploaded photos of empty rooms and allows the user to place virtual, 3D furniture into the photos. The 3D rendering looks so good! It’s amazing what you can do with JavaScript (I believe they used <a href="http://threejs.org/">three.js</a>). This is definitely an app that every home seller and furniture seller should use.</li>
  <li>Reddit Submission Scheduler: It’s basically <a href="http://bufferapp.com/">Buffer</a>, but it’s for Reddit instead of Twitter. The students have built a product that I imagine every marketer wants: an app that allows you to submit a post to Reddit at a future date/time. I actually wonder if Reddit will ban the app because it could potentially be abused to proliferate spam. That said, if Buffer can work for Twitter, than surely something similar can work for Reddit. The idea is simple and unglamorous, but it certainly meets a big demand. It’s easy to imagine a company willing to buy the students’ app.</li>
</ul>

<h1 id="what-i-learned">What I Learned</h1>

<h2 id="nodejs-without-express">Node.js (without Express)</h2>

<p>Finally! Server-side code! Up to this point, the students have been just working with client-side assignments. With the <a href="http://nodejs.org/">Node.js</a> sprint, we started sending HTTP requests back and forth between client and server. We have yet to use <a href="http://expressjs.com/">Express</a> or any other Node.js framework to make life easier. We used modules like http, fs, url, and so on. The asynchronous nature of Node.js was weird at first, but to be honest, a lot of us got around that complexity by using synchronous variants of methods (e.g., <code>fs.readFileSync()</code>in place of <code>fs.readFile()</code>).</p>

<h2 id="databases">Databases</h2>

<p>At first, I was excited by the idea of learning database goodness. But then the asynchronous nature of Node.js started raining on my parade. We worked with MySQL and a SQL-for-Node.js ORM called <a href="http://http://sequelizejs.com/">Sequelize</a>. ORMs are libraries that provide a way to interact with databases without having to write SQL code. In the case of Sequelize, you just write JavaScript code with the Sequelize class/methods to query the database.</p>

<p>It’s not all sunshine and rainbows though. I found Sequelize to be troublesome. You can get stuck in callback hell because unlike the http module for Node.js, the Sequalize module lacks synchronous variants of methods. We have yet to explore the benefits of asynchronous/non-blocking server-side code, so it’s hard to embrace the “pyramid of doom” (aka callback hell). When I asked for help, I was told to investigate another library for adding “promises” to my code. Promises help make asynchronous code much more manageable, but I didn’t have enough time to truly learn and implement them.</p>

<p>So what I’m basically saying is that last week ended on a crappy note: an unfinished assignment. I’ve been told not to worry because there will be more opportunities to learn databases when working on projects (during the 2nd half of the Hack Reactor course).</p>

<h1 id="in-other-news">In other news…</h1>

<h2 id="the-next-phase">The Next Phase</h2>

<p>There isn’t much time! In just a couple of weeks, the individual project phase begins. I have no good ideas for what to create! In my limited spare time, I’m playing Hawken, browsing Imgur, and freaking out about the personal project phase.</p>

<h2 id="nuances-of-javascript">Nuances of JavaScript</h2>

<p>On a more positive note, Hack Reactor shared this YouTube video <a href="https://twitter.com/HackReactor/status/390905108105818112">via Twitter</a>:</p>

<iframe width="300" height="225" src="http://RebootJeff.github.io//www.youtube-nocookie.com/embed/iSxNCYcPAFk" frameborder="0" allowfullscreen=""></iframe>

<p>As I watched it, I realized that it covered material I learned in the first week or so at Hack Reactor. It felt pretty awesome. You may wonder why it took a week to learn content covered by a simple presentation on YouTube. My opinion is that the video is not meant for beginners; it’s meant for seasoned coders trying to learn JavaScript.</p>

<h2 id="disclaimer">Disclaimer</h2>

<p>After a few weeks of this HackR Diary blogging, I’ve noticed that I’ve missed a few things. Despite my best efforts, these posts are not as comprehensive as I originally imagined. For example, last week, I forgot to talk about learning eventing systems. Overall, I’ve been forgetting to talk about specific aspects of student life like food options, daily mini-presentations, fitness challenges, the “halp system”, volunteering for tech blogging, and so on and so forth…</p>

<p>So much to write about; so little time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HackR Diary] Event: Pamela Fox on Backbone]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/10/16/hackr-diary-a-visit-from-pamela-fox-re-backbone/"/>
    <updated>2013-10-16T07:13:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/10/16/hackr-diary-a-visit-from-pamela-fox-re-backbone</id>
    <content type="html"><![CDATA[<p class="last-updated">Last updated on Oct 16, 2013 (see strikethrough text).</p>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/pamelafox">@pamelafox</a> schooling <a href="https://twitter.com/HackReactor">@HackReactor</a> students on <a href="https://twitter.com/search?q=%23backbonejs&amp;src=hash">#backbonejs</a> <a href="http://t.co/1xRuxIEvKl">pic.twitter.com/1xRuxIEvKl</a></p>&mdash; andre (@AndrEvangelestA) <a href="https://twitter.com/AndrEvangelestA/statuses/389949525588062209">October 15, 2013</a></blockquote>
<script async="" src="http://RebootJeff.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Last Monday, the Hack Reactor students were treated to <a href="http://backbone-3ways.appspot.com/">a Backbone presentation</a> by <a href="http://blog.pamelafox.org/">Pamela Fox</a>. It was packed with a ton of insight. I frantically took notes on my smartphone (like a fool), so now I present to you a collection of cool cucumbers.</p>

<h1 id="what-i-learned">What I Learned</h1>

<h2 id="backbone-nuggets">Backbone Nuggets</h2>

<ul>
  <li>
    <p>Region management (which you can “outsource” to the likes of <a href="http://chaplinjs.org/">Chaplin</a> or <a href="http://marionettejs.com/s">Marionette</a>) is worth checking out. Apparently, it helps limit the amount of rendering you need to do by allowing you to target specific regions of the web page.</p>
  </li>
  <li>
    <p>Not all Backbone libraries are created equal! Some provide sweet functionality at the cost of depressing performance losses. The Backbone ecosystem is cool, but not entirely safe. Pamela once removed a library from Coursera’s codebase that was responsible for a <em>full second</em> of page load time.</p>
  </li>
  <li>
    <p>Backbone is so flexible that you might feel like an Backbone expert one day and then feel like a noob the next day when you see someone else’s radically different and compelling usage.</p>
  </li>
  <li>
    <p>Break up your views into more views. Make sibling views and nested views. No single view should be a bajillion lines of code. If you find yourself making long js files in Backbone, it’s time to split things up, my fellow noob.</p>
  </li>
</ul>

<h2 id="general-code-related-nuggets">General Code-Related Nuggets</h2>

<ul>
  <li>
    <p>Don’t optimize prematurely. Performant code is harder to read. Making code harder to read early on can be annoying. I wonder if Pamela is pro-<a href="/blog/2013/09/25/hackr-diary-first-impressions/#guard-operator">guard operator</a> or anti-guard operator.</p>
  </li>
  <li>
    <p><a href="http://requirejs.org/">RequireJS</a> kills your foolish usage of global vars. Perhaps I should use it.</p>
  </li>
  <li>
    <p>Single-page web apps can be harder to debug (than multi-page web apps?) because state gets saved across various renders. Errors can be hard to reproduce during the debugging process because there might be many user interactions that need to occur in a particular sequence to cause the error.</p>
  </li>
  <li>
    <p><strong>Ask potential employers about their companies’ testing practices.</strong> How much regression testing do they do? How many tests have they created? More tests means less fear when contributing to the codebase as a fresh employee.</p>
  </li>
  <li>
    <p>Making <strong>forms</strong> with Backbone (or any MV framework?) is great because forms lend themselves to the model-view-collection paradigm with ease. Forms are collections of questions, which are models, which have their own views. Each question view can draw from a set of views meant to provide a particular format (a view for a question answered by checkboxes, a view for question answered by text fields, a view for question answered by generic menu, etc). This also means Backbone is good for creating <strong>control panels</strong> for admin users (e.g., admin control panel for teacher conducting a Coursera class).</p>
  </li>
</ul>

<h2 id="re-coursera">Re: Coursera</h2>

<p>Pamela used to work for Coursera. She drew from her experiences with that company to provide a lot of context and real-world examples for the arguments she put forth in her presentation.</p>

<ul>
  <li>
    <p>To address SEO concerns associated with single-page web apps, Coursera used <strong>Just-in-Time rendering</strong>. Coursera would detect whether or not a visitor was a search/social engine bot crawling the sit. Upon identifying the bot, Coursera servers would respond by firing up a rendered instance of the web app using Selenium. The bot would then be directed to the code produced by the rendering. This prevents the bot from crawling an HTML file that has nothing but <code>&lt;script&gt;</code> tags pulling in Backbone code. Side note: Google is not cool with the just-in-time technique. Coursera had to use a different technique for Google, but that was not disclosed during Pamela’s talk :(</p>
  </li>
  <li>
    <p><del>It’s not the most organized</del> (nevermind –it’s split into easy-to-understand folders), but you can find a lot of Coursera <a href="https://github.com/coursera/forum-js-snapshot">code on Github</a> (open source, baby!)</p>
  </li>
  <li>
    <p>When viewing their source code with your browser, you’ll see mostly <code>&lt;script&gt;</code> tags. There is very little <code>&lt;body&gt;</code> HTML. That’s due to extensive use of Backbone.</p>
  </li>
</ul>

<h1 id="what-i-thought">What I Thought</h1>

<p>Pamela is a fantastic speaker. What I liked most about her talk was the use of real-world examples. As a student, it’s always so informative to hear about life in the wild (so to speak). Seeing as how this was a Hack Reactor event exclusively for students, it’s hard to judge it impartially, but I’m going to go ahead and claim it was awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HackR Diary] Week 3: Order in the Code]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/10/14/hackr-diary-week-3-backbone/"/>
    <updated>2013-10-14T00:22:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/10/14/hackr-diary-week-3-backbone</id>
    <content type="html"><![CDATA[<p><img src="/images/20131014/logos.png" alt="logos" /></p>

<p class="my-caption">Tech from the previous week: Bower, Backbone, and CoffeeScript</p>

<p>It’s funny how time perception is so easily manipulated. After 3 weeks of immersive education, I forget what day of the week it is. My fellow students also think time is passing by really quickly despite how many hours per day we spend in one (big) room.</p>

<p>Weekends are limited to Sundays due to the 6-days-per-week schedule, so Fridays don’t feel like Fridays (so to speak). However, I should note that Saturdays at Hack Reactor are less intense than other days because the weekly social nights replace the final few hours of the daily classwork with entertainment. Social nights are optional, and plenty of students decide to spend that time working.</p>

<h2 id="more-varied-thoughts-from-week-3">More varied thoughts from week 3</h2>

<ul>
  <li>I’ve stopped using pen + paper. I probably didn’t need to buy notebook for this course, and I’m just not a fan of paper. Hopefully my lack of note-taking won’t bite me later. Hack Reactor provides some good online notes, diagrams, etc, but I’m not sure they’ll be enough when it comes time to study for job interviews. That said, I’m not too worried.</li>
  <li>Gym time is limited. Students get 2-hour lunch breaks every other day, but it takes at least 10 minutes to walk to the gym, a few minutes to change clothes, a few minutes to shower, 5-10 minutes to buy lunch afterwards, etc. Actual workout time is roughly 45-60 minutes max. A lot of us have ended up eating during the post-lunch lecture, so I guess it’s all good.</li>
  <li>Hack Reactor hosts <a href="http://www.meetup.com/hackreactor/">various meetups</a> throughout the week (Coursera study group, general JS meetups, etc). I think that’s a pretty cool way for them to help out the greater dev community.</li>
  <li><strong>Burnout watch:</strong> I still feel pretty excited to go to Hack Reactor 6 days per week, but I definitely look forward to relaxing on Sundays. In <a href="/blog/2013/10/06/hackr-diary-week-2/">my previous blog post</a>, I lamented about spending free my limited free time to write substantive blog posts, but now I think they really help me exercise my memory to prevent that “it was all a blur” feeling.</li>
</ul>

<h1 id="recap-of-events">Recap of Events</h1>

<h3 id="industry-event-firebase">Industry Event: Firebase</h3>

<p>Sadly, I didn’t attend the <a href="https://www.firebase.com/">Firebase</a> meetup hosted at Hack Reactor HQ. I heard from fellow students that the Firebase tech is pretty sweet. Firebase devs gave a demo that impressed many with promises of data syncing hotness.</p>

<p>Why didn’t I attend the event? My pair programming partner and I decided we couldn’t spare any time for the event because we were more concerned with Backbone. Firebase just happened to come around at a bad time for me.</p>

<h3 id="social-night-movie-theater">Social Night: Movie Theater</h3>

<p>Yesterday, many students went to see <em>Gravity</em> (in 3D IMAX format). It was pretty friggin’ fantastic. Afterwards, some of us went our separate ways, some went back to studying/working, and some went out to partake in beverage consumption.</p>

<h1 id="what-i-learned">What I Learned</h1>

<p><strong>Quick tip:</strong> I learned a tactic for dealing with low brain energy. When I’m tired of analyzing software architecture decisions or concocting algorithms, I can give myself a productive break by switching to CSS work. Changing gears from program development to applying styles and designing layouts works wonders to give certain parts of my brain a rest while exercising others.</p>

<p>Most Hack Reactor assignments come with some pre-written code, but they often come devoid of any interesting visuals so that you can practice CSS skills.</p>

<h3 id="bower">Bower</h3>

<p>Not much to say here. Students got a very brief lecture about <a href="http://bower.io/">Bower</a>, but it didn’t take much time to convince me to use it. Easily manage libraries/dependencies with a few terminal commands? Nice. <code>bower install</code> = woot!</p>

<h3 id="inner-workings-of-the-web-httpajax-full-stack-overview">Inner workings of the web (HTTP/AJAX, full stack overview)</h3>

<p>Students have yet to write any server-side code, but we’ve dealt with programming small client-side apps that interact with servers. We were taught some AJAX skills and some general HTTP knowledge. One lecture covered the overall system architecture that describes client-server interaction. <strong>There were so. Many. Terms:</strong> local storage, sockets, page requests, asset requests, client vs server MVC, content delivery networks (CDNs), object-relational mapping (ORM) –good times.</p>

<h3 id="backbone">Backbone</h3>

<p>Most of the week 3 assignments involved <a href="http://backbonejs.org/">Backbone</a>, which forced us students to really change the way we think about <em>designing</em> software. Developing with Backbone means organizing code to follow paradigms involving models, views, and collections (not quite MVC –which is “model view <em>controller</em>”).</p>

<p>Before Backbone (a JavaScript framework for providing web apps with structure) our code was a like a stream of consciousness. With Backbone, our code was given order, structure, and rules to follow. It was a tough, but rewarding adjustment. Students were struggling with the process when initially exposed to Backbone. <strong>It’s funny because we were all questioning the effectiveness of Hack Reactor’s curriculum at first, but by the end of the week, most of us feel much more comfy with the framework.</strong></p>

<p>Imagine you could only teach via stream-of-consciousness statements. Content would be expressed, but it would be messy as hell. Now imagine you were forced to teach by writing a well-structured, well-organized textbook. The difference is staggering. Suddenly you need to think about organizing concepts into topics, sequencing topics, connecting topics, etc. Making the leap from using no framework to using Backbone isn’t quite as drastic, but it’s still a tough contrast to get comfortable with in just a few days –even if those days involve ~12 hours of learning.</p>

<h3 id="coffeescript">CoffeeScript</h3>

<p>Before my time at Hack Reactor began, I was open to the idea of learning <a href="http://coffeescript.org/">CoffeeScript</a> (a more expressive, human-readable programming language that compiles into JavaScript, allowing you to write JavaScript with a very different syntax) because it looked friendly in the same way Ruby looks friendly. After a couple of weeks of writing lots of JavaScript code, I was far less open-minded about spending time learning a drastically different syntax. Imagine being told you were going to take a break from learning intermediate Spanish so you could learn beginner Portugese. You’d say, “No thank you, crazy person.” </p>

<p>After finishing the CoffeeScript sprint, I remain somewhat ambivalent. I don’t love it, but I don’t hate it. <strong>The whole experience taught me that learning new syntax isn’t so bad.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HackR Diary] Week 2: Now Exiting My Comfort Zone]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/10/06/hackr-diary-week-2/"/>
    <updated>2013-10-06T22:17:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/10/06/hackr-diary-week-2</id>
    <content type="html"><![CDATA[<p class="last-updated">Last updated on Oct 13, 2013 to fix a typo and embedded a tweet.</p>

<blockquote class="twitter-tweet"><p>Awesome of the <a href="https://twitter.com/Airbnb">@Airbnb</a> team to visit <a href="https://twitter.com/HackReactor">@HackReactor</a>. Picture of them talking about their tech stack. <a href="http://t.co/AYVDYA3JaT">pic.twitter.com/AYVDYA3JaT</a></p>&mdash; Ben Martin (@HealthfulHacker) <a href="https://twitter.com/HealthfulHacker/statuses/385258134677106689">October 2, 2013</a></blockquote>
<script async="" src="http://RebootJeff.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>I don’t know if <a href="blog/2013/09/29/hackr-diary-thoughts-about-week-number-1/">my summary of week #1</a> made it clear or not, but although my first six days at Hack Reactor were tough, I didn’t exactly struggle with any of the material. This is probably because the pre-course work was <a href="/blog/2013/09/22/hackr-diary-pre-course-anticipation/">incredibly difficult</a>, thereby infusing me with helpful knowledge while also shaping my expectations.</p>

<p>Well guess what? Week 1 was an anomaly. It was a week filled with more lectures and less hands-on programming. I knew this ahead of time, but week 2 still caught me off guard. There was quite a bit more learning with minimal guidance. Also, the joys/stresses of pair programming are turned up a few notches as a result of the additional programming time created by reducing the amount of lecture time.</p>

<p>Consequently, I’ve been feeling more tired in general. Forgive me, but spending my free time to write this blog is beginning to look less and less appealing.</p>

<p>I joined a nearby gym (aside: I just remembered that I need to notify Hack Reactor to get my $50 reimbursement from them!) so my energy levels should increase in a week or two. Every other lunch break is two hours long instead of just one hour long. The extra time is meant to encourage students to go exercise.</p>

<p>I want to write more about student life at Hack Reactor, but I think I’ll just spread out the details in my <a href="/blog/categories/hackr-diary/">HackR Diary</a> series rather than providing every bit of info in a single, giant blog post. So for now, I cover gym time, toy problems, and tapouts. In the future, I’ll discuss the workstations, help system, student-staff interaction, food, and more.</p>

<h1 id="week-in-review">Week in Review</h1>

<h4 id="toy-problems">Toy Problems</h4>

<p>This week, my cohort, the junior students, started solving (almost) daily toy problems, which are small coding challenges designed to get us used to the type of timed problems that will be thrown our way at tech interviews. We have to complete these problems individually. We have 30-60 minutes to think of a solution, code the solution, and submit pull requests to have an automated tester give us feedback that we can use to help fix our solutions as necessary.</p>

<h4 id="tapouts">Tapouts</h4>

<p>This week, us juniors also started attending weekly(?) tapouts. Tapouts are like small group therapy sessions where five students voice their opinions of Hack Reactor to an alumnus. She will send anonimized feedback up the chain while also providing us with advice for any struggles we care to talk about. </p>

<h4 id="special-event-airbnb-presentation">Special Event: AirBnB Presentation</h4>

<p>Lead devs from <a href="https://twitter.com/Airbnb">AirBnB</a> presented a ton of info about their tech stack, their work environment, <a href="http://nerds.airbnb.com/weve-open-sourced-rendr-run-your-backbonejs-a/">their open source project</a>, dev career advice, startup advice, etc. There was a post-presentation panel for answering several questions. Then there was a post-panel meet-and-greet session. It was a truly fantastic event.</p>

<h4 id="saturday-social-night">Saturday Social Night</h4>

<p>I skipped last Saturday’s social night to go to a close friend’s birthday celebration(s). Week 2’s theme for social night was board/card games.</p>

<h1 id="what-i-learned--what-i-thought">What I Learned + What I Thought</h1>

<h4 id="inheritancesubclassing-in-javascript">Inheritance/Subclassing in JavaScript</h4>

<p>The subclassing sprint was a bit frustrating at first. It took me awhile to grasp the keyword <code>this</code> because of JavaScript’s tendency to pass functions around as parameters to other functions.</p>

<p>Upon wrapping one’s brain around <code>this</code> (and the <code>.call()</code>/<code>.apply()</code> methods), there was a lot of fun to be had with the assignment that Hack Reactor gave the students. This was the first assignment involving a visual facet, and the student body reacted accordingly (with creativity galore).</p>

<h4 id="algorithms">Algorithms</h4>

<p>The algorithms sprint was a fantastic challenge, but there was no specific set of knowledge to learn. It felt like the main goal of the sprint was to get students’ minds thinking in more computer-oriented ways. We were taught some basics about time complexity, but we didn’t go into much depth about Big-O notation. We briefly described actions (e.g., deleting data from an array) and algorithms (e.g., solutions to the <a href="http://en.wikipedia.org/wiki/Eight_queens_puzzle#Related_problems">n-queens puzzle</a>) as constant, linear, quadratic, polynomial, and exponential (as opposed to discussing the nuances of O(c), O(n), O(n^2), O(n^c), O(c^n), etc).</p>

<p>The main takeaway was that we should worry more about macro optimizations (storing data in variables in a way that allows for constant-time lookup) rather than micro optimizations (improving a <code>for</code> loop so then it loops fewer times). <strong>Micro optimizations are good, but they aren’t very valuable when you’re just creating prototypes, minimum viable products, etc.</strong></p>

<p>I’m somewhat disappointed that we weren’t taught specific algorithms such as quicksort, binary search, etc. I’m under the assumption that all software developers need to know the “greatest hits” of algorithms. Although, I’m also under the assumption that such knowledge is more useful in tech interviews than in day-to-day coding.</p>

<h4 id="layoutpositioning-htmlcss">Layout/Positioning (HTML/CSS)</h4>

<p>I taught myself a decent amount of HTML/CSS before my cohort’s start date, so I was very comfortable with the layout assignment, but it wasn’t easy. There are still plenty of times when proper CSS positioning eludes me. That said, this topic doesn’t provide an intellectual challenge.</p>

<p>The difficulty lies in getting the syntax just right and understanding hierarchy. Some students didn’t learn much HTML/CSS before joining Hack Reactor, and so they had a lot to learn (box model, DOM hierarchy, CSS selectors, etc.) in a very short amount of time.</p>

<p><strong>If you’re thinking of joining Hack Reactor as a student, I highly recommend you teach yourself HTML/CSS</strong> ahead of time. HTML/CSS isn’t tough to learn on your own, but it can be time-consuming even if you’ve got pros helping you. You may as well prepare yourself so then you can spend less time at Hack Reactor worrying about HTML/CSS and more time worrying about other technologies and concepts.</p>

<h4 id="d3-library">D3 (library)</h4>

<p><a href="http://d3js.org/">D3.js</a> is a JavaScript library for creating data-driven visuals inside HTML documents. I thought jQuery was cool, but now I think D3 takes the cake. It’s much harder to learn D3, but there is tremendous power to be had from familiarizing yourself with it.</p>

<p>That said, the D3 assignment left me mentally tired as hell. Like jQuery, you can easily select DOM elements, but the rest of the D3 syntax isn’t so straightforward, and the general concepts for using D3 properly will feel rather foreign at first. I hope to spend more time on my own to master D3 …when I’m not so damn tired. The key is to understand the <a href="http://bl.ocks.org/mbostock/3808218">general update pattern</a>.</p>
]]></content>
  </entry>
  
</feed>
