<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: software development | RebootJeff.com]]></title>
  <link href="http://RebootJeff.github.io/blog/categories/software-development/atom.xml" rel="self"/>
  <link href="http://RebootJeff.github.io/"/>
  <updated>2014-09-03T18:37:13-07:00</updated>
  <id>http://RebootJeff.github.io/</id>
  <author>
    <name><![CDATA[Jeff Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Sublime Text 2 Setup and Customization]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/05/15/my-sublime-text-2-setup-and-customization/"/>
    <updated>2014-05-15T20:32:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/05/15/my-sublime-text-2-setup-and-customization</id>
    <content type="html"><![CDATA[<p><em>Updated on August 8, 2014.</em></p>

<p>I use Sublime Text 2 as my text editor for coding. I don’t use a fancy IDE like WebStorm, but I do plan on trying out WebStorm more at work. Actually, I should probably upgrade to ST3, but for now, I’m happy with ST2.</p>

<h1 id="config">Config</h1>

<p>However, ST2’s light weight comes at a cost: you probably need to configure some stuff before you’re really ready to roll. Here’s what I do when I first install ST2 on a machine.</p>

<h2 id="key-bindings">Key Bindings</h2>

<p>First, I change the keyboard shortcuts for cycling through open tabs. The default behavior is based on your usage history (most recently viewed tabs), but I prefer just cycling from left to right. There’s actually another key binding that can cycle tabs from left to right, but I prefer using <code>Ctrl+Tab</code>.Therefore, I edited my key bindings like so…</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Preferences &gt; Key Bindings – User </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
{ <span class="error">“</span><span class="error">k</span><span class="error">e</span><span class="error">y</span><span class="error">s</span><span class="error">”</span>: [<span class="error">“</span><span class="error">c</span><span class="error">t</span><span class="error">r</span><span class="error">l</span><span class="error">+</span><span class="error">t</span><span class="error">a</span><span class="error">b</span><span class="error">”</span>], <span class="error">“</span><span class="error">c</span><span class="error">o</span><span class="error">m</span><span class="error">m</span><span class="error">a</span><span class="error">n</span><span class="error">d</span><span class="error">”</span>: <span class="error">“</span><span class="error">n</span><span class="error">e</span><span class="error">x</span><span class="error">t</span><span class="error">_</span><span class="error">v</span><span class="error">i</span><span class="error">e</span><span class="error">w</span><span class="error">”</span> },
{ <span class="error">“</span><span class="error">k</span><span class="error">e</span><span class="error">y</span><span class="error">s</span><span class="error">”</span>: [<span class="error">“</span><span class="error">c</span><span class="error">t</span><span class="error">r</span><span class="error">l</span><span class="error">+</span><span class="error">s</span><span class="error">h</span><span class="error">i</span><span class="error">f</span><span class="error">t</span><span class="error">+</span><span class="error">t</span><span class="error">a</span><span class="error">b</span><span class="error">”</span>], <span class="error">“</span><span class="error">c</span><span class="error">o</span><span class="error">m</span><span class="error">m</span><span class="error">a</span><span class="error">n</span><span class="error">d</span><span class="error">”</span>: <span class="error">“</span><span class="error">p</span><span class="error">r</span><span class="error">e</span><span class="error">v</span><span class="error">_</span><span class="error">v</span><span class="error">i</span><span class="error">e</span><span class="error">w</span><span class="error">”</span> },
</pre></div>
</div>
 </figure></notextile></div></p>

<h2 id="settings">Settings</h2>

<p>Next up, I make sure my whitespace is configured to my liking. I think most coders who lift hefty amounts of JavaScript go with indentation 2 spaces at a time, so that’s what I do. I prefer it because it takes up less space than a typical 4-space tab, which is critical when viewing code in split-screen mode. I also like having the option to manually change indentation with spaces if necessary for alignment purposes. Mixing spaces and tabs gets messy.</p>

<p>I also configure Sublime Text to automatically add a new line at the end of every file whenever I save. It won’t add a new line if one already exists at EOF. I personally never suffer from lack of new line at EOF, but <a href="http://stackoverflow.com/questions/729692/why-should-files-end-with-a-newline">some UNIX tools won’t work without them</a>, and I know lots of hardcore coders out there like using such tools. I don’t want to screw them over. With that said, allow me to present my ST2 settings…</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Preferences &gt; Settings – User </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// The number of spaces a tab is considered equal to</span>
  <span class="error">“</span>tab_size<span class="error">”</span>: <span class="integer">2</span>,&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;</span><span class="delimiter">/</span></span>/ Set to <span class="predefined-constant">true</span> to insert spaces when tab is pressed
  <span class="error">“</span>translate_tabs_to_spaces<span class="error">”</span>: <span class="predefined-constant">true</span>,&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;</span><span class="delimiter">/</span></span>/ Set to <span class="predefined-constant">true</span> to ensure the last line of the file ends <span class="keyword">in</span> a newline
<span class="comment">// character when saving</span>
  <span class="error">“</span>ensure_newline_at_eof_on_save<span class="error">”</span>: <span class="predefined-constant">true</span>,
</pre></div>
</div>
 </figure></notextile></div></p>

<h1 id="theme-ui-skin">Theme (UI Skin)</h1>

<p>I use the Nexus theme, which you can find here: <a href="https://github.com/EleazarCrusader/nexus-theme">https://github.com/EleazarCrusader/nexus-theme</a>. The readme file explains a bunch of different installation options, but I recommend installing via Package Manager. The readme also tells you how to activate the theme after installation.</p>

<p><img src="https://raw.githubusercontent.com/EleazarCrusader/nexus-theme/master/nexus-theme.png" alt="official Nexus theme screenshot" /></p>

<p class="my-caption">The orange and blue decorations on the tabs tell you if the file has been change since last save.</p>

<h1 id="packages">Packages</h1>

<p>Sublime Text doesn’t come with many bells and whistles. Instead you add them as packages. First, you must install the package manager by following <a href="https://sublime.wbond.net/installation#st2">these instructions</a>. After that, get ready to discover a giant pool of all the bells and whistles you could possibly want. If you need to adjust the settings for any of these packages, you can usually find good documentation from the readme files of their respective GitHub repos.</p>

<p>After you install Package Manager, you can access it by hitting <code>Ctrl+Shift+P</code> (or perhaps <code>Cmd+Shift+P</code> for Macs?) and then typing “package control” into the search box. The typeahead will reveal your various options, but you mostly be using “Package Control: Install Package”. There will be some load time necessary to provide you a list of available packages, but after it’s done, you can search for packages by name. Installation will similarly require some load time. Check the bottom-left of the ST2 window to see relevant status messages.</p>

<p>Here are the packages I installed:</p>

<h3 id="alignment">Alignment</h3>
<p>Prettify your code by aligning multiple lines of variable definitions and hash objects. For example…</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Before and After using the Alignment package </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// this stuff…</span>
<span class="keyword">var</span> x = <span class="integer">123</span>;
<span class="keyword">var</span> foo = <span class="error">‘</span>bar<span class="error">’</span>;
<span class="keyword">var</span> exampleObj = {
  <span class="key">my</span>: x,
  <span class="key">name</span>: <span class="integer">99</span>,
  <span class="key">is</span>: <span class="error">‘</span>Jeff<span class="error">’</span>
};&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;</span><span class="delimiter">/</span></span>/ would turn into <span class="local-variable">this</span> stuff<span class="error">…</span>
<span class="keyword">var</span> x          = <span class="integer">123</span>;
<span class="keyword">var</span> foo        = <span class="error">‘</span>bar<span class="error">’</span>;
<span class="keyword">var</span> exampleObj = {
  <span class="key">my</span>  : x,
  <span class="key">name</span>: <span class="integer">99</span>,
  <span class="key">is</span>  : <span class="error">‘</span>Jeff<span class="error">’</span>
};
</pre></div>
</div>
 </figure></notextile></div></p>

<p>This may look stupid to you, but I don’t use it all the time. The main place I like to use it is with multiple <code>var example = require('npm package name here');</code> statements at the top of a JS file. By the way, I had to edit the package settings to get alignment for object literals. I added the <code>":"</code> seen below…</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Preferences &gt; Package Settings &gt; Alignment &gt; Settings – User </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
{
  <span class="comment">// The mid-line characters to align in a multi-line selection, changing</span>
  <span class="comment">// this to an empty array will disable mid-line alignment</span>
  <span class="error">“</span>alignment_chars<span class="error">”</span>: [<span class="error">”</span>=<span class="error">”</span>, <span class="error">“</span>:<span class="error">”</span>]
}
</pre></div>
</div>
 </figure></notextile></div></p>

<h3 id="gitgutter">GitGutter</h3>
<p>Add indicators in your gutter so then you can see which lines of code have been changed since the last git commit. See the left edge of this screenshot:
<img src="http://i.imgur.com/ur6FY.png" alt="GitGutter in action" /></p>

<h3 id="sublimelinter">SublimeLinter</h3>
<p>I prefer live linting over build-time linting. SublimeLinter supports a ton of languages, and I have it set to simply bring up an indicator in the gutter and some underscores to point to any issues it finds. It’s not too obtrusive.</p>

<h3 id="trailingspaces">TrailingSpaces</h3>
<p>Extraneous whitespace is bad. Trailing whitespace is worse. I use this package to highlight any trailing whitespace in bright pink. I bet I could set my linter to do this, but oh well.</p>

<h3 id="markdownediting">MarkdownEditing</h3>
<p>Who doesn’t love Markdown? It makes GitHub README files and wiki pages look great. It makes dev blogs look great. It makes writing dev-related text easy. Sometimes, I write rough drafts of blog posts within Google Docs or <a href="http://dillinger.io/">Dillinger</a>, which is a sweet online Markdown editor. In the end, I always complete my blog posts by writing Markdown within Sublime Text.</p>

<p>I recently found a sweet ST package to help edit Markdown files: MarkdownEditing. It completely transforms the look and syntax highlighting of your Markdown. Sadly, I use CodeRay for codeblocks rather than standard Markdown markup. So MarkdownEditing can’t beautify my codeblocks within Sublime Text, but <code>inline code snippets like this one</code> are highlighted in a very helpful way. You can see all the ways that the package alters your Markdown <a href="https://camo.githubusercontent.com/35a66d68a55666133ba7911fb0ea61277740680f/68747470733a2f2f7261772e6769746875622e636f6d2f5375626c696d65546578742d4d61726b646f776e2f4d61726b646f776e45646974696e672f6d61737465722f73637265656e73686f74732f6c696768742e706e67">here</a>. Keep in mind that there are a couple other themes available specifically for MarkdownEditing. I use the dark theme of course.</p>

<h2 id="syntax">Syntax</h2>

<p>You might also find it handy to install packages for specific languages. For example, I dabble with CSS pre-processors and templating languages. I’m currently checking out LESS for CSS and Jade for HTML, so I’ve installed syntax highlighters for them. The package names are simply “LESS” and “Jade”.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HackR Diary] My Formal Apology]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/11/19/hackr-diary-my-apology/"/>
    <updated>2013-11-19T21:53:00-08:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/11/19/hackr-diary-my-apology</id>
    <content type="html"><![CDATA[<p>My previous blog post was nearly 3 weeks ago. Why? What’s stopped me from posting more stories of life at Hack Reactor? For the past several days, I have been working on an individual project. I was very confident going into it, and I should eventually blog specifically about the initial stages, but as it turned out …there is a crap-ton of stuff to juggle when developing a web app. There are so many things that can go wrong in your workflow –not just in your code.</p>

<h1 id="things-that-kept-me-busy">Things That Kept me Busy</h1>

<ul>
  <li>Defaut installation of node/npm on Ubuntu led to file permissions issues. Oh shit.</li>
  <li>Figuring out Yeoman: Before <code>npm install -g yo</code>: I wonder what will happen. After <code>yo generator-angularexpress</code>: What is all this stuff?! Oh nice.</li>
  <li>Figuring out Grunt: How can I get it to work with Stylus? Oh nice.</li>
  <li>Easy, but time-consuming (to make sure you don’t break something that used to work)
    <ul>
      <li>Organizing files/folders in a professional way (inter-file <code>require</code> statements can break)</li>
      <li>Using environment variables (typos can be devastating)</li>
    </ul>
  </li>
  <li>Facebook Authorization
    <ul>
      <li>Making 2 FB apps (one for dev environment; one for production environment)</li>
      <li>Figuring out the proper callback URL</li>
    </ul>
  </li>
  <li>Databases
    <ul>
      <li>Juggling MySQL in development environment, then switching to PostgreSQL in production.</li>
      <li>Why is the production database getting flooded? Oh there’s a random configuration setting I missed in Sequelize.</li>
    </ul>
  </li>
  <li>Random Heroku hiccups (at one point, a node module provider went down, causing Heroku’s <code>npm install</code> to die).</li>
</ul>

<p>These are just a few of the little obstacles that add up. You don’t see them coming. They take quite a bit of time to hunt down.</p>

<h1 id="nerdy-chuck-norris-jokes">Nerdy Chuck Norris Jokes</h1>

<p>As an apology for not blogging much in the past 3 weeks, here are some jokes from <strong><a href="http://www.icndb.com/">the best API ever</a></strong>:</p>

<p>All arrays Chuck Norris declares are of infinite size, because Chuck Norris knows no bounds.</p>

<p>Chuck Norris doesn’t have disk latency because the hard drive knows to hurry the hell up.</p>

<p>Chuck Norris can’t test for equality because he has no equal.</p>

<p>Chuck Norris burst the dot com bubble.</p>

<p>All browsers support the hex definitions #chuck and #norris for the colors black and blue.</p>

<p>MySpace actually isn’t your space, it’s Chuck’s (he just lets you use it).</p>

<p>Chuck Norris can solve the Towers of Hanoi in one move.</p>

<p>Chuck Norris finished World of Warcraft.</p>

<p>Chuck Norris doesn’t use web standards as the web will conform to him.</p>

<p>Whiteboards are white because Chuck Norris scared them that way.</p>

<p>Chuck Norris can delete the Recycling Bin.</p>

<p>Chuck Norris’s beard can type 140 wpm.</p>

<p>Chuck Norris can unit test entire applications with a single assert.</p>

<p>Chuck Norris doesn’t need sudo, he just types “Chuck Norris” before his commands.</p>

<p>Chuck Norris doesn’t need a debugger, he just stares down the code until the bug confesses.</p>

<p>The class object inherits from Chuck Norris</p>

<p>Chuck Norris knows the last digit of PI.</p>

<p>Chuck Norris’ Internet connection is faster upstream than downstream because even data has more incentive to run from him than to him.</p>

<p>Chuck Norris’s keyboard has the Any key.</p>

<p>Chuck Norris can install iTunes without installing Quicktime.</p>

<p>Chuck Norris’s OSI network model has only one layer - Physical.</p>

<p>Chuck Norris compresses his files by doing a flying round house kick to the hard drive.</p>

<p>Chuck Norris uses canvas in IE.</p>

<p>Chuck Norris’s database has only one table, ‘Kick’, which he DROPs frequently.</p>

<p>Chuck Norris’s brain waves are suspected to be harmful to cell phones.</p>

<p>Chuck Norris sits at the stand-up.</p>

<p>Chuck Norris has never registered an account. He just logs in.</p>

<p>Code runs faster when Chuck Norris glares at it.</p>
]]></content>
  </entry>
  
</feed>
