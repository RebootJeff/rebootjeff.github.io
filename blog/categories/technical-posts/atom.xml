<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: technical posts | RebootJeff.com]]></title>
  <link href="http://RebootJeff.github.io/blog/categories/technical-posts/atom.xml" rel="self"/>
  <link href="http://RebootJeff.github.io/"/>
  <updated>2014-11-30T09:09:26-08:00</updated>
  <id>http://RebootJeff.github.io/</id>
  <author>
    <name><![CDATA[Jeff Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Web Security Fundamentals - Part 2: More Info on Modern Defense]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/09/22/web-security-fundamentals-part-2-helpful-resources/"/>
    <updated>2014-09-22T08:26:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/09/22/web-security-fundamentals-part-2-helpful-resources</id>
    <content type="html"><![CDATA[<p class="last-updated">Last updated: Sep 22nd, 2014 at 12:21PM PDT. I added <a href="#angularjs--csp">some info</a> about using CSP with AngularJS.</p>

<p>Last Thursday, I published <a href="/blog/2014/09/18/web-security-fundamentals-by-google-peeps/">a blog post</a> in which I summarized the main attack techniques (XSS, CSRF, and MITM) used by baddies to screw with the web. That post also covered two header-based solutions available to help you defend your site: CSP and HSTS. To supplement all that info, I am providing a bunch of articles, references, videos, and tools to help you learn more and take advantage of CSP and HSTS.</p>

<h1 id="content-security-policy-csp">Content Security Policy (CSP)</h1>

<h3 id="browser-support">Browser Support</h3>

<p>Cross-browser support for CSP is <a href="http://caniuse.com/#feat=contentsecuritypolicy">pretty good</a>. The latest versions of IE require the CSP header to use a special prefix (much like vendor prefixes for certain CSS features). Older crap like IE9 and below have no CSP support.</p>

<h3 id="angularjs--csp">AngularJS + CSP</h3>

<p>Sadly, CSP reduces Angular’s performance because the framework does some optimizations that run afowl of CSP. I imagine that the performance loss shouldn’t be a problem unless you have a ton of Angular expressions on the page at once (e.g., you use <code>ng-repeat</code> to generate hundreds of expressions).</p>

<p>Despite these concerns, CSP is highly recommended by the <a href="https://docs.angularjs.org/misc/faq">AngularJS FAQ page</a>. For more info on how to use CSP with AngularJS, check out the <a href="https://docs.angularjs.org/api/ng/directive/ngCsp">docs for the ngCSP directive</a>.</p>

<h3 id="further-readingreferences">Further Reading/References</h3>

<ul>
  <li><a href="http://www.html5rocks.com/en/tutorials/security/content-security-policy/">HTML5 Rocks - Intro to CSP</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/Security/CSP">MDN - CSP Topics</a></li>
  <li><a href="http://content-security-policy.com/">CSP Cheatsheet</a></li>
  <li><a href="http://engineeringblog.yelp.com/2014/09/csp_reports_at_scale.html">Yelp Engineering Blog - CSP at Scale</a></li>
</ul>

<h4 id="awesome-presentation-on-csp">Awesome Presentation on CSP</h4>
<iframe width="300" height="169" src="http://RebootJeff.github.io//www.youtube-nocookie.com/embed/pocsv39pNXA" frameborder="0" allowfullscreen=""></iframe>

<h1 id="http-strict-transport-security-hsts">HTTP Strict Transport Security (HSTS)</h1>

<h3 id="browser-support-1">Browser Support</h3>

<p>Most browsers get a passing grade when it comes to HSTS support –except for…</p>

<p><blockquote><p>Internet Explorer doesn’t support HSTS—which means that there’s basically no such thing as a secure website in IE</p><footer><strong>Electronic Frontier Foundation (EFF),</strong> <cite><a href='https://www.eff.org/deeplinks/2014/02/websites-hsts'>Websites Must Use HSTS in Order to Be Secure</a></cite></footer></blockquote></p>

<h3 id="further-readingreferences-1">Further Reading/References</h3>

<ul>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security">MDN - HSTS Overview</a></li>
  <li><a href="https://www.eff.org/deeplinks/2014/02/websites-hsts">EFF - HSTS is a must</a></li>
  <li><a href="https://www.leviathansecurity.com/blog/the-double-edged-sword-of-hsts-persistence-and-privacy/">Leviathan - Caveat for using HSTS with wildcard SSL certificates</a></li>
</ul>

<h4 id="quick-video-summary-of-mitm-and-hsts">Quick Video Summary of MITM and HSTS</h4>

<iframe width="300" height="169" src="http://RebootJeff.github.io//www.youtube-nocookie.com/embed/zEV3HOuM_Vw" frameborder="0" allowfullscreen=""></iframe>

<p><strong>Note:</strong> The video above provides <em>outdated</em> browser support info. Updated info can be found here: <a href="http://caniuse.com/#feat=stricttransportsecurity">CanIUse.com</a>.</p>

<h1 id="bonus-security-toolkit-for-express-apps">Bonus: Security Toolkit for Express Apps</h1>

<h2 id="lusca">Lusca</h2>

<p>Do you use Node.js? Does your Node.js app use Express? Want some middleware to help secure that app? Perhaps you should consider using <a href="https://github.com/krakenjs/lusca">Lusca</a>, a free module created by Paypal to quickly add and configure various security features such as CSP and HSTS. I haven’t personally tried it yet, but I plan to do so soon. Their README file makes Lusca look very easy for devs to use.</p>

<p>You can pick and choose which security features you want to enable. For example, if you’re already using <a href="http://angular-tips.com/blog/2014/05/json-web-tokens-introduction/">JSON Web Tokens</a>, then you may not want to use Lusca’s CSRF method while you take advantage of Lusca’s legacy browser XSS protection.</p>

<p>By the way, don’t get confused: Paypal uses their own open-source, Express-based framework called KrakenJS, but Lusca works with Kraken apps <em>and</em> Express apps.</p>

<h4 id="presentation-on-securing-spas-and-nodejs-apps-by-paypal-engineer">Presentation on Securing SPAs and Node.js Apps (by PayPal Engineer)</h4>

<iframe width="300" height="169" src="http://RebootJeff.github.io//www.youtube-nocookie.com/embed/40-Ccq6b5lk" frameborder="0" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Security Fundamentals - Part 1: What Google Peeps Say]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/09/18/web-security-fundamentals-by-google-peeps/"/>
    <updated>2014-09-18T10:26:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/09/18/web-security-fundamentals-by-google-peeps</id>
    <content type="html"><![CDATA[<p>Back in late May, I went to one of the most informative tech meetups ever. The <a href="http://www.meetup.com/sfhtml5/">SFHTML5 meetup group</a> organized an event at the Google SF office to cover web security. Google security researchers presented about 2.5 hours of lectures talking about common hacks/attacks, good defense, and the general state of web security.</p>

<p>You can check out the slides here: <a href="http://www.meetup.com/sfhtml5/events/179713932/#event_comment-362704742">click here if you dare.</a> You can watch the lectures here:</p>

<iframe width="300" height="185" src="http://RebootJeff.github.io//www.youtube-nocookie.com/embed/Yg5g2aMKbNA?list=PLOU2XLYxmsIIkEU3Z_xdVo9EADurbdxKa" frameborder="0" allowfullscreen=""></iframe>
<p />

<p>But if you don’t feel like sitting through 2.5 hours of lecture, allow me to summarize the best parts:</p>

<ol>
  <li>Common hacks/exploits
    <ul>
      <li>XSS</li>
      <li>CSRF</li>
      <li>MITM</li>
    </ul>
  </li>
  <li>Simple security best practices
    <ul>
      <li>Use frameworks/libraries to fight XSS for you</li>
      <li>Implement CSP to protect your front end</li>
      <li>Reinforce HTTPS with HSTS</li>
    </ul>
  </li>
</ol>

<p><strong>I won’t go into detail about any particular topic.</strong> This blog post will simply get you started in understanding fundamental web security. I suggest you use Google to research more about hacks/attacks or wait for me to post another blog post that provides a collection of links to sweet videos, references, and articles that I found particularly helpful for learning more about all these topics.</p>

<h1 id="be-afraid">Be Afraid</h1>

<p>How are websites and web apps compromised? Why are sites often “hacked”? There are three main types of attacks that you should worry about: XSS, CSRF, and MITM.</p>

<h2 id="cross-site-scripting-xss">Cross-Site Scripting (XSS)</h2>

<p>When a punk manages to get your code to run their JavaScript, that’s XSS. A simple example is when an unprotected website just accepts text from the user and adds it to the site’s HTML code. If that text is actually JS, then the site ends up sending the browser user-generated code. Damn.</p>

<p>XSS is one of the most common problems plaguing web security today. This is pretty depressing because there are plenty of frameworks and libraries that help fight XSS, but so many site operators just don’t use them and some fools even try to write their own anti-XSS code.</p>

<h2 id="cross-site-request-forgery-xsrfcsrf">Cross-Site Request Forgery (XSRF/CSRF)</h2>

<p>Let’s say a user logs into your website or web app. They are now authenticated, right? Well it depends. It could be that the user’s <em>browser</em> is authenticated. An attacker could take advantage of this authentication and get the user’s browser to submit an HTTP request crafted with nefarious intentions. The request will be accepted because the browser has the right authentication cookie data, for example.</p>

<p>How is the evil HTTP request initiated? It could be through XSS, it could be through convincing a victim to visit a malicious site that sends HTTP requests, etc. Most examples mention authenticated cookies being used by attackers.</p>

<h2 id="man-in-the-middle-mitm">Man-in-the-Middle (MITM)</h2>

<p>There’s a reason why public internet is unsafe. When you’re on a shared network, other users on the same network can try to intercept your data. Not only can man-in-the-middle attacks read your data, they can also send you bad data/code. Some attackers merely intercept web pages you’re accessing, add more advertisements, and feed you the web page with extra ads. Other attackers might intercept your attempt to visit http://www.facebook.com, give you a fake Facebook login page, and convince you to submit your login info to them.</p>

<p>Obviously, protecting a network by requiring a password to connect can help. However, if you’re using public WiFi in a coffee shop where the password is given to anybody who asks for it, then you’re in trouble again. As I shall mention, HTTPS is crucial for fighting MITM pain.</p>

<h1 id="be-somewhat-less-afraid">Be Somewhat Less Afraid</h1>

<p>It’s great if you’re aware of threats. Now it’s time to learn the basics on how to combat the threats. At the meetup, the Google peeps focused on three types of solutions: frameworks/libraries, CSP, and HTTPS with HSTS. I will also mention a couple other technologies (BONUS) for your consideration.</p>

<h2 id="frameworkslibraries-features">Frameworks/Libraries Features</h2>

<p>One of the Google experts emphasized that XSS is a much bigger problem than it should be because there are so many frameworks and libraries that help fight XSS. He said that no one should be writing their own anti-XSS libraries. Instead, use one of the many open-source solutions. Also, it’s quite possible that you’re already using a framework that has anti-XSS features that just need to be activated or configured.</p>

<p>For example, in some templating libraries, a simple syntax change will enable anti-XSS escaping features. Other templating libraries automatically escape contents by default. Some frameworks like AngularJS do “round-trip escaping on all strings for you” to protect your app from XSS and other injection attacks.</p>

<h2 id="content-security-policy-csp">Content Security Policy (CSP)</h2>

<p>A server can instruct a browser to use a whitelist to decide which resources should be loaded and which should be blocked. This is done when a server adds a CSP to a response header.</p>

<p>For example, a CSP whitelist can tell a browser to trust script files from the server and Google CDNs, images from the server and Amazon CDNs, CSS files from the server, and web fonts from Google. Everything else will be blocked. In-line JavaScript will be blocked, in-line styles will be blocked, images hosted by 3rd parties will be blocked, Flash will be blocked, iframes will be blocked, etc.</p>

<p>Your CSP can be configured based on various types of resources. Check this <a href="http://content-security-policy.com/">CSP Cheatsheet</a> for the list of options. I recommend that you investigate server-side libraries, frameworks, or middleware that can help you implement CSP. When writing your CSP, you can try starting with the most restrictive whitelist and then see what needs to be unblocked.</p>

<h3 id="reporting-feature">Reporting Feature</h3>

<p>You can also set up a reporting system to find out what your CSP has managed to block (thereby identifying failed attacks).</p>

<p>A Googler suggested using the CSP reporting feature <em>without</em> an enforced whitelist to help you examine what browsers are actually digesting when they visit your site or app. For example, you could set up a CSP that has a whitelist and just asks browsers to report non-whitelisted sources without actually blocking them. This gives you the ability to <strong>tweak your whitelist based on production usage without changing production usage</strong>. After you’re done tweaking, change the CSP to force browsers to report <em>and</em> block uninvited resources and content.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Ultra-Strict Example CSP for Express server using Lusca middleware </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
app.use(lusca.csp({
  <span class="key">policy</span>: {
    <span class="error">‘</span><span class="keyword">default</span>-src<span class="error">’</span>: <span class="error">‘</span>none<span class="error">’</span>, <span class="comment">// Block EVERYTHING</span>
  },
  <span class="key">reportOnly</span>: <span class="predefined-constant">true</span>, <span class="comment">// Record what’s being blocked</span>
  <span class="key">reportUri</span>: <span class="error">‘</span><span class="regexp"><span class="delimiter">/</span><span class="content">report-violation-endpoint’
}));
</span></span></pre></div>
</div>
 </figure></notextile></div></p>

<h2 id="https-and-http-strict-transport-security-hsts">HTTPS and HTTP Strict Transport Security (HSTS)</h2>

<h3 id="https">HTTPS</h3>

<p>To protect data transfers from MITM attacks, many sites connect to visitors via HTTPS. HTTPS connections not only protect typical payloads like JSON, but also static files and cookies that would otherwise be vulnerable to CSRF attacks. The hard part about using HTTPS is making sure no part of the site ever falls back to unencrypted HTTP.</p>

<p>For example, let’s say you’re browsing a site that provides free icons and graphics. Are all files served over HTTPS? HTML, CSS, and JavaScript files are no-brainers. What about images? Yeah that’s pretty standard too. But what about when you get an icon pack? You click a download link, and the browser starts downloading a zip file. Is that using the HTTPS protocol? It’s easy to <a href="http://httpshaming.tumblr.com/">make mistakes</a>.</p>

<h3 id="hsts">HSTS</h3>

<p>Furthermore, what if a user visits the site using HTTP first? It’s pretty common for people to type “somewebsite.com” in the URL bar and the browser will turn that into “http://somewebsite.com”. After they visit that URL, the site can redirect the visitor to “<strong>https</strong>://somewebsite.com”. But sadly, that initial connection via http wasn’t secure. It’s susceptible to a MITM attack.</p>

<p>With HTTP Strict Transport Security, the browser can automatically turn “somewebsite.com” into “<strong>https</strong>://somewebsite.com”. HSTS works by setting a header that tells the browser to enforce HTTPS for requests sent to the domain (“somewebsite.com”) for the next X number of seconds. Yes, you can set X to be a very large number such that HSTS is enforcing HTTPS for the next <em>year</em>, if you want to be cool like that.</p>

<h1 id="stay-tuned">Stay Tuned</h1>

<p>This blog post was getting pretty lengthy, so I decided to split it into two parts. In a follow-up blog post, I will provide a list of references, tutorials, and videos to help you research more about CSP, HSTS, and some complementary tools/libraries.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protractor E2E Testing: Reveal Element Blocked By Fixed Nav]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/08/17/protractor-e2e-testing-reveal-element-blocked-by-fixed-nav/"/>
    <updated>2014-08-17T14:19:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/08/17/protractor-e2e-testing-reveal-element-blocked-by-fixed-nav</id>
    <content type="html"><![CDATA[<p>End-to-end testing can be pretty tricky. There are a lot of “gotchas” that prove how hard it can be for you to truly think from the perspective of a computer. Ideally, E2E testing is all about writing tests from the perspective of a user, but that’s not going to always provide smooth sailing when writing E2E spec files.</p>

<p>This blog post is going to focus on a gotcha that rears its ugly head when you have a fixed nav bar. Nowadays, it’s pretty common to see fixed nav bars. Let’s use Twitter as an example. Twitter doesn’t use Angular, so you wouldn’t want to test their site using Protractor, but what I’m about to talk about can also be applied to WebDriver (which can be used for non-AngularJS sites).</p>

<p><img src="/images/20140817/screenshot_twitter_fixed_nav.png" alt="Twitter nav bar blocking an avatar" /></p>

<h1 id="whats-the-big-deal">What’s the big deal?</h1>

<p>Here’s the problem: <strong>what if we want Protractor to click on the avatar under the fixed nav bar as seen in the screenshot above?</strong> Obviously, a human user would intuitively scroll to find an element before clicking on it. However, Protractor’s perspective is different.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Example A - E2E spec with potential problem </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
describe(<span class="error">‘</span><span class="error">“</span>Who to Follow<span class="error">”</span> widget<span class="error">’</span>, <span class="keyword">function</span>() {
  it(<span class="error">‘</span>should include avatars that go to other Twitter profiles<span class="error">’</span>, <span class="keyword">function</span>() {
    <span class="comment">// get first (index 0) avatar using class-based CSS selector</span>
    <span class="keyword">var</span> avatar = <span class="predefined">$$</span>(<span class="error">‘</span>.who-to-follow .avatar<span class="error">’</span>).get(<span class="integer">0</span>);&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;pre&gt;&lt;code&gt;</span><span class="delimiter">/</span></span>/ Will <span class="local-variable">this</span> click always work?
avatar.click();

<span class="comment">// assertion of what to expect as a result of the click</span>
expect(blahBlahBlah).toBe(yadaYada);   }); }); </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p>When you use <code>.click()</code>, you might expect Protractor (or WebDriver, which serves as the underlying engine for Protractor) will try to scroll the web page until the target element is displayed before clicking. However, Protractor will only scroll until the target element is in the browser <em>viewport</em>.</p>

<p>Now imagine your test suite includes several tests (ooh la la!). In test #1, the actions of the test cause Protractor to scroll to the bottom of the page. In test #2, the test tries to perform the actions of <em>Example A</em>. Therefore, during test #2, Protractor tries to scroll back up the page until the target avatar is in the viewport, but this just brings the avatar directly under the fixed nav bar.</p>

<p>Then Protractor attempts a click by finding the center of the target. So even if a tiny portion of the avatar’s butt is displayed just below the bottom of the fixed nav bar, it won’t be clicked. Instead, Protractor will throw an error saying that the target could not be clicked. The error will also mention that the nav bar would receive the click event.</p>

<h1 id="well-that-sucks-now-what">Well that sucks. Now what?</h1>

<p>There are two main solutions to consider:</p>

<ol>
  <li>Un-fix the nav bar for your E2E tests. –Bleh!</li>
  <li>Add extra scrolling to your E2E tests. –Okay</li>
</ol>

<p>The first solution might not be a great idea because it’s a major alteration for the sake of testing. What if the fixed position of the nav bar causes other issues that your tests will reveal? I believe you want E2E tests to interact with a product that is very close to the product users will interact with. Changing the nav bar’s position just for testing goes against this philosophy. The main exception to this rule is animation: I believe it’s ok to disable animations for E2E testing just because it can take up a lot of time, slowing down your test/build process. Also, animations can just be very cumbersome for automated E2E systems like Protractor to deal with.</p>

<h2 id="solution-how-to-add-pre-click-scrolling">Solution: How to add pre-click scrolling</h2>

<p>The solution I use for dealing with fixed nav bars is to define and use a helper function that invokes <code>element.scrollIntoView(false)</code>. This method is a native DOM element method <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element.scrollIntoView">that you can read about on MDN</a>. You can’t simply invoke it on a Protractor ElementFinder object. You can’t call <code>elemFinder.scrollIntoView()</code> the same way you call <code>elemFinder.click()</code>.</p>

<p>Also, you may have noticed that <code>false</code> is passed into <code>scrollIntoView</code>. This tells the browser to scroll as far as it can in an attempt to align the bottom of the target element with the bottom of the scroll area. In other words, <strong>this solution only solves issues with fixed nav bars at the <em>top</em> of the viewport.</strong> Using <code>element.scrollIntoView(false)</code> will fail if your web app uses a fixed nav bar at the <em>bottom</em> of the viewport.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Example B - Solution: Helper function to align element with bottom of viewport </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Inside a separate JS file that contains helper functions…&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>// Syntax Option 1
function scrollElemToBottomOfView(elem) {
  elem.scrollIntoView(false);
}
module.exports.scrollElemFinderIntoView = function(elemFinder) {
  var promise = browser.executeScript(scrollElemToBottomOfView, elemFinder);
  return promise;
};<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>// Syntax Option 2
module.exports.scrollElemFinderIntoView = function(elemFinder) {
  var promise = browser.executeScript(function(elem) {
    elem.scrollIntoView(false);
  }, elemFinder);
  return promise;
};<span class="tag">&lt;/p&gt;</span>

&lt;p&gt;<span class="comment">// Syntax Option 3</span>
module.exports.<span class="function">scrollElemFinderIntoView</span> = <span class="keyword">function</span>(elemFinder) {
  <span class="keyword">var</span> promise = browser.executeScript(<span class="error">‘</span><span class="local-variable">arguments</span>[<span class="integer">0</span>].scrollIntoView(<span class="predefined-constant">false</span>)<span class="error">’</span>, elemFinder);
  <span class="keyword">return</span> promise;
};
</pre></div>
</div>
 </figure></notextile></div></p>

<p>There are 3 syntax options above because I just wanted to present a few different coding styles. As you can probably tell, <code>browser.executeScript()</code> accepts a couple of parameters. The first one is the script, the second one is the script’s parameter. The script can either be a function (technically speaking, it’s a function reference) or a string representation of the script’s body. Syntax Option #3 was inspired by a Stack Overflow answer for a very similar situation (it was for WebDriver, but it was easy to translate to Protractor).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Example C - Using the Solution </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Somewhere inside test code…</span>
<span class="keyword">var</span> helpers = require(<span class="error">‘</span>..<span class="regexp"><span class="delimiter">/</span><span class="content">path</span><span class="delimiter">/</span></span>to/helpers<span class="error">’</span>);
helpers.scrollElemFinderIntoView(avatar);
avatar.click();
</pre></div>
</div>
 </figure></notextile></div></p>

<p>You may have noticed that the solution in <em>Example B</em> mentions promises, but the code in <em>Example C</em> does not use them. My understanding is that it’s not crucial to use every single promise that Protractor and WebDriverJS provide. For example, even though the <code>.click()</code> method returns a promise, you don’t see devs writing Protractor tests with <code>exampleButton.click().then(function() { ... });</code> all the time.</p>

<p>So why did I mention promises in <em>Example B</em>? Just to reinforce the fact that <code>browser.executeScript()</code> will return a promise. By storing the result in a variable called “promise”, it tells other devs what to expect. That said, I admit it may not be terribly valuable. Let me know your opinion on this or any other part of the solution presented here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup for PhoneGap for Android for Reals]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/01/27/setup-for-phonegap-for-android-for-reals/"/>
    <updated>2014-01-27T17:52:00-08:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/01/27/setup-for-phonegap-for-android-for-reals</id>
    <content type="html"><![CDATA[<p><img src="/images/20140127/phonegap-android.png" alt="PhoneGap and Android have wonderful conversations" /></p>

<p>PhoneGap is a crazy tool for building “hybrid” smartphone apps. You write HTML, CSS, and JavaScript code for PhoneGap to compile into an app for iOS, Android, Windows Phone, Blackberry, etc. The app will simply use a browser embedded in a native app wrapper (hence, the “hybrid” label).</p>

<p>There are many pros and cons to developing with PhoneGap, but I won’t review those because you can find debates on the usefulness of PhoneGap and others like it so long as you have (at least) mediocre Google Fu. You do have Google Fu, <a href="http://lmgtfy.com/?q=google+fu">right</a>? Don’t forget that Adobe PhoneGap is oftentimes referred to as Apache Cordova (even in modern documentation).</p>

<p>Anyway, this blog post is meant to disclose the growing pains you could encounter upon trying PhoneGap for the first time for Android development. Although if you’re developing for iOS, you’ll still face annoyances like having to disable WebView bounce (why doesn’t PhoneGap do that for you by default?!).</p>

<p>There were many unspoken hoops I had to jump through to get it working for me when I worked on an <a href="https://github.com/RebootJeff/phone-tag-phonegap">outdoor video game app</a>. I really wish someone had warned me about these hoops, but my loss is your gain.</p>

<h1 id="installfest">Installfest</h1>

<p>I’m sure you were told to just install the Android SDK plus PhoneGap and then you’d be off to the races, right? <a href="http://imgur.com/gallery/4clw90A">WRONG</a>. So wrong. Incredibly wrong. Maybe it’s because my personal dev machine is running Ubuntu, but I had to install many missing pieces to the PhoneGap puzzle. Some PhoneGap tutorials cover some of these dev components, but I don’t remember seeing one that covered all of them so here you go:</p>

<ul>
  <li>Apache Ant: Java library/tool</li>
  <li>JRE: Java Runtime Environment</li>
  <li>JDK: Java Development Kit</li>
  <li>Android SDK: platform Software Dev Kit (make sure it comes with Eclipse)</li>
</ul>

<p>After you install the Android SDK, you probably want to make sure you have the right API version. I used API 17 for supporting phones with Android v4.2. Use the SDK manager to install the desired API. Type <code>android</code> in a terminal to open the SDK manager. If that doesn’t work, it’s probably because you have a problem that will be solved by reading the next section of this blog post.</p>

<h1 id="command-line-goodness">Command Line Goodness</h1>

<p>Everyone wants to use command line tools. In fact, PhoneGap wants to use some commands for Android development, but SURPRISE! Those commands are not available until you manually edit your .bash_profile file. You may have to do some searching to find where your .bash_profile sleeps at night, but mine was in my home directory (aka ~/.bash_profile). Keep in mind that it is a hidden file, so you need to enable viewing hidden files (in case you didn’t know). I created a Development folder for my Android dev tools. Then I added the following lines to my .bash_profile (make sure you replace my filepath with your filepath):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>.bash_profile </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
# Adds Android SDK tools to command line
export PATH=$PATH:/home/myUserName/Development/adt-bundle-linux-x86&lt;em&gt;64-20131030/sdk/tools
export PATH=$PATH:/home/myUserName/Development/adt-bundle-linux-x86&lt;/em&gt;64-20131030/sdk/platform-tools
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Now, you’re finally set to begin development with PhoneGap. However, if you want certain features to work, you may have to modify some XML files. Read on, my relative from a common-and-super-old ancestor.</p>

<h1 id="xml-file-modifications">XML File Modifications</h1>

<p>Want your app to access external networks? Getting origin errors? Try the sweet taste of the <code>&lt;access origin&gt;</code> tag. Want to enable geolocation? Try the soothing sounds eminating from the <code>&lt;feature&gt;</code> tag. These tags need to be edited/added to the <code>config.xml</code> file of your PhoneGap project. Put your Google Fu to practice if you need more details. Just keep in mind that if you run into various problems in the future, the <code>config.xml</code> file is yet another possible source of irritation to debug.</p>

<p>Here’s a snippet from my config file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>config.xml </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
# Adds Android SDK tools to command line
<span class="tag">&lt;access</span> <span class="attribute-name">origin</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://yourserver.com</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="tag">&lt;feature</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://api.phonegap.com/1.0/geolocation</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
</pre></div>
</div>
 </figure></notextile></div></access></p>

<p>By the way, it’s best practice to declare what kind of voodoo your app is utilizing. In case of GPS usage, modify your <code>/platforms/android/AndroidManifest.xml</code> file as follows:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>/platforms/android/AndroidManifest.xml </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="tag">&lt;uses-permission</span> <span class="attribute-name">android:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">android.permission.ACCESS_COARSE_LOCATION</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
<span class="tag">&lt;uses-permission</span> <span class="attribute-name">android:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">android.permission.ACCESS_FINE_LOCATION</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
<span class="tag">&lt;uses-permission</span> <span class="attribute-name">android:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">android.permission.ACCESS_LOCATION_EXTRA_COMMANDS</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<h1 id="down-the-rabbit-hole">Down the Rabbit Hole</h1>

<p>Using PhoneGap for the first time can be incredibly frustrating. I ran into so many small issues when learning how to use it. There can be problems with connecting a device to your computer, enabling certain phone features, dealing with compatibility quirks, etc.</p>

<h2 id="connecting-an-android-device">Connecting an Android Device</h2>
<p>Type <code>adb devices</code> into a terminal after you use a USB cable to attach an Android phone to your computer. Make sure that the phone is put into <strong>USB Debugging mode</strong>. You can find that mode in the developer options. Different versions of Android have different ways to access the developer options.</p>

<p>If you don’t see any devices listed, you may need to investigate drivers for your phone. Sometimes there are other problems with adb that can be solved be restarting: try typing <code>adb kill-server &amp;&amp; adb start-server</code> in your terminal (possibly with <code>sudo</code>).</p>

<h2 id="plugins-not-included">Plugins Not Included</h2>
<p>When using GPS, I ran into some blog posts claiming that it’s necessary to install a geolocation plugin. In my experience, it’s not needed, but for other features, it may be a different story. If you’re trying to access a hardware sensor or simply want to use a feature someone has already implemented (e.g., bar code scanner), then you may need to investigate plugins. This might be helpful: <a href="http://cordova.apache.org/news/2013/10/21/cordova-registry.html">About Cordova plugin registry</a></p>

<h2 id="android-fragmentation-strikes-again">Android Fragmentation Strikes Again</h2>
<p>Be warned: PhoneGap has different bugs for different versions of Android. For example, the PhoneGap app I worked on was built with Android API 17 (aka 4.2 aka Jelly Bean). I tested the app on a phone that uses Android 4.2.2 and a second phone that uses Android 4.4 (aka KitKat). The Jelly Bean phone had no functional issues with the app, but some CSS rules weren’t being applied correctly, which created some off-center layouts. The KitKat phone had no CSS issues, so it looked nice, but it had some functional issues regarding touch gestures. However, that could’ve been a problem with <a href="http://eightmedia.github.io/hammer.js/">Hammer.js</a>.</p>

<p>FYI, my team also encountered a problem in Android 4.4 and iOS 7 where scrolling wasn’t available for a <code>&lt;section&gt;</code> that had overflowing text. We tried the usual CSS rules, but to no avail.</p>

<h1 id="links-links">Links? Links!</h1>

<p>I saved a few links that I found particularly useful. I shall deposit said links right here because I can and totally not for SEO purposes.</p>

<ul>
  <li><a href="http://yaizabailen.com/setting-up-an-android-app-build-environment-with-android-sdk-and-phonegap-in-ubuntu-13-04/">Setting Up An Android App Build Environment With Android SDK and PhoneGap in Ubuntu 13.04</a></li>
  <li><a href="http://stackoverflow.com/questions/3127539/ubuntu-android-device-debug/3129903#3129903">StackOverflow: restarting adb</a></li>
  <li><a href="http://stackoverflow.com/questions/6116724/how-to-use-android-phone-instead-of-emulator">StackOverflow: USB debugging mode</a></li>
  <li><a href="http://devgirl.org/2013/09/05/phonegap-3-0-stuff-you-should-know/">PhoneGap 3.0 - Stuff You Should Know</a></li>
</ul>

<h1 id="to-phonegap-or-not-to-phonegap">To PhoneGap or Not to PhoneGap</h1>

<p>So is PhoneGap worth the trouble? This blog post probably makes it sound like there’s a lot of shit to scoop before uncovering any treasure. That’s…mostly true. If rapid development is a priority, then PhoneGap is still a solid choice when you lack Objective-C and Java experience. I’ve heard from colleagues that learning Objective-C is its own special kind of hell, so that’s a +1 for PhoneGap, I guess.</p>

<p>To me, tech enthusiasts need to look at the bigger picture: imagine a world where mobile web apps dominate rather than having native apps dominate the smartphone landscape. Firefox OS is actually trying to embrace JavaScript, but why does it matter? Consider the differences in distribution. Forget app marketplaces. Forget Apple acting as a gatekeeper for iOS apps. Imagine that your app is as available as any other website. Web apps are becoming more and more powerful. There are new frameworks (e.g., <a href="http://famo.us/">Famous</a> and another brand new one that I can’t remember at the moment) that make it possible to replicate the oohlala of the much-lauded Yahoo! Weather native app.</p>

<p>The problem is that web apps for mobile devices can’t yet access native notifications. This is a huge obstacle for mobile web app dominance. Companies want their apps to have notifications to enhance user engagement and fight churn. Users want their apps to have notifications because it makes smartphones more helpful (although the line between helpful and spammy seems slimmer than my chances of becoming a guitar master). That said, web apps are getting better at using phones’ GPS sensors, cameras, accelerometers, etc. Hopefully the barrier between native app and mobile web app will continue to whither and eventually die like smallpox. In the words of unoriginal coaches every where, “WE CAN DO IT!”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Queues & Stacks from Scratch with JS Patterns]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/01/04/queues-stacks-javascript-class-patterns/"/>
    <updated>2014-01-04T16:04:00-08:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/01/04/queues-stacks-javascript-class-patterns</id>
    <content type="html"><![CDATA[<p>In my <a href="/blog/2013/12/26/queues-and-stacks-in-javascript/">previous post</a>, I began my quest to help noob programmers by introducing the basic computer science topic of data structures. I provided a quick overview of queues and stacks, so please read all about ‘em before engaging your eyeballs with this blog post. This time around, we’ll check out four different patterns for creating classes in JavaScript while learning how to build stacks and queues from scratch.</p>

<p>Before we go, I should warn you that I’m going to focus on describing the class instantiation patterns rather than thoroughly explaining the implementation of the data structures. Just keep in mind that we are going to explore building stacks and queues with objects rather than arrays. More specifically, we will use a property called <code>storage</code> that is an object, not an array. Now I know what you’re pondering.</p>

<blockquote>
  <p>Why?</p>
</blockquote>

<p>That is a beautiful question. Please ask it all the time (but please don’t troll me by leaving “Why?” in the comments section of this blog post). In this case, the answer to “Why?” may be a tad disatisfying. The answer is “because we can”, but don’t worry! It’ll be fun. Now, let’s start instantiating some motherhugging classes.</p>

<h1 id="functional-instantiation">1. Functional Instantiation</h1>

<p>The simplest way to implement classes is with a “maker” function that creates a new instance of the class and returns that instance so it can be stored as a variable. The new instance is just like any other JavaScript object. It can have properties that store relevant information about the instance (e.g., with a <code>Car</code> class, instances might have a <code>price</code> property). It can also have properties that store functions. These functions serve as <strong>methods</strong> that are tightly associated with the instance.</p>

<h4 id="characteristics">Characteristics</h4>

<ul>
  <li>Creates new copies of the same functions when creating a new instance of the same class. This lack of reuse takes up more memory and can leave an unsavory taste in some programmers’ mouths.</li>
  <li>There is no quick way to modify all instances of the class after they’ve been created. This will become more clear after examining the other instantiation tactics.</li>
  <li>Private variables can be created/used by harnessing <strong>closure scope</strong> superpowers, but I won’t get into that today.</li>
  <li>If you understand JavaScript functions and objects, then you can understand classes implemented via functional instantiation (other instantiation techniques require knowledge of <code>this</code> and/or <code>new</code>).</li>
  <li>Could be used to create callable instances (i.e., the class could return a function rather than an object filled with properties).</li>
</ul>

<h4 id="example-code">Example code:</h4>
<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Stack from scratch (functional instantiation) </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">var</span> <span class="function">makeStack</span> = <span class="keyword">function</span>(comment){
  <span class="comment">// Provide private variables in closure scope</span>
  <span class="keyword">var</span> size = <span class="integer">0</span>;
  <span class="keyword">var</span> storage = {};
  <span class="keyword">var</span> instance = {};  <span class="comment">// Start building an instance of Stack class&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>// Add extra properties for the hell of it
  instance.annotation = comment;<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>// Add functions to the instance to serve as methods
  // (they will provide an interface to the stack’s storage)
  instance.push = function(data){
    storage[size] = data;
    size++;
  };<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>instance.pop = function(){
    if(size <span class="entity">&amp;gt;</span> 0){  // Only perform pop actions if the stack has data
      size–;
      var data = storage[size];
      delete storage[size];  // Don’t forget to delete from storage!
      return data;
    }
  };<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>instance.size = function(){
    return size;
  };<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>return instance;
};<span class="tag">&lt;/p&gt;</span>

&lt;p&gt;<span class="comment">// Create and use an instance of the Stack class</span>
<span class="keyword">var</span> myStack = makeStack(<span class="error">“</span>I<span class="error">’</span>m a stack! Whoa.<span class="error">”</span>);
myStack.push(<span class="integer">1</span>);              <span class="comment">// myStack stores 1</span>
myStack.push(<span class="error">‘</span>b<span class="error">’</span>);            <span class="comment">// myStack stores 1 and ‘b’</span>
myStack.push(<span class="integer">3</span>);              <span class="comment">// myStack stores 1, ‘b’, and 3</span>
console.log(myStack.pop());   <span class="comment">// logs 3</span>
console.log(myStack.size());  <span class="comment">// logs 2</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<h1 id="functional-instantiation-wshared-methods">2. Functional Instantiation w/Shared Methods</h1>

<p>By utilizing an object filled with methods, several classes can be created that have the same methods without creating new copies of said methods. The classes will use their own function references to refer to the same set of shared methods. Therefore, using shared methods eats up less memory than functional instantiation <em>without</em> shared methods.</p>

<h4 id="characteristics-1">Characteristics</h4>

<ul>
  <li>Reuses functions (which conserves memory) by getting function references from a utility such as <a href="http://underscorejs.org/#extend">Underscore.js</a>’s <code>_.extend(instance,methods)</code>.</li>
  <li>Retains the same benefits as functional instantiation <em>without</em> shared methods.</li>
</ul>

<h4 id="example-code-1">Example code:</h4>
<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Queue from scratch (functional instantiation with shared methods) </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">var</span> <span class="function">makeQueue</span> = <span class="keyword">function</span>(queueName, comment){&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;</span><span class="delimiter">/</span></span>/ You can use object literal notation <span class="keyword">for</span> &lt;code&gt;instance&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">code&gt; (instead of dot notation),
  </span><span class="delimiter">/</span></span>/ but then we have to use &lt;code&gt;<span class="local-variable">this</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">code&gt; and we lose the privacy of closure scope
  </span><span class="delimiter">/</span></span>/ (e.g., <span class="tag">&lt;code&gt;</span>storage<span class="tag">&lt;/code&gt;</span> is no longer <span class="reserved">private</span>), so <span class="local-variable">this</span> kind of sucks.
  <span class="keyword">var</span> instance = {
    <span class="key">name</span>: queueName,
    <span class="key">annotation</span>: comment,
    <span class="key">head</span>: <span class="integer">0</span>,
    <span class="key">tail</span>: <span class="integer">0</span>,
    <span class="key">storage</span>: {}
  };&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;</span><span class="delimiter">/</span></span>/ The _.extend() <span class="keyword">function</span> <span class="function">is</span> provided by the Underscore.js library
  _.extend(instance, sharedQueueMethods);&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;return instance;
};&lt;</span><span class="delimiter">/</span></span>p&gt;

<span class="tag">&lt;p&gt;</span>// The object below stores methods that could be shared with other classes
var sharedQueueMethods = {
  enqueue: function(data){
    this.storage[this.tail] = data;
    this.tail++;
    // The tail points to the next EMPTY “spot” for data to be stored
    // it does NOT point to the last OCCUPIED “spot” in the storage
  },
  dequeue: function(){
    if(this.head <span class="entity">&amp;lt;</span>= this.tail){  // Check the queue’s size
      var data = this.storage[this.head];<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;pre&gt;</span><span class="tag">&lt;code&gt;</span>  // Deleting is even more important for queues than for stacks
  // (memory leaks are a bigger threat for queues)
  delete this.storage[this.head];
  this.head++;
  return data;
}   },   size: function(){
return this.tail - this.head;   } };
<span class="tag">&lt;/code&gt;</span><span class="tag">&lt;/pre&gt;</span>

&lt;p&gt;<span class="comment">// Create and use an instance of the Queue class:</span>
<span class="keyword">var</span> myCoolQueue = makeQueue(<span class="error">“</span>Jeff<span class="error">’</span>s Queue<span class="error">”</span>,<span class="error">’</span>Hello, world!<span class="error">’</span>);
myCoolQueue.enqueue(<span class="error">‘</span>a<span class="error">’</span>);             <span class="comment">// myCoolQueue stores ‘a’</span>
myCoolQueue.enqueue(<span class="integer">2</span>);               <span class="comment">// myCoolQueue stores ‘a’ and 2</span>
myCoolQueue.enqueue(<span class="error">‘</span>c<span class="error">’</span>);             <span class="comment">// myCoolQueue stores ‘a’, 2, and ‘c’</span>
console.log(myCoolQueue.dequeue());   <span class="comment">// output: ‘a’</span>
console.log(myCoolQueue.size());      <span class="comment">// output: 2</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<h1 id="prototypal-instantiation">3. Prototypal Instantiation</h1>

<p>The key to prototypal instantiation is the use of <code>Object.create()</code> to utilize shared methods. Unlike functional instantiation with shared methods, there is no need to use an <code>extend()</code> function.</p>

<p>While it’s possible to use a prototype’s functions with <code>Object.create(ExampleClass.prototype);</code>, it’s also possible to (ironically) avoid the word “prototype” altogether by using <code>Object.create(sharedMethods);</code>.</p>

<h4 id="characteristics-2">Characteristics</h4>

<ul>
  <li>Reuses shared functions via <code>Object.create(Example.prototype)</code> or <code>Object.create(objectOfFunctions)</code>.</li>
  <li>Unlike functional instantiation, function references are shared. Each instance of the class does not get its own function references that point to the shared methods. This saves even more memory (although it is a very small improvement).</li>
  <li>Unlike functional instantiation, there is no way to use closure scope to enforce privacy of variables.</li>
  <li>Variables are stored on the returned object (aka <code>instance</code>), which means the shared stack methods need to use the keyword <code>this</code> to access the necessary data. It’s not a huge bummer, but if you’re a beginner, then <code>this</code> can be a confusing concept.</li>
  <li>Can use prototype chains for dynamic method modification and inheritance (subclasses!).</li>
</ul>

<h4 id="example-code-2">Example code:</h4>
<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Stack from scratch (prototypal instantiation) </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">var</span> <span class="function">makeStack</span> = <span class="keyword">function</span>(comment){
  <span class="keyword">var</span> instance = Object.create(sharedStackMethods);
  instance.annotation = comment;
  instance.size = <span class="integer">0</span>;
  instance.storage = {};&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;return instance;
};&lt;</span><span class="delimiter">/</span></span>p&gt;

<span class="tag">&lt;p&gt;</span>var sharedStackMethods = {
  push: function(data){
    this.storage[this.size] = data;
    this.size++;
  },
  pop: function(){
    if(this.size <span class="entity">&amp;gt;</span> 0){
      this.size–;
      var data = this.storage[this.size];
      delete this.storage[this.size];
      return data;
    }
  },
  size: function(){
    return this.size;
  }
};<span class="tag">&lt;/p&gt;</span>

&lt;p&gt;<span class="comment">// Create an instance of the Stack class:</span>
<span class="keyword">var</span> myStack = makeStack(<span class="error">“</span>I<span class="error">’</span>m a stack! Whoa.<span class="error">”</span>);
<span class="comment">// Using the instance doesn’t change from one class pattern to another</span>
myStack.push(<span class="integer">1</span>);              <span class="comment">// myStack stores 1</span>
myStack.push(<span class="error">‘</span>b<span class="error">’</span>);            <span class="comment">// myStack stores 1 and ‘b’</span>
myStack.push(<span class="integer">3</span>);              <span class="comment">// myStack stores 1, ‘b’, and 3</span>
console.log(myStack.pop());   <span class="comment">// logs 3</span>
console.log(myStack.size());  <span class="comment">// logs 2</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<h1 id="pseudoclassical-instantiation">4. Pseudoclassical Instantiation</h1>

<p>This is the most commonly used class pattern. It’s also the most complicated because, in addition to using the <code>this</code> keyword, it involves two concepts that the other class patterns don’t require: the <code>new</code> keyword and prototypes. Prototypal instantiation uses prototypes via <code>Object.create()</code>, but pseudoclassical instantiation needs you to explicitly type out <code>ClassName.prototype.methodName</code>, which is just another source of confusion for beginners.</p>

<p>Also, it’s the only class pattern that uses a true <a href="http://en.wikipedia.org/wiki/Constructor_(object-oriented_programming)">constructor</a> for creating new instances. Other class patterns use instantiator functions that explicitly return a new instance. The pseudoclassical class pattern does not perform such a return thanks to the <code>new</code> keyword.</p>

<h4 id="characteristics-3">Characteristics</h4>

<ul>
  <li>Uses prototype chains to provide methods to instances of a class.</li>
  <li>Allows for dynamic method modification and inheritance (subclasses!) via prototype chains.</li>
  <li>Refers to the instance that’s being created with the <code>this</code> keyword.</li>
  <li>Needs the <code>new</code> keyword to make an instance of a class.</li>
  <li>Has a true constructor that is named with a noun rather than a verb. The name is capitalized.</li>
  <li>Is the most commonly used class pattern.</li>
</ul>

<h4 id="example-code-3">Example code:</h4>
<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Queue from scratch (pseudoclassical instantiation) </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Class name is now a noun (no verb), and it starts with an upper case letter</span>
<span class="keyword">var</span> <span class="function">Queue</span> = <span class="keyword">function</span>(queueName, comment){
  <span class="comment">// Notice the use of ‘this’</span>
  <span class="local-variable">this</span>.name = queueName,
  <span class="local-variable">this</span>.annotation = comment,
  <span class="local-variable">this</span>.head: <span class="integer">0</span>,
  <span class="local-variable">this</span>.tail: <span class="integer">0</span>,
  <span class="local-variable">this</span>.storage: {}
};&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;</span><span class="delimiter">/</span></span>/ Notice the use of <span class="error">‘</span>prototype<span class="error">’</span>
Queue.prototype.<span class="function">enqueue</span> = <span class="keyword">function</span>(data){
  <span class="local-variable">this</span>.storage[<span class="local-variable">this</span>.tail] = data;
  <span class="local-variable">this</span>.tail++;
};
Queue.prototype.<span class="function">dequeue</span> = <span class="keyword">function</span>(){
  <span class="keyword">if</span>(<span class="local-variable">this</span>.head &amp;lt;= <span class="local-variable">this</span>.tail){
    <span class="keyword">var</span> data = <span class="local-variable">this</span>.storage[<span class="local-variable">this</span>.head];
    <span class="keyword">delete</span> <span class="local-variable">this</span>.storage[<span class="local-variable">this</span>.head];
    <span class="local-variable">this</span>.head++;
    <span class="keyword">return</span> data;
  }
};
Queue.prototype.<span class="function">size</span> = <span class="keyword">function</span>(){
  <span class="keyword">return</span> <span class="local-variable">this</span>.tail - <span class="local-variable">this</span>.head;
};&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;</span><span class="delimiter">/</span></span>/ Create an instance of the Stack <span class="reserved">class</span> by using the <span class="error">‘</span><span class="keyword">new</span><span class="error">’</span> keyword:
<span class="keyword">var</span> myCoolQueue = <span class="keyword">new</span> Queue(<span class="error">“</span>Jeff<span class="error">’</span>s Queue<span class="error">”</span>,<span class="error">”</span>The grass is always greener, but just as hard to mowww!<span class="error">”</span>);
<span class="comment">// Use the instance just like in previous examples</span>
myCoolQueue.enqueue(<span class="error">‘</span>a<span class="error">’</span>);             <span class="comment">// myCoolQueue stores ‘a’</span>
myCoolQueue.enqueue(<span class="integer">2</span>);               <span class="comment">// myCoolQueue stores ‘a’ and 2</span>
myCoolQueue.enqueue(<span class="error">‘</span>c<span class="error">’</span>);             <span class="comment">// myCoolQueue stores ‘a’, 2, and ‘c’</span>
console.log(myCoolQueue.dequeue());   <span class="comment">// output: ‘a’</span>
console.log(myCoolQueue.size());      <span class="comment">// output: 2</span>
</pre></div>
</div>
 </figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
