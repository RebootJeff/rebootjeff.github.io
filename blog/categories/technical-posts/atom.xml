<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: technical posts | RebootJeff.com]]></title>
  <link href="http://RebootJeff.github.io/blog/categories/technical-posts/atom.xml" rel="self"/>
  <link href="http://RebootJeff.github.io/"/>
  <updated>2014-05-10T14:19:49-07:00</updated>
  <id>http://RebootJeff.github.io/</id>
  <author>
    <name><![CDATA[Jeff Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup for PhoneGap for Android for Reals]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/01/27/setup-for-phonegap-for-android-for-reals/"/>
    <updated>2014-01-27T17:52:00-08:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/01/27/setup-for-phonegap-for-android-for-reals</id>
    <content type="html"><![CDATA[<p><img src="/images/20140127/phonegap-android.png" alt="PhoneGap and Android have wonderful conversations" /></p>

<p>PhoneGap is a crazy tool for building “hybrid” smartphone apps. You write HTML, CSS, and JavaScript code for PhoneGap to compile into an app for iOS, Android, Windows Phone, Blackberry, etc. The app will simply use a browser embedded in a native app wrapper (hence, the “hybrid” label).</p>

<p>There are many pros and cons to developing with PhoneGap, but I won’t review those because you can find debates on the usefulness of PhoneGap and others like it so long as you have (at least) mediocre Google Fu. You do have Google Fu, <a href="http://lmgtfy.com/?q=google+fu">right</a>? Don’t forget that Adobe PhoneGap is oftentimes referred to as Apache Cordova (even in modern documentation).</p>

<p>Anyway, this blog post is meant to disclose the growing pains you could encounter upon trying PhoneGap for the first time for Android development. Although if you’re developing for iOS, you’ll still face annoyances like having to disable WebView bounce (why doesn’t PhoneGap do that for you by default?!).</p>

<p>There were many unspoken hoops I had to jump through to get it working for me when I worked on an <a href="https://github.com/RebootJeff/phone-tag-phonegap">outdoor video game app</a>. I really wish someone had warned me about these hoops, but my loss is your gain.</p>

<h1 id="installfest">Installfest</h1>

<p>I’m sure you were told to just install the Android SDK plus PhoneGap and then you’d be off to the races, right? <a href="http://imgur.com/gallery/4clw90A">WRONG</a>. So wrong. Incredibly wrong. Maybe it’s because my personal dev machine is running Ubuntu, but I had to install many missing pieces to the PhoneGap puzzle. Some PhoneGap tutorials cover some of these dev components, but I don’t remember seeing one that covered all of them so here you go:</p>

<ul>
  <li>Apache Ant: Java library/tool</li>
  <li>JRE: Java Runtime Environment</li>
  <li>JDK: Java Development Kit</li>
  <li>Android SDK: platform Software Dev Kit (make sure it comes with Eclipse)</li>
</ul>

<p>After you install the Android SDK, you probably want to make sure you have the right API version. I used API 17 for supporting phones with Android v4.2. Use the SDK manager to install the desired API. Type <code>android</code> in a terminal to open the SDK manager. If that doesn’t work, it’s probably because you have a problem that will be solved by reading the next section of this blog post.</p>

<h1 id="command-line-goodness">Command Line Goodness</h1>

<p>Everyone wants to use command line tools. In fact, PhoneGap wants to use some commands for Android development, but SURPRISE! Those commands are not available until you manually edit your .bash_profile file. You may have to do some searching to find where your .bash_profile sleeps at night, but mine was in my home directory (aka ~/.bash_profile). Keep in mind that it is a hidden file, so you need to enable viewing hidden files (in case you didn’t know). I created a Development folder for my Android dev tools. Then I added the following lines to my .bash_profile (make sure you replace my filepath with your filepath):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>.bash_profile </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
# Adds Android SDK tools to command line
export PATH=$PATH:/home/myUserName/Development/adt-bundle-linux-x86&lt;em&gt;64-20131030/sdk/tools
export PATH=$PATH:/home/myUserName/Development/adt-bundle-linux-x86&lt;/em&gt;64-20131030/sdk/platform-tools
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Now, you’re finally set to begin development with PhoneGap. However, if you want certain features to work, you may have to modify some XML files. Read on, my relative from a common-and-super-old ancestor.</p>

<h1 id="xml-file-modifications">XML File Modifications</h1>

<p>Want your app to access external networks? Getting origin errors? Try the sweet taste of the <code>&lt;access origin&gt;</code> tag. Want to enable geolocation? Try the soothing sounds eminating from the <code>&lt;feature&gt;</code> tag. These tags need to be edited/added to the <code>config.xml</code> file of your PhoneGap project. Put your Google Fu to practice if you need more details. Just keep in mind that if you run into various problems in the future, the <code>config.xml</code> file is yet another possible source of irritation to debug.</p>

<p>Here’s a snippet from my config file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>config.xml </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
# Adds Android SDK tools to command line
<span class="tag">&lt;access</span> <span class="attribute-name">origin</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://yourserver.com</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="tag">&lt;feature</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://api.phonegap.com/1.0/geolocation</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
</pre></div>
</div>
 </figure></notextile></div></access></p>

<p>By the way, it’s best practice to declare what kind of voodoo your app is utilizing. In case of GPS usage, modify your <code>/platforms/android/AndroidManifest.xml</code> file as follows:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>/platforms/android/AndroidManifest.xml </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="tag">&lt;uses-permission</span> <span class="attribute-name">android:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">android.permission.ACCESS_COARSE_LOCATION</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
<span class="tag">&lt;uses-permission</span> <span class="attribute-name">android:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">android.permission.ACCESS_FINE_LOCATION</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
<span class="tag">&lt;uses-permission</span> <span class="attribute-name">android:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">android.permission.ACCESS_LOCATION_EXTRA_COMMANDS</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<h1 id="down-the-rabbit-hole">Down the Rabbit Hole</h1>

<p>Using PhoneGap for the first time can be incredibly frustrating. I ran into so many small issues when learning how to use it. There can be problems with connecting a device to your computer, enabling certain phone features, dealing with compatibility quirks, etc.</p>

<h2 id="connecting-an-android-device">Connecting an Android Device</h2>
<p>Type <code>adb devices</code> into a terminal after you use a USB cable to attach an Android phone to your computer. Make sure that the phone is put into <strong>USB Debugging mode</strong>. You can find that mode in the developer options. Different versions of Android have different ways to access the developer options.</p>

<p>If you don’t see any devices listed, you may need to investigate drivers for your phone. Sometimes there are other problems with adb that can be solved be restarting: try typing <code>adb kill-server &amp;&amp; adb start-server</code> in your terminal (possibly with <code>sudo</code>).</p>

<h2 id="plugins-not-included">Plugins Not Included</h2>
<p>When using GPS, I ran into some blog posts claiming that it’s necessary to install a geolocation plugin. In my experience, it’s not needed, but for other features, it may be a different story. If you’re trying to access a hardware sensor or simply want to use a feature someone has already implemented (e.g., bar code scanner), then you may need to investigate plugins. This might be helpful: <a href="http://cordova.apache.org/news/2013/10/21/cordova-registry.html">About Cordova plugin registry</a></p>

<h2 id="android-fragmentation-strikes-again">Android Fragmentation Strikes Again</h2>
<p>Be warned: PhoneGap has different bugs for different versions of Android. For example, the PhoneGap app I worked on was built with Android API 17 (aka 4.2 aka Jelly Bean). I tested the app on a phone that uses Android 4.2.2 and a second phone that uses Android 4.4 (aka KitKat). The Jelly Bean phone had no functional issues with the app, but some CSS rules weren’t being applied correctly, which created some off-center layouts. The KitKat phone had no CSS issues, so it looked nice, but it had some functional issues regarding touch gestures. However, that could’ve been a problem with <a href="http://eightmedia.github.io/hammer.js/">Hammer.js</a>.</p>

<p>FYI, my team also encountered a problem in Android 4.4 and iOS 7 where scrolling wasn’t available for a <code>&lt;section&gt;</code> that had overflowing text. We tried the usual CSS rules, but to no avail.</p>

<h1 id="links-links">Links? Links!</h1>

<p>I saved a few links that I found particularly useful. I shall deposit said links right here because I can and totally not for SEO purposes.</p>

<ul>
  <li><a href="http://yaizabailen.com/setting-up-an-android-app-build-environment-with-android-sdk-and-phonegap-in-ubuntu-13-04/">Setting Up An Android App Build Environment With Android SDK and PhoneGap in Ubuntu 13.04</a></li>
  <li><a href="http://stackoverflow.com/questions/3127539/ubuntu-android-device-debug/3129903#3129903">StackOverflow: restarting adb</a></li>
  <li><a href="http://stackoverflow.com/questions/6116724/how-to-use-android-phone-instead-of-emulator">StackOverflow: USB debugging mode</a></li>
  <li><a href="http://devgirl.org/2013/09/05/phonegap-3-0-stuff-you-should-know/">PhoneGap 3.0 - Stuff You Should Know</a></li>
</ul>

<h1 id="to-phonegap-or-not-to-phonegap">To PhoneGap or Not to PhoneGap</h1>

<p>So is PhoneGap worth the trouble? This blog post probably makes it sound like there’s a lot of shit to scoop before uncovering any treasure. That’s…mostly true. If rapid development is a priority, then PhoneGap is still a solid choice when you lack Objective-C and Java experience. I’ve heard from colleagues that learning Objective-C is its own special kind of hell, so that’s a +1 for PhoneGap, I guess.</p>

<p>To me, tech enthusiasts need to look at the bigger picture: imagine a world where mobile web apps dominate rather than having native apps dominate the smartphone landscape. Firefox OS is actually trying to embrace JavaScript, but why does it matter? Consider the differences in distribution. Forget app marketplaces. Forget Apple acting as a gatekeeper for iOS apps. Imagine that your app is as available as any other website. Web apps are becoming more and more powerful. There are new frameworks (e.g., <a href="http://famo.us/">Famous</a> and another brand new one that I can’t remember at the moment) that make it possible to replicate the oohlala of the much-lauded Yahoo! Weather native app.</p>

<p>The problem is that web apps for mobile devices can’t yet access native notifications. This is a huge obstacle for mobile web app dominance. Companies want their apps to have notifications to enhance user engagement and fight churn. Users want their apps to have notifications because it makes smartphones more helpful (although the line between helpful and spammy seems slimmer than my chances of becoming a guitar master). That said, web apps are getting better at using phones’ GPS sensors, cameras, accelerometers, etc. Hopefully the barrier between native app and mobile web app will continue to whither and eventually die like smallpox. In the words of unoriginal coaches every where, “WE CAN DO IT!”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Queues & Stacks from Scratch with JS Patterns]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/01/04/queues-stacks-javascript-class-patterns/"/>
    <updated>2014-01-04T16:04:00-08:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/01/04/queues-stacks-javascript-class-patterns</id>
    <content type="html"><![CDATA[<p>In my <a href="/blog/2013/12/26/queues-and-stacks-in-javascript/">previous post</a>, I began my quest to help noob programmers by introducing the basic computer science topic of data structures. I provided a quick overview of queues and stacks, so please read all about ‘em before engaging your eyeballs with this blog post. This time around, we’ll check out four different patterns for creating classes in JavaScript while learning how to build stacks and queues from scratch.</p>

<p>Before we go, I should warn you that I’m going to focus on describing the class instantiation patterns rather than thoroughly explaining the implementation of the data structures. Just keep in mind that we are going to explore building stacks and queues with objects rather than arrays. More specifically, we will use a property called <code>storage</code> that is an object, not an array. Now I know what you’re pondering.</p>

<blockquote>
  <p>Why?</p>
</blockquote>

<p>That is a beautiful question. Please ask it all the time (but please don’t troll me by leaving “Why?” in the comments section of this blog post). In this case, the answer to “Why?” may be a tad disatisfying. The answer is “because we can”, but don’t worry! It’ll be fun. Now, let’s start instantiating some motherhugging classes.</p>

<h1 id="functional-instantiation">1. Functional Instantiation</h1>

<p>The simplest way to implement classes is with a “maker” function that creates a new instance of the class and returns that instance so it can be stored as a variable. The new instance is just like any other JavaScript object. It can have properties that store relevant information about the instance (e.g., with a <code>Car</code> class, instances might have a <code>price</code> property). It can also have properties that store functions. These functions serve as <strong>methods</strong> that are tightly associated with the instance.</p>

<h4 id="characteristics">Characteristics</h4>

<ul>
  <li>Creates new copies of the same functions when creating a new instance of the same class. This lack of reuse takes up more memory and can leave an unsavory taste in some programmers’ mouths.</li>
  <li>There is no quick way to modify all instances of the class after they’ve been created. This will become more clear after examining the other instantiation tactics.</li>
  <li>Private variables can be created/used by harnessing <strong>closure scope</strong> superpowers, but I won’t get into that today.</li>
  <li>If you understand JavaScript functions and objects, then you can understand classes implemented via functional instantiation (other instantiation techniques require knowledge of <code>this</code> and/or <code>new</code>).</li>
  <li>Could be used to create callable instances (i.e., the class could return a function rather than an object filled with properties).</li>
</ul>

<h4 id="example-code">Example code:</h4>
<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Stack from scratch (functional instantiation) </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">var</span> <span class="function">makeStack</span> = <span class="keyword">function</span>(comment){
  <span class="comment">// Provide private variables in closure scope</span>
  <span class="keyword">var</span> size = <span class="integer">0</span>;
  <span class="keyword">var</span> storage = {};
  <span class="keyword">var</span> instance = {};  <span class="comment">// Start building an instance of Stack class&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>// Add extra properties for the hell of it
  instance.annotation = comment;<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>// Add functions to the instance to serve as methods
  // (they will provide an interface to the stack’s storage)
  instance.push = function(data){
    storage[size] = data;
    size++;
  };<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>instance.pop = function(){
    if(size <span class="entity">&amp;gt;</span> 0){  // Only perform pop actions if the stack has data
      size–;
      var data = storage[size];
      delete storage[size];  // Don’t forget to delete from storage!
      return data;
    }
  };<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>instance.size = function(){
    return size;
  };<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>return instance;
};<span class="tag">&lt;/p&gt;</span>

&lt;p&gt;<span class="comment">// Create and use an instance of the Stack class</span>
<span class="keyword">var</span> myStack = makeStack(<span class="error">“</span>I<span class="error">’</span>m a stack! Whoa.<span class="error">”</span>);
myStack.push(<span class="integer">1</span>);              <span class="comment">// myStack stores 1</span>
myStack.push(<span class="error">‘</span>b<span class="error">’</span>);            <span class="comment">// myStack stores 1 and ‘b’</span>
myStack.push(<span class="integer">3</span>);              <span class="comment">// myStack stores 1, ‘b’, and 3</span>
console.log(myStack.pop());   <span class="comment">// logs 3</span>
console.log(myStack.size());  <span class="comment">// logs 2</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<h1 id="functional-instantiation-wshared-methods">2. Functional Instantiation w/Shared Methods</h1>

<p>By utilizing an object filled with methods, several classes can be created that have the same methods without creating new copies of said methods. The classes will use their own function references to refer to the same set of shared methods. Therefore, using shared methods eats up less memory than functional instantiation <em>without</em> shared methods.</p>

<h4 id="characteristics-1">Characteristics</h4>

<ul>
  <li>Reuses functions (which conserves memory) by getting function references from a utility such as <a href="http://underscorejs.org/#extend">Underscore.js</a>’s <code>_.extend(instance,methods)</code>.</li>
  <li>Retains the same benefits as functional instantiation <em>without</em> shared methods.</li>
</ul>

<h4 id="example-code-1">Example code:</h4>
<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Queue from scratch (functional instantiation with shared methods) </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">var</span> <span class="function">makeQueue</span> = <span class="keyword">function</span>(queueName, comment){&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;</span><span class="delimiter">/</span></span>/ You can use object literal notation <span class="keyword">for</span> &lt;code&gt;instance&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">code&gt; (instead of dot notation),
  </span><span class="delimiter">/</span></span>/ but then we have to use &lt;code&gt;<span class="local-variable">this</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">code&gt; and we lose the privacy of closure scope
  </span><span class="delimiter">/</span></span>/ (e.g., <span class="tag">&lt;code&gt;</span>storage<span class="tag">&lt;/code&gt;</span> is no longer <span class="reserved">private</span>), so <span class="local-variable">this</span> kind of sucks.
  <span class="keyword">var</span> instance = {
    <span class="key">name</span>: queueName,
    <span class="key">annotation</span>: comment,
    <span class="key">head</span>: <span class="integer">0</span>,
    <span class="key">tail</span>: <span class="integer">0</span>,
    <span class="key">storage</span>: {}
  };&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;</span><span class="delimiter">/</span></span>/ The _.extend() <span class="keyword">function</span> <span class="function">is</span> provided by the Underscore.js library
  _.extend(instance, sharedQueueMethods);&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;return instance;
};&lt;</span><span class="delimiter">/</span></span>p&gt;

<span class="tag">&lt;p&gt;</span>// The object below stores methods that could be shared with other classes
var sharedQueueMethods = {
  enqueue: function(data){
    this.storage[this.tail] = data;
    this.tail++;
    // The tail points to the next EMPTY “spot” for data to be stored
    // it does NOT point to the last OCCUPIED “spot” in the storage
  },
  dequeue: function(){
    if(this.head <span class="entity">&amp;lt;</span>= this.tail){  // Check the queue’s size
      var data = this.storage[this.head];<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;pre&gt;</span><span class="tag">&lt;code&gt;</span>  // Deleting is even more important for queues than for stacks
  // (memory leaks are a bigger threat for queues)
  delete this.storage[this.head];
  this.head++;
  return data;
}   },   size: function(){
return this.tail - this.head;   } };
<span class="tag">&lt;/code&gt;</span><span class="tag">&lt;/pre&gt;</span>

&lt;p&gt;<span class="comment">// Create and use an instance of the Queue class:</span>
<span class="keyword">var</span> myCoolQueue = makeQueue(<span class="error">“</span>Jeff<span class="error">’</span>s Queue<span class="error">”</span>,<span class="error">’</span>Hello, world!<span class="error">’</span>);
myCoolQueue.enqueue(<span class="error">‘</span>a<span class="error">’</span>);             <span class="comment">// myCoolQueue stores ‘a’</span>
myCoolQueue.enqueue(<span class="integer">2</span>);               <span class="comment">// myCoolQueue stores ‘a’ and 2</span>
myCoolQueue.enqueue(<span class="error">‘</span>c<span class="error">’</span>);             <span class="comment">// myCoolQueue stores ‘a’, 2, and ‘c’</span>
console.log(myCoolQueue.dequeue());   <span class="comment">// output: ‘a’</span>
console.log(myCoolQueue.size());      <span class="comment">// output: 2</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<h1 id="prototypal-instantiation">3. Prototypal Instantiation</h1>

<p>The key to prototypal instantiation is the use of <code>Object.create()</code> to utilize shared methods. Unlike functional instantiation with shared methods, there is no need to use an <code>extend()</code> function.</p>

<p>While it’s possible to use a prototype’s functions with <code>Object.create(ExampleClass.prototype);</code>, it’s also possible to (ironically) avoid the word “prototype” altogether by using <code>Object.create(sharedMethods);</code>.</p>

<h4 id="characteristics-2">Characteristics</h4>

<ul>
  <li>Reuses shared functions via <code>Object.create(Example.prototype)</code> or <code>Object.create(objectOfFunctions)</code>.</li>
  <li>Unlike functional instantiation, function references are shared. Each instance of the class does not get its own function references that point to the shared methods. This saves even more memory (although it is a very small improvement).</li>
  <li>Unlike functional instantiation, there is no way to use closure scope to enforce privacy of variables.</li>
  <li>Variables are stored on the returned object (aka <code>instance</code>), which means the shared stack methods need to use the keyword <code>this</code> to access the necessary data. It’s not a huge bummer, but if you’re a beginner, then <code>this</code> can be a confusing concept.</li>
  <li>Can use prototype chains for dynamic method modification and inheritance (subclasses!).</li>
</ul>

<h4 id="example-code-2">Example code:</h4>
<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Stack from scratch (prototypal instantiation) </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">var</span> <span class="function">makeStack</span> = <span class="keyword">function</span>(comment){
  <span class="keyword">var</span> instance = Object.create(sharedStackMethods);
  instance.annotation = comment;
  instance.size = <span class="integer">0</span>;
  instance.storage = {};&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;return instance;
};&lt;</span><span class="delimiter">/</span></span>p&gt;

<span class="tag">&lt;p&gt;</span>var sharedStackMethods = {
  push: function(data){
    this.storage[this.size] = data;
    this.size++;
  },
  pop: function(){
    if(this.size <span class="entity">&amp;gt;</span> 0){
      this.size–;
      var data = this.storage[this.size];
      delete this.storage[this.size];
      return data;
    }
  },
  size: function(){
    return this.size;
  }
};<span class="tag">&lt;/p&gt;</span>

&lt;p&gt;<span class="comment">// Create an instance of the Stack class:</span>
<span class="keyword">var</span> myStack = makeStack(<span class="error">“</span>I<span class="error">’</span>m a stack! Whoa.<span class="error">”</span>);
<span class="comment">// Using the instance doesn’t change from one class pattern to another</span>
myStack.push(<span class="integer">1</span>);              <span class="comment">// myStack stores 1</span>
myStack.push(<span class="error">‘</span>b<span class="error">’</span>);            <span class="comment">// myStack stores 1 and ‘b’</span>
myStack.push(<span class="integer">3</span>);              <span class="comment">// myStack stores 1, ‘b’, and 3</span>
console.log(myStack.pop());   <span class="comment">// logs 3</span>
console.log(myStack.size());  <span class="comment">// logs 2</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<h1 id="pseudoclassical-instantiation">4. Pseudoclassical Instantiation</h1>

<p>This is the most commonly used class pattern. It’s also the most complicated because, in addition to using the <code>this</code> keyword, it involves two concepts that the other class patterns don’t require: the <code>new</code> keyword and prototypes. Prototypal instantiation uses prototypes via <code>Object.create()</code>, but pseudoclassical instantiation needs you to explicitly type out <code>ClassName.prototype.methodName</code>, which is just another source of confusion for beginners.</p>

<p>Also, it’s the only class pattern that uses a true <a href="http://en.wikipedia.org/wiki/Constructor_(object-oriented_programming)">constructor</a> for creating new instances. Other class patterns use instantiator functions that explicitly return a new instance. The pseudoclassical class pattern does not perform such a return thanks to the <code>new</code> keyword.</p>

<h4 id="characteristics-3">Characteristics</h4>

<ul>
  <li>Uses prototype chains to provide methods to instances of a class.</li>
  <li>Allows for dynamic method modification and inheritance (subclasses!) via prototype chains.</li>
  <li>Refers to the instance that’s being created with the <code>this</code> keyword.</li>
  <li>Needs the <code>new</code> keyword to make an instance of a class.</li>
  <li>Has a true constructor that is named with a noun rather than a verb. The name is capitalized.</li>
  <li>Is the most commonly used class pattern.</li>
</ul>

<h4 id="example-code-3">Example code:</h4>
<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Queue from scratch (pseudoclassical instantiation) </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Class name is now a noun (no verb), and it starts with an upper case letter</span>
<span class="keyword">var</span> <span class="function">Queue</span> = <span class="keyword">function</span>(queueName, comment){
  <span class="comment">// Notice the use of ‘this’</span>
  <span class="local-variable">this</span>.name = queueName,
  <span class="local-variable">this</span>.annotation = comment,
  <span class="local-variable">this</span>.head: <span class="integer">0</span>,
  <span class="local-variable">this</span>.tail: <span class="integer">0</span>,
  <span class="local-variable">this</span>.storage: {}
};&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;</span><span class="delimiter">/</span></span>/ Notice the use of <span class="error">‘</span>prototype<span class="error">’</span>
Queue.prototype.<span class="function">enqueue</span> = <span class="keyword">function</span>(data){
  <span class="local-variable">this</span>.storage[<span class="local-variable">this</span>.tail] = data;
  <span class="local-variable">this</span>.tail++;
};
Queue.prototype.<span class="function">dequeue</span> = <span class="keyword">function</span>(){
  <span class="keyword">if</span>(<span class="local-variable">this</span>.head &amp;lt;= <span class="local-variable">this</span>.tail){
    <span class="keyword">var</span> data = <span class="local-variable">this</span>.storage[<span class="local-variable">this</span>.head];
    <span class="keyword">delete</span> <span class="local-variable">this</span>.storage[<span class="local-variable">this</span>.head];
    <span class="local-variable">this</span>.head++;
    <span class="keyword">return</span> data;
  }
};
Queue.prototype.<span class="function">size</span> = <span class="keyword">function</span>(){
  <span class="keyword">return</span> <span class="local-variable">this</span>.tail - <span class="local-variable">this</span>.head;
};&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;</span><span class="delimiter">/</span></span>/ Create an instance of the Stack <span class="reserved">class</span> by using the <span class="error">‘</span><span class="keyword">new</span><span class="error">’</span> keyword:
<span class="keyword">var</span> myCoolQueue = <span class="keyword">new</span> Queue(<span class="error">“</span>Jeff<span class="error">’</span>s Queue<span class="error">”</span>,<span class="error">”</span>The grass is always greener, but just as hard to mowww!<span class="error">”</span>);
<span class="comment">// Use the instance just like in previous examples</span>
myCoolQueue.enqueue(<span class="error">‘</span>a<span class="error">’</span>);             <span class="comment">// myCoolQueue stores ‘a’</span>
myCoolQueue.enqueue(<span class="integer">2</span>);               <span class="comment">// myCoolQueue stores ‘a’ and 2</span>
myCoolQueue.enqueue(<span class="error">‘</span>c<span class="error">’</span>);             <span class="comment">// myCoolQueue stores ‘a’, 2, and ‘c’</span>
console.log(myCoolQueue.dequeue());   <span class="comment">// output: ‘a’</span>
console.log(myCoolQueue.size());      <span class="comment">// output: 2</span>
</pre></div>
</div>
 </figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Queues &amp; Stacks in JavaScript (with Batman and Superman)]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/12/26/queues-and-stacks-in-javascript/"/>
    <updated>2013-12-26T15:54:00-08:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/12/26/queues-and-stacks-in-javascript</id>
    <content type="html"><![CDATA[<p>The proverbial “they” say (says?) it’s good to write technical blog posts. Blog posts that get down and dirty with the nitty gritty of low-level, in-the-weeds details and nuances accompanied by jargon, acronyms, and name-dropping are all the rage in the dev community. More importantly, I really want to help beginners learn programming, so I may as well teach some basic concepts via my blog. (Later on, I hope to contribute more to <a href="http://www.theodinproject.com/">The Odin Project</a>, which is a free, open-source, online resource for beginners created by a very cool individual.)</p>

<p>So as my first foray in technical blog posts, I present to all loveable noobs: the introductory data structures known as stacks and queues.</p>

<h1 id="whats-a-stack">What’s a Stack?</h1>

<p>A stack is a collection of items (or data) that follow a particular rule: the last item to join the collection is the first one to leave.</p>

<ul>
  <li>The <strong>L</strong>ast data <strong>I</strong>n is the <strong>F</strong>irst data <strong>O</strong>ut (<strong>LIFO</strong>)</li>
  <li>Add data: <strong>push</strong></li>
  <li>Remove data: <strong>pop</strong></li>
  <li>Data enters and exits at the same end of the stack (at the <strong>top</strong>)</li>
</ul>

<h2 id="simple-implementation">Simple implementation</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Simple Stack (array-based example)</span><a href='http://stackoverflow.com/questions/1590247/how-do-you-implement-a-stack-and-a-queue-in-javascript'>Stack Overflow </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">var</span> stack = [];
stack.push(<span class="integer">1</span>);  <span class="comment">// use the push method provided by the Array prototype</span>
stack.push(<span class="integer">2</span>);
stack.push(<span class="integer">3</span>);
console.log(stack);  <span class="comment">// output: [1,2,3]&lt;/p&gt;</span>

&lt;p&gt;<span class="keyword">var</span> popped = stack.pop();  <span class="comment">// use the pop method provided by the Array prototype</span>
console.log(popped);  <span class="comment">// output: 3</span>
console.log(stack);  <span class="comment">// output: [1,2]</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<h2 id="ridiculous-analogy">Ridiculous analogy</h2>

<p>Imagine you’ve found an old, abandoned well. You think to yourself, “Bruce Wayne fell down a well when he was a kid, and I wanna be just like the Batman, so I’m gonna fall down this sweet well!” But you hesitate because …it’s a well, and wells are scary, ya know?</p>

<p>Unbeknownst to you, <a href="http://batman.wikia.com/wiki/Harley_Quinn">your arch-nemesis</a> is out walking her <a href="http://batman.wikia.com/wiki/Bud_and_Lou">pet hyenas</a>. She spots you, and quickly runs over to shove you into the well. She giggles in delight at the sight of your plight. She then hides and waits for more people to walk near the well so she can <strong>push</strong> them too.</p>

<p>It just so happens that this well has the diameter of a single person’s width. When someone is pushed into the well, they land on top of the last person who fell in before them. This creates a <strong>stack</strong> of people and some rather pronounced discomfort. Eventually, there are 5 people in this deep-yet-thin well, and you decide it’s time to call for help to get rescued.</p>

<p>To your disappointment, the not-so-dark knight named Superman arrives to pull you well-dwellers out (one at a time). The last one pushed into the well is the first to <strong>pop</strong> out. <em>LIFO.</em></p>

<h1 id="whats-a-queue">What’s a Queue?</h1>

<p>A queue is a collection of items (or data) that follow the real-life “rules” of waiting in a line of people: the first item to join the collection is the first one to leave the collection.</p>

<ul>
  <li>The <strong>F</strong>irst data <strong>I</strong>n is the <strong>F</strong>irst data <strong>O</strong>ut (<strong>FIFO</strong>)</li>
  <li>Add data: <strong>enqueue</strong></li>
  <li>Remove data: <strong>dequeue</strong></li>
  <li>Data exits at the: <strong>head</strong> of the queue</li>
  <li>Data enters at the: <strong>tail</strong> of the queue</li>
</ul>

<h2 id="simple-implementation-1">Simple implementation</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Simple Queue (array-based example)</span><a href='http://stackoverflow.com/questions/1590247/how-do-you-implement-a-stack-and-a-queue-in-javascript'>Stack Overflow </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">var</span> queue = [];
queue.push(<span class="integer">1</span>);  <span class="comment">// “enqueue”</span>
queue.push(<span class="integer">2</span>);
queue.push(<span class="integer">3</span>);
console.log(queue);  <span class="comment">// output: [1,2,3]&lt;/p&gt;</span>

&lt;p&gt;<span class="keyword">var</span> dequeued = queue.shift();  <span class="comment">// “dequeue”</span>
console.log(dequeued);  <span class="comment">// output: 1</span>
console.log(queue);  <span class="comment">// output: [2,3]</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<h2 id="ridiculous-analogy-1">Ridiculous analogy</h2>

<p>Batman decides to do some in-the-field combat training. He drops into the middle of a gang meeting and yells, “I’ve sent your buddies to jail. I know you want revenge. Catch me if you can. P.S. I’m Batman!” Why does the cowled hero do this? We all know Batman is a smart dude, and sure enough, he has a clever plan. He lures the baddies who are running after him into a narrow alley.</p>

<p>The gangsters can only approach Batman one at a time to fit in the narrow alley, so they form a line (aka <strong>queue</strong>). The gangster at the front of the line is the first gangster knocked out (aka <strong>dequeued</strong>) by Batman (<strong>first in; first out</strong>). You might even say that Batman’s fists aim for the <strong>head</strong> of the queue and foolish gangsters enter at the <strong>tail</strong> of the line of doom.</p>

<h1 id="the-story-will-continue">The Story Will Continue</h1>

<p>Stay tuned for more blog posts on data structures. My next technical blog post will examine how to implement stacks and queues from scratch (without arrays) to get a deeper understanding of push, pop, enqueue, and dequeue. I know you can’t wait for the moment I deliver on this promise. I can hear your panting through my WiFi, but please stay patient. I was busy working on a <a href="https://github.com/RebootJeff/cocompare">web app</a> and then a <a href="https://github.com/RebootJeff/phone-tag-phonegap">mobile app</a>. Now, I’m busy with job searching while possibly starting mini-project.</p>

<p>On a mildly amusing, unrelated note: isn’t it funny to think about the phrase “stay tuned”? It’s getting rather archaic now that terrestrial, over-the-air TV and radio are losing popularity. Yes, these are the random things I think about as I write blog posts.</p>
]]></content>
  </entry>
  
</feed>
