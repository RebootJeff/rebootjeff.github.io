<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Hack Reactor | RebootJeff.com]]></title>
  <link href="http://RebootJeff.github.io/blog/categories/hack-reactor/atom.xml" rel="self"/>
  <link href="http://RebootJeff.github.io/"/>
  <updated>2014-03-30T13:53:14-07:00</updated>
  <id>http://RebootJeff.github.io/</id>
  <author>
    <name><![CDATA[Jeff Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[HackR Diary] Weeks 8-10: No More Solo]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/03/30/hackr-diary-weeks-8-10-group-collaboration/"/>
    <updated>2014-03-30T13:52:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/03/30/hackr-diary-weeks-8-10-group-collaboration</id>
    <content type="html"><![CDATA[<p><img src="/images/20140330/SimoneAnne-8351-birds.jpg" alt="something something Mighty Ducks" /></p>

<p class="my-caption">Insert inspirational metaphor relating birds to teamwork</p>

<h1 id="junior-to-senior-transition">Junior-to-Senior Transition</h1>

<p>As I mentioned <a href="http://rebootjeff.github.io/blog/2014/03/21/hackr-diary-weeks-6-and-7-making-something/">last time</a>, my <a href="http://rebootjeff.github.io/blog/categories/hackr-diary/">HackR Diary</a> was on hiatus for a bit, so the events described in this blog post occurred back in mid-November thru early-December of 2013. Weeks 8, 9, and 10 of my Hack Reactor experience covered a group project period where students formed small teams to create web apps from scratch.</p>

<p>I forgot to mention a few points in my description of the personal project period:</p>

<h2 id="client-projects">Client Projects</h2>

<p>Some folks in my cohort accepted client projects rather than coming up with their own web app ideas. This meant they had to meet with clients, deal with external requirements, etc. Some had fun experiences; some had frustrating experiences. Some got paid; some volunteered. They all got to add some extra gravitas to their resumes/CVs.</p>

<h2 id="being-a-senior">Being a Senior</h2>

<p>The cohort before mine graduated from the program just before interim week. After interim week, my cohort returned to HR HQ to find a new “junior” cohort, and there was a transition to seniorhood for us. As a senior, you have fewer/shorter lectures, less guidance, and you’re given more freedom to explore on your own. You still have a schedule to follow, but it’s far less rigid, which is fantastic. It’s funny how you feel more freedom, yet you end up working harder because of the nature of project periods at Hack Reactor.</p>

<p>Unfortunately, there isn’t much time to get to know the juniors when you’re a senior. We had one code review night where seniors gave juniors feedback on their classwork, but as a senior, your mind is always worried about your project, your app, your baby born of code.</p>

<p>By the way, I noticed that the juniors had more diversity. They had more women and more minority folks. I’m not saying my own cohort felt shitty because of the percentage of white males, and I’m not saying the new junior group reached some sort of ideal diversity (eventually, I may write a rambling blog entry about my views on diversity). I’m just noting the “slope” created by two “points of data.” The junior cohort was larger by about 5 or so people, but the increase in diversity was still noticeable. That said, I also noticed Hack Reactor felt more crowded (doh!).</p>

<h1 id="recap-of-events">Recap of Events</h1>

<p>I teamed up with 3 of my fellow seniors to work on a smartphone game called Phone Tag. Gameplay is like a free-for-all laser tag. Players sneak up on one another and hit a button to tag. The game displays a map (via Google Maps) to show locations of other players, power-ups, respawn points, etc. The app consists of HTML, CSS, and full-stack JavaScript. The client app is “ported” into an iOS app and an Android app via a tool called PhoneGap. Phone Tag leverages geolocation and real-time communications.</p>

<p>The first week just consisted of setting up boilerplate code and brainstorming game ideas. It took us awhile to settle on the free-for-all game mode. We originally considered implementing a game resembling zombie tag instead. My team also had to spend lots of time researching libraries, tools, smartphone abilities, and all that sort of goodness to find out what we should use to develop our project.</p>

<h2 id="fitness-challenge-push-up-routine">Fitness Challenge: Push-Up Routine</h2>

<p>I’m sure some Hack Reactor folks (Hackers React? Hacker Reactions?) cynically roll their eyes at the staff’s efforts to promote health, but I appreciate them. For one week, there was a push-up challenge where students were encouraged to pair up and hold each other accountable for completing a set of push-ups twice a day. I paired up with a junior, and it was cool to be able to get to know someone outside of my cohort.</p>

<h2 id="hacker-in-residence-program">Hacker-in-Residence Program</h2>

<p>In the middle of the group project period, the staff told seniors about a program to extend the Hack Reactor experience. The Hacker-in-Residence program is an extra 3 months where you get paid to work part-time for the institution (develop internal tools, teach beginner-level content, interview applicants, etc) and work on more projects (i.e., extra project periods). The idea is that a select few seniors can become Hacker-in-Residence and gain valuable experience. I chose not to apply for the program because I already felt well prepared to enter the job market. Many students felt the same way, but plenty of them were attracted to the HIR program. Under half of the seniors applied, and most of them were accepted.</p>

<p>Therefore, about 1/3 of my cohort became HIRs. It’s important to note that Hack Reactor might not include these guys in their post-graduation employment stats. But even so, I know previous HIRs have had little to no trouble getting employed after their HIR phase ended.</p>

<h2 id="new-hack-reactor-admissions">New Hack Reactor Admissions</h2>

<p>At some point during weeks 8-10, Hack Reactor launched their new website. It’s quite a bit nicer than their last version, but more interestingly, they changed their admissions process too. The new process uses their website to check very basic JS skills.</p>

<p>Hack Reactor likes having students/alumni contribute to their official blog, and I anwered the call for volunteers by authoring <a href="http://www.hackreactor.com/blog/the-hack-reactor-interview-process-questions-and-tips">this blog post</a> about the admissions process. Sadly, much of my experience lost relevance when the staff produced a new admissions process. I had to go through a 2-stage interview process, but now there is only a single interview. However, I think a lot of the advice I provided still makes sense.</p>

<h1 id="what-i-learned">What I Learned</h1>

<p>Much like the personal project period, a lot was learned via trial-by-fire work during the group project period. My group tried and scrapped various features, libraries, tools, project management strategies, etc. It was so tough and so awesome at the same time.</p>

<h2 id="tech">Tech</h2>

<p>My team knew we wanted to use geolocation, but we weren’t certain about much else. This meant that we had to research and explore many options. Eventually, we settled on a tech stack featuring quite a few different libraries/tools.</p>

<h3 id="phonegap">PhoneGap</h3>

<p>I spent a lot of time wrestling with <a href="http://phonegap.com/">PhoneGap</a>, a dev tool for creating smartphone apps using tech normally reserved for web browsers. It’s a fairly popular option for informational smartphone apps, rapid prototyping, etc. However, 101 out of 62 doctors have concluded that PhoneGap can lead to headaches and irritable demeanor. I’ve written specifically about using PhoneGap for Android in <a href="http://rebootjeff.github.io/blog/2014/01/27/setup-for-phonegap-for-android-for-reals/">a past blog post</a>.</p>

<h3 id="dont-use-jquery-animations">Don’t use jQuery animations</h3>

<p><a href="http://css-tricks.com/myth-busting-css-animations-vs-javascript/">This article</a> explains animation options quite well, but the gist of it is that you should avoid jQuery animations. You can use CSS (if you love jQuery, then use it to add animation-centric classes to target elements) or faster JavaScript animation libraries like <a href="http://www.greensock.com/gsap-js/">GSAP</a> (but it’s not very famous?). For Phone Tag, my team originally tried doing simple slide animations via jQuery-Mobile, and the performance was horrible. We switched to CSS-driven animations because there’s plenty of online help for them and we knew it would be good for us to study more CSS anyway.</p>

<h2 id="engineering-and-project-management">Engineering and Project Management</h2>

<p>Everyone expects to learn plenty of technical stuff when building projects at Hack Reactor, but there’s a slew of non-technical wisdom discovered too. My team had a lot of discussion and debates regarding feature sets, client vs server roles, project priorities, division of labor, etc. as we worked to meet MVP (minimum viable product) milestones and deadlines.</p>

<p>Unlike the personal project period, the group project period involved a ton of communication. There’s a huge amount of extra planning and talking that goes into group coding. The collaboration is great for producing cool ideas and reducing scope of work for any given individual, but the group setting necessitates expressed justification for actions. When you’re on your own, you just explore and debug however you want to, and you’re often making heavy use of your <a href="http://en.wikipedia.org/wiki/Working_memory">working memory</a>. When you’re in a group or even just a pair, you often have to explain before you act, which is a pretty serious exercise for your brain because it can feel like your working memory doesn’t get to operate at peak efficiency due to the extra steps of communication that fall between coming up with a small idea and implementing that idea.</p>

<p>Another way to put it: when you’re going solo, you get comfortable with the <em>just try XYZ and see if it works</em> model for programming. When you’re part of a team, you often need to <em>explain</em> XYZ, process any critical feedback you may receive, etc. Transitioning from solo work to group work needs a major change in mental processes. Luckily, everyone in my team is more patient and laidback than I am, so no wars broke out and no debates devolved into chaos. Good times.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HackR Diary] Weeks 6 and 7: App from Scratch]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/03/21/hackr-diary-weeks-6-and-7-making-something/"/>
    <updated>2014-03-21T17:12:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/03/21/hackr-diary-weeks-6-and-7-making-something</id>
    <content type="html"><![CDATA[<p><img src="/images/20140321/co-compare_presentation.jpg" alt="Personal Project presentation time" /></p>

<p class="my-caption">Presenting my project, Co-Compare, to the folks of Hack Reactor</p>

<h1 id="life-update">Life Update</h1>

<p>I got a job! I will start using my JS skills for dolla bills on Monday. I will blog all about my rather tiring job search soon. For now, I will resume blogging about Hack Reactor from <a href="http://rebootjeff.github.io/blog/2013/10/28/hackr-diary-week-5/">where I left off</a>. During the 2nd half of the program, I didn’t do any blogging, but I took plenty of notes for the sake of blogging at a later time, so prepare to be amazed …or mildly amused. Remember, the following rollercoaster ride took place during late-October through mid-November.</p>

<h1 id="recap-of-events">Recap of Events</h1>

<h2 id="interim-week-different-format">Interim Week (different format)</h2>

<p>The 2nd half of Hack Reactor starts with an “interim week” (aka “solo week”) where expectations are a bit cloudy. <strong>The Hack Reactor website didn’t do a good job of explaining that the injection of an interim week means that Hack Reactor is really a 13-week program.</strong> During this special week, Hack Reactor HQ is not guaranteed to be open to students. Also, students are not guaranteed any access to staff. The staff is either taking a break or working on reconfiguring the offices or other changes.</p>

<p>In other words, the students are on their own for starting the first week of developing their personal projects. Students self-organize if they want to meet up at a cafe or whathaveyou to enable collaboration.</p>

<h2 id="what-i-did">What I Did</h2>

<ul>
  <li>I spent most of my time working from HR HQ when it was open. I used nearby cafes when it wasn’t.</li>
  <li>Like a few others, I used interim week to do some travelling and to catch up on sleep.</li>
  <li>At one point (maybe after interim week?), I broke my laptop by being a Linux noob. I was one of few Ubuntu users in my cohort, and I had trouble dealing with permission/access issues. I eventually followed some StackOverflow suggestion and fucked up my permissions so badly that I had to reinstall Ubuntu. As you can imagine, my emotions are still failing to heal from that self-inflicted disaster.
    <ul>
      <li>FYI, my new job is giving me a Mac. Soon I will join the majority of devs in the promise land of screens that actually reproduce accurate colors, impressive battery life, and installation wonders such as homebrew.</li>
    </ul>
  </li>
</ul>

<h2 id="extras">Extras</h2>

<ul>
  <li>In my cohort, we organized a night to go to a movie theater for Ender’s Game. Good times.</li>
  <li>A rep from <a href="http://famo.us/">Famous</a> stopped by to give a presentation about a brand new web app framework. It’s so new that even now, Famous is in beta. Back during the personal project period, it was in a closed beta (or was it alpha?), but Famous was inviting Hack Reactor students to access it! The framework renders special <code>&lt;div&gt;</code> elements in a breathtaking way. I never used it, but I will talk about it a bit more in another blog post.</li>
</ul>

<h1 id="what-i-learned">What I Learned</h1>

<p>Holy. Crap. I learned so much during the personal project weeks. Admittedly, I didn’t work extra long hours until the last week or so before the deadline. By then, I was working at least 80 hours per week. In the first couple of days, I realized there was so much I had to learn that it felt quite overwhelming, and I had a difficult time starting.</p>

<h2 id="tools">Tools</h2>

<p>Obviously I would have to learn a lot of app concepts, engineer some solid logic, etc. But I also had to do all this while learning new tools.</p>

<ul>
  <li><strong>Balsamiq:</strong> Wireframing software. Creating wireframes really helps when trying to explain what you hope to build. To practice communication skills and project management, students had to explain their progress/goals very briefly during small stand-up meetings.</li>
  <li><strong>Yeoman:</strong> Boilerplate/scaffold generator. I used an Angular-Express generator to help me get started making a full-stack app with boilerplate code for Angular, Node, and Express. This served as a great “starter pack” of code.</li>
  <li><strong>Grunt:</strong> Task runner. To be honest, I used Grunt simpy because it came with Yeoman. However, gaining exposure to the tool opened my eyes to the possibilities provided by task runners like Grunt.</li>
  <li><strong>Stylus:</strong> CSS pre-processor. I’m not sure if CSS pre-processors are part of the tech stack or “just” another set of dev tools, but for what it’s worth, I didn’t write pure CSS for Co-Compare. Instead, I wrote Stylus CSS. I like the visual design side of front-end development, and using Stylus made that facet even more fun.</li>
  <li><strong>Heroku:</strong> Web app hosting provider. It’s easy to use because it follows a git workflow, but deployment still has challenges (re: environment configuration).</li>
</ul>

<h2 id="the-tortured-ok-not-really-birth-of-an-idea">The Tortured (ok not really) Birth of An Idea</h2>

<p>I like to think my mind is superior –errr…I mean <em>creative</em>. However, it can be tough to come up with web app ideas based on constraints. Everyone worried about whether or not they could actually implement their ideas in just a few weeks (I think it amounted to only 2.5 weeks). In the end, I learned that “Just Do It” really applies. You can spend roughly 3 gajillion hours analyzing ideas, use cases, market needs, tech stacks, visual design, etc. But at some point, you need to just do it already. Just make something and see what happens. The price of failure is time spent. The gain of failure is lessons learned. A beauty of programming is the ability to quickly change, pivot, redo, etc.</p>

<h3 id="from-cool-to-meh">From Cool to Meh</h3>

<p>Originally, I thought my idea was too boring. I wanted to create a fantasy sports game specifically for tennis, but I couldn’t find a good way to get the data/stats from pro tennis matches, so I switched to something far less cool.</p>

<p>I switched to an idea spawned by my love for analyzing/comparing products and services. In the past, I’ve spent far too much time comparing video game consoles, cars, computer parts, <em>bootcamps</em>, etc. I enjoyed it too. A lot. But I knew most people aren’t crazy in this way, so I worried that my app idea for <a href="http://cocompare.herokuapp.com">Co-Compare</a> (a web app to build comparison tables and have others vote on them) was too unsexy.</p>

<h3 id="from-meh-to-oooh">From Meh to Oooh</h3>

<p>It’s true that Co-Compare doesn’t have a ton of wow-factor, but it provided plenty of opportunity:</p>

<ul>
  <li><strong>Simplicity:</strong> It was the type of idea that could work with very few features (good for rapid prototyping).</li>
  <li><strong>Exploration:</strong> But I could have fun adding more and more features as I desired. There were plenty of sub-ideas to explore and keep my brain satiated with more goodies to engineer.</li>
  <li><strong>Fundamentals:</strong> My app requires CRUD actions. Create, Read, Update, and Delete are fundamental app actions that devs should know. It’s weird to “brag” that Co-Compare helped me learn <em>fundamentals</em>, but it’s important, and it’s not easy just because it’s “fundamental.” Engineering a CRUDy app is a great learning experience.</li>
  <li><strong>Full-Stack:</strong> My app covered a lot of territory so it exposed me to CSS pre-processors, front-end MVC, API design, databases, user authentication, etc. This was really scary at first, but afterwards, I was truly proud of what I covered.</li>
</ul>

<p>I really believe that the full-stack nature of Co-Compare solidified my abilities as a web app developer. By creating a nice-looking front-end, my own API, and back-end models for a SQL datastore, I learned so much that it gave my confidence a tremendous boost –which is funny because I had a ton of confidence going into the personal project weeks…then I lost a lot of confidence when nothing I created worked the first time. So at the end, I regained a lot of confidence that I already had at the beginning.</p>

<p>Note: Some of my classmates implemented ideas that had very bare front ends because all the impressive stuff was run on the server side. Other folks created apps that had little or no back-end logic. The number of things wrong with these paths is quite small. In fact, most experts would say the number rhymes with “hero.” Anyway, my point is that this particular “full-stack” facet of my experience is not the “best” way, but just something that I really value for myself.</p>

<h2 id="dev-cycleprocess">Dev Cycle/Process</h2>

<p>Hack Reactor staff helped students with their projects by giving recommendations on tech stack decisions, dev tools, deployment options, etc. And of course, they gave us debugging help, but there was no hand holding.</p>

<p>The primary form of guidance came in the form of some project management structure. We formed small groups that held its members accountable for short-term goals. The staff taught us about iterative development and the concept of creating MVPs (minimal viable products) as milestones rather than aiming for creating versions that were 100% complete.</p>

<p>In other words, I learned about some dev processes to help promote productivity as a software engineer.</p>

<h1 id="want-to-learn-from-my-app">Want to Learn from My App?</h1>

<p>You can find the code for Co-Compare on my GitHub. I took the time to write up a decent README too because for some reason, I have a good time writing English in addition to JavaScript. I suggest you <a href="https://github.com/RebootJeff/co-compare#development">check this out</a> if you’re interested in learning more about how I created an app from scratch.</p>

<p>Keep in mind that you shouldn’t follow everything I do. For example, my Angular app folder structure neglects best practice. It was a popular structure at the time, but it’s actually best to name folders based on features, rather than just lumping all controllers together, all views together, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HackR Diary] My Formal Apology]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/11/19/hackr-diary-my-apology/"/>
    <updated>2013-11-19T21:53:00-08:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/11/19/hackr-diary-my-apology</id>
    <content type="html"><![CDATA[<p>My previous blog post was nearly 3 weeks ago. Why? What’s stopped me from posting more stories of life at Hack Reactor? For the past several days, I have been working on an individual project. I was very confident going into it, and I should eventually blog specifically about the initial stages, but as it turned out …there is a crap-ton of stuff to juggle when developing a web app. There are so many things that can go wrong in your workflow –not just in your code.</p>

<h1 id="things-that-kept-me-busy">Things That Kept me Busy</h1>

<ul>
  <li>Defaut installation of node/npm on Ubuntu led to file permissions issues. Oh shit.</li>
  <li>Figuring out Yeoman: Before <code>npm install -g yo</code>: I wonder what will happen. After <code>yo generator-angularexpress</code>: What is all this stuff?! Oh nice.</li>
  <li>Figuring out Grunt: How can I get it to work with Stylus? Oh nice.</li>
  <li>Easy, but time-consuming (to make sure you don’t break something that used to work)
    <ul>
      <li>Organizing files/folders in a professional way (inter-file <code>require</code> statements can break)</li>
      <li>Using environment variables (typos can be devastating)</li>
    </ul>
  </li>
  <li>Facebook Authorization
    <ul>
      <li>Making 2 FB apps (one for dev environment; one for production environment)</li>
      <li>Figuring out the proper callback URL</li>
    </ul>
  </li>
  <li>Databases
    <ul>
      <li>Juggling MySQL in development environment, then switching to PostgreSQL in production.</li>
      <li>Why is the production database getting flooded? Oh there’s a random configuration setting I missed in Sequelize.</li>
    </ul>
  </li>
  <li>Random Heroku hiccups (at one point, a node module provider went down, causing Heroku’s <code>npm install</code> to die).</li>
</ul>

<p>These are just a few of the little obstacles that add up. You don’t see them coming. They take quite a bit of time to hunt down.</p>

<h1 id="nerdy-chuck-norris-jokes">Nerdy Chuck Norris Jokes</h1>

<p>As an apology for not blogging much in the past 3 weeks, here are some jokes from <strong><a href="http://www.icndb.com/">the best API ever</a></strong>:</p>

<p>All arrays Chuck Norris declares are of infinite size, because Chuck Norris knows no bounds.</p>

<p>Chuck Norris doesn’t have disk latency because the hard drive knows to hurry the hell up.</p>

<p>Chuck Norris can’t test for equality because he has no equal.</p>

<p>Chuck Norris burst the dot com bubble.</p>

<p>All browsers support the hex definitions #chuck and #norris for the colors black and blue.</p>

<p>MySpace actually isn’t your space, it’s Chuck’s (he just lets you use it).</p>

<p>Chuck Norris can solve the Towers of Hanoi in one move.</p>

<p>Chuck Norris finished World of Warcraft.</p>

<p>Chuck Norris doesn’t use web standards as the web will conform to him.</p>

<p>Whiteboards are white because Chuck Norris scared them that way.</p>

<p>Chuck Norris can delete the Recycling Bin.</p>

<p>Chuck Norris’s beard can type 140 wpm.</p>

<p>Chuck Norris can unit test entire applications with a single assert.</p>

<p>Chuck Norris doesn’t need sudo, he just types “Chuck Norris” before his commands.</p>

<p>Chuck Norris doesn’t need a debugger, he just stares down the code until the bug confesses.</p>

<p>The class object inherits from Chuck Norris</p>

<p>Chuck Norris knows the last digit of PI.</p>

<p>Chuck Norris’ Internet connection is faster upstream than downstream because even data has more incentive to run from him than to him.</p>

<p>Chuck Norris’s keyboard has the Any key.</p>

<p>Chuck Norris can install iTunes without installing Quicktime.</p>

<p>Chuck Norris’s OSI network model has only one layer - Physical.</p>

<p>Chuck Norris compresses his files by doing a flying round house kick to the hard drive.</p>

<p>Chuck Norris uses canvas in IE.</p>

<p>Chuck Norris’s database has only one table, ‘Kick’, which he DROPs frequently.</p>

<p>Chuck Norris’s brain waves are suspected to be harmful to cell phones.</p>

<p>Chuck Norris sits at the stand-up.</p>

<p>Chuck Norris has never registered an account. He just logs in.</p>

<p>Code runs faster when Chuck Norris glares at it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HackR Diary] Week 5: Final Sprints]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/10/28/hackr-diary-week-5/"/>
    <updated>2013-10-28T22:42:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/10/28/hackr-diary-week-5</id>
    <content type="html"><![CDATA[<p><img src="/images/20131028/caltrain.jpg" alt="caltrain" /></p>

<p class="my-caption">Good morning</p>

<p>No more sprints! I’m both sad and relieved. The sprints have provided enough structure to ensure a guided education thus far. They’ve equipped me with enough skill to yield the self-belief that I can actually build a complete web app …which is good because that’s exactly what I’m going to do starting this week. Looking back on week 5 makes me think I might miss the relative safety of paired programming, but I’m pumped to be diving into my own project.</p>

<p>By the way, this blog post is really long. I think I’m going to split up future blog posts, and I’m going to post more frequently.</p>

<h1 id="recap-of-events">Recap of Events</h1>

<h3 id="alumni-panel">Alumni Panel</h3>

<p>Early in the week, there was a truly invaluable guest speaker event. Six Hack Reactor alumni held a Q&amp;A session with current students. One alumnus is a Hacker-in-Residence at Hack Reactor. His role is a paid, part-time, short-term job supporting the school. There are a handful of Hacker-in-Residences at HackR at any given time. After their stints, they are put through the same job finding process that students who didn’t want to become a Resident normally go through.</p>

<p>The other five alumni were from Adap.tv, Adobe, DocuSign, Edmodo, and Versal, respectively. They had a variety of roles including smartphone app development, front-end MVC engineering, internal QA, data visualization, and full-stack development. I have to admit that I was a bit judgemental about the QA role at first, but it actually sounded legit by the end of the Q&amp;A session. For what it’s worth, the Adap.tv guy was hired even though he doesn’t have a college degree! In my opinion, that’s awesome, and it really says a lot about the meritocracy found in the tech job market (…or the non-traditional, new-school nature of the Bay Area).</p>

<p>There was a ton of insight gleaned from the alumni panel. Examples of advice include:</p>

<ul>
  <li>Ask employers about their onboarding process (smaller companies might not have one, and that can be a turn-off for some newbies).</li>
  <li>Invest in social capital. Wow, that was a really buzzwordy sentence so let me translate: get to know your co-workers. “Ask them out” to coffee breaks, happy hours, lunches, etc. This may sound like basic networking at first, but I think the point is that in software development, you’re going to be asking others for help quite a lot, so it’s good to build a rapport ASAP to make asking for assistance as natural as possible. This is something I never really considered before, but after all the paired programming I’ve done at Hack Reactor, it makes a ton of sense to establish rapports that foster collaborative vibes.</li>
  <li>Ask employers to set up a meeting between you and your potential boss. It’s ok –this is totally ok. I used to work in an industry where this would never really be possible, so I had to ask if this is ok after one alumnus mentioned how one of his prioties when job hunting was to find a cool boss. I want a cool boss too!</li>
  <li>NEVER make the first move for salary negotiations. Let them make an offer before you start specifying any numbers.</li>
  <li>Specific to HackR: Don’t be too eager to accept your first job offer. You will get more. Shop around. It’s tempting to accept your first or second job offer just because employment is such a major goal when deciding to join Hack Reactor in the first place. However, joining Hack Reactor isn’t something you do just to get a job –it’s something you do to get an <em>ideal</em> job.</li>
</ul>

<p>Sorry, but I forgot to take thorough notes during the alumni panel, so the list above is rather short.</p>

<h3 id="more-guest-speakers">More Guest Speakers</h3>

<p>Now might be a good time to point out that Hack Reactor has guest speakers at least one evening per week. Attendance is optional. Oftentimes students choose to work on their assignments/projects at the workstations rather than stay in the lecture area to listen to the guest speaker.</p>

<p>What’s my point? This week was the first time I didn’t really have enough time to fully invest in the guest speakers. Rudely, I’ve forgotten that names of the speakers, but one guy spoke about databases (i.e., engineering decisions you might face when designing/creating/maintaining/scaling a database) and another guy (from Khan Academy) spoke about <a href="http://facebook.github.io/react/">React</a>, the JavaScript library written and open-sourced by Facebook. Relevant link: <a href="http://www.youtube.com/watch?v=GW0rj4sNH2w">React presented at JSConf</a></p>

<h3 id="picking-personal-projects">Picking Personal Projects</h3>

<p>To be honest, I wasn’t thrilled with the way HackR arranged the transition from sprints to personal projects. Students were under the impression that we’d get more support/attention for coming up with project ideas, but we weren’t given much time to brainstorm. Instead of dedicating a lecture to a guided brainstorming session, students had to come up with ideas in their spare time (which is tough when busy worrying about Ruby and Angular for the sprints).</p>

<h3 id="social-night-haunted-house">Social Night: Haunted House</h3>

<p>Once again, I did not attend social night. On one hand, I feel bad that my cohort has generally had low participation in the weekly social nights. On the other hand, the consensus seems to be that the social nights just don’t feel all that appealing. The first one was awesome; the others were “meh.”</p>

<p>Instead of going to the Social Night event last Saturday, I went to a nice happy hour/dinner with a few other students. Afterwards, I went back to HackR to continue tackling client-side user authentication with my Angular sprint partner. We failed, but we got a lot of other stuff done during the day, so I felt ok about the sprint as a whole. Plus, my partner and I established a fun rapport so even failing to get “auth” working was a funny time.</p>

<h1 id="what-i-learned">What I Learned</h1>

<p>Week 5 included assignments for building a URL shortening web app to further improve students’ full-stack skills.</p>

<h3 id="ruby-sinatra-activerecord-sqlite">Ruby, Sinatra, ActiveRecord, SQLite</h3>

<p>Server-side code used a lot of Ruby and Sinatra. HackR chose not to teach us students Ruby on Rails (RoR) because Sinatra is simpler than Rails. It’s easy to be bummed about this, but in hindsight, I’m not worried about it. Yes, Rails is a big deal right now in Silicon Valley, but I’m under the impression that RoR was embraced because of it’s great for rapid prototyping. Times are changing though. There are now more options for rapid prototyping. More importantly, I’m at the point in my HackR-guided education where I have built up enough fundamental know-how to make me confident that I can learn RoR later.</p>

<p>For now, it’s more important to learn concepts about MVC/MV* development, user authentication, databases, etc. Speaking of databases, there isn’t much for me to say about SQLite because students were harnessing ActiveRecord magic to manipulate a simple SQLite database with only two tables. We had to use <a href="https://github.com/cldwalker/tux">tux</a> to do database probing, which is slightly less convenient than using MySQL’s terminal interface (as we did in the previous week).</p>

<h3 id="angular">Angular</h3>

<p>The students were pretty hyped up to learn Angular as our final sprint. We’ve invested a lot of time into learning Backbone, but word on the street (a really nerdy street) is that Angular is the “new hotness” that will take over the world of front-end JavaScript for single-page web apps.</p>

<p>Overall, I think the students’ reception of Angular was torn. Some love the power (Angular’s data-binding is pretty addicting); some find discomfort in the need to learn some rather bizarre syntax (Angular forces you to write HTML with “directives”).</p>

<p>Here’s the low down: Backbone feels like the traditional, familiar option whereas Angular feels like the more experimental, exotic option. Yes, it took us awhile to appreciate Backbone, but once we got comfortable with it, we realized how easy it is to comprehend after you get your mind around it.</p>

<p>For Angular, the learning curve is a lot less steep, but it also seems like it will be harder to master. There is more “magic” …and now I’m realizing I should explain that word.</p>

<h4 id="aside-what-is-magic">Aside: What is “magic”?</h4>

<p>When I say “magic,” I’m using it colloquially to refer to abstraction that feels harder to comprehend and feels less intuitive. For analogy*, a door knob abstracts mechanical bits. You may not be a locksmith, but it’s probably easy for a child to imagine how it works. Even as a child, you probably had some intuition that door knobs just have some simple mechanism for converting rotational movement of the knob into longitudinal movement of the latch On the other hand, it’s a bit hard for a child to imagine how a digital camera works. Even an old-school film-based camera feels magical at that tender age when you’re first capable of comprehending door knobs. Ahhh…those were the days, am I right?</p>

<p><strong>*By the way, can we make “for analogy” a thing in the same way that “for example” is a thing?</strong></p>

<p>Also, if you google “parts of a door knob,” you will see some complex diagrams, but I will defend my analogy! For the sake of argument, let’s just say door knobs use simple cams.</p>

<h4 id="back-to-my-thoughts-on-angular">Back to my thoughts on Angular</h4>

<p>So why does Angular seem so magical? By using Angular’s library of directives, you can have the browser display a list of items without writing DOM-manipulating code (i.e., jQuery). You can sort those items without writing a sorting function. You can filter those items without writing a sorting function. In Angular, you’re not supposed to use jQuery to change/update the HTML on the page. Angular takes care of that for you. How does it do that? Magic (directives). I haven’t even touched Angular’s feature that allows you to just create your own semantic HTML tags (e.g., <code>&lt;tab&gt;&lt;pane&gt;Content for Pane 1&lt;/pane&gt;&lt;pane&gt;Content for Pane 2&lt;/pane&gt;&lt;/tab&gt;</code>).</p>

<h3 id="routers-templates-user-authentication">Routers, Templates, User Authentication</h3>

<p>With MVC frameworks comes routers and templates. With web apps comes user authentication (sometimes).</p>

<p>On the server-side, routing involves RESTful APIs, which are fairly tidy interfaces that allow clients to talk to servers. On the client-side, routing involves flow control and updating the URL in the browser address bar so that it looks pretty/semantic. For example, you may want to switch to an editing panel when the user clicks a button. The router changes the URL to end in <code>/edit</code> without causing the page to refresh. The router also calls a function that might do edit-related things such as rendering an editing panel.</p>

<p>Templates are used to create sections of HTML that will contain dynamic content. Let’s say you want to render an unordered list (<code>&lt;ul&gt;&lt;/ul&gt;</code>), and the app will determine how many items (<code>&lt;li&gt;&lt;/li&gt;</code>) will be in the list. Templates take care of that.</p>

<p>On the server-side, routing and templating is pretty easy with Sinatra. On the client-side, routing with Angular feels easier than routing with Backbone. Templates are way easier in Angular for me.</p>

<p>In any case, I find user authentication isn’t very straightforward, but I haven’t tried many gems for Ruby nor <a href="http://passportjs.org/">Passport</a> for Node.js. You need to check for authentication, redirect visitors as necessary, encrypt passwords (AND usernames –don’t forget that), save login info into a database, manage sessions/cookies, etc. A surprising amount of mistakes can be made.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HackR Diary] Week 4: Now Entering Callback Hell]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/10/21/hackr-diary-week-4/"/>
    <updated>2013-10-21T21:45:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/10/21/hackr-diary-week-4</id>
    <content type="html"><![CDATA[<p><img src="/images/20131021/joebowers_at_hackreactor.jpg" alt="photo of Joe Bowers presentation" /></p>

<p class="my-caption">Joe Bowers from Mixpanel discussing tech decisions based on company culture</p>

<p>Another week down, another blog post arriving a Monday rather than the planned Sunday. Woops. Week 4 ended on a more stressful note for me (more on that in the <em>What I Learned</em> section <a href="#what-i-learned">below</a>), so I really felt the need to relax and decompress yesterday rather than write up this blog post. That said, once I complete roughly 25% of a blog post, I really start enjoying the writing process.</p>

<p>Because the school educates us students at such a tough pace, it’s tempting to say every week is a game changer, the most challenging week ever, the most interesting, etc. Well I’m going to induldge and say week #4 was the craziest week thus far.</p>

<p>I discovered that the Hack Reactor directory contains a partially complete list of all alumni’s employers. I started looking up some of the companies during a break from work. I didn’t have much time, but what I saw really inspired me. Now I’m even more excited about my own future prospects. <em>Hooray!</em></p>

<p>There were two guest speakers this week. They both were quite technical, and I took time to smell the roses by taking a moment to think to myself, “Wow I’ve learned a lot because I understand all this very technical, very specific stuff discussed by these speakers.” <em>Hooray!</em></p>

<p>There were a couple of <a href="/blog/2013/10/06/hackr-diary-week-2/#toy-problems">toy problems</a> that gave me some trouble this week. Maybe I’m putting too much pressure on myself, but solving a toy problem gives me a lot of self-confidence …and failing a toy problem puts a figurative frown on the figurative face of my mood for the rest of the morning (or longer). <em>Dammit!</em></p>

<p>Students are told not to worry about comparing themselves to peers, but the seniors are killing it. I feel happy for them, but sometimes their impressive projects make me second-guess myself. Can I come up with a cool idea for an app? Self-doubt is creeping in. I only have one more week to think of something. <em>Dammit!</em></p>

<p>As you can tell from the previous four paragraphs, the previous week was a bit of a battle between fear and pride. The worst part was falling behind on the databases sprint. The best part was watching seniors’ presentations.</p>

<h1 id="recap-of-events">Recap of Events</h1>

<h3 id="guest-speaker-pamela-fox">Guest Speaker: Pamela Fox</h3>

<p>On Monday, Pamela Fox (formerly Coursera, currently Khan Academy) gave a great Backbone presentation at Hack Reactor. I wrote about it <a href="/blog/2013/10/16/hackr-diary-a-visit-from-pamela-fox-re-backbone/">right here</a>.</p>

<h3 id="guest-speaker-joe-bowers">Guest Speaker: Joe Bowers</h3>

<p>On Thursday, Joe Bowers (pictured at the top) gave an intriguing talk about intra-company coding culture. There are a lot of decisions to make with regards to software architecture/design, and Joe explained that many decisions are made based on coding culture/philosophy. In other words, many decisions come down to subjective thinking and preferences for certain aesthetics. His primary example was about Mixpanel’s tendency to embrace code cleanliness to the point of sacrificing <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRYness</a> and abstraction. Their code is very explicit, so you always know what it’s doing without having to spend hours studying various layers of abstraction or other quirks that might improve elegance at the cost of human-readability.</p>

<h3 id="social-night-lit-crawl-skipped">Social Night: Lit Crawl (skipped)</h3>

<p>I’m not sure what <a href="http://litcrawl.org/sf/">SF Lit Crawl</a> is, but that was the designated event for social night. I decided not to join because I felt like I needed to spend more time studying ORMs (more on that below). Spending Saturday evening at Hack Reactor is actually quite nice. There were probably 10-20 students/staff still hanging out at HackR. Sadly, I wasn’t very productive. I think my brain was just too tired from battling asychronous database queries.</p>

<p>On a related note, I’ve told HackR staff that the Social Nights are not well-organized. It’s clear that they are not given a high priority (attendance is optional for students), and I think they’re missed opportunities for cohort bonding. With a class size of nearly 30 students, it’s hard to get to know everyone when you spend most of your time with one person every two days (during 2-day paired programming sprints).</p>

<h3 id="seniors-group-project-presentations-practice">Seniors’ Group Project Presentations (practice)</h3>

<p>So. Friggin’. Stellar.</p>

<p>Just. Absolutely. Outstanding.</p>

<p>I was truly blown away by the seniors’ final projects. HackR students work on two major projects during their time here. The first is an individual project, the second is a group project. Students present their projects to some Hack Reactor staff and fellow students as practice for when they have to present to employers on hiring day.</p>

<p>The group projects I saw last Saturday were incredible. They only had 2-3 weeks to create something worth bragging about, and they certainly surpassed my expectations. I’m half-inspired and half-worried. What they’ve done makes me prouder to be associated with Hack Reactor, but now I definitely feel more pressure to reach a similar level of awesomeness. Here are a few highlights:</p>

<ul>
  <li>Personal website powered by <a href="http://famo.us/">Famo.us</a>: Making a personal website might not sound impressive, but don’t get the wrong idea. I’m not talking about an About.me page. The site has very sexy Twitter/Facebook feed integration. The product looks like something Feedly or Flipboard would create (pro quality). <strong>More importantly</strong>, the team behind the product is one of the first to use brand new tech called Famous. Famous is a JavaScript framework for continuously rendering webpages with the power of client GPUs rather than CPUs. It replaces typical HTML with a bunch of <code>div</code> elements that are constantly being updated (at ~60 frames per second) with new values for their properties. The Hack Reactor students not only used the new tech (which is still in <em>private</em> beta), they also <em>contributed</em> to the Famous codebase. In fact, Famous will be using the students’ product at future HTML5 conferences to demo the power of the framework!</li>
  <li>Virtual Furniture Placement: A group of 4 (or was it 5?) made an app that takes user-uploaded photos of empty rooms and allows the user to place virtual, 3D furniture into the photos. The 3D rendering looks so good! It’s amazing what you can do with JavaScript (I believe they used <a href="http://threejs.org/">three.js</a>). This is definitely an app that every home seller and furniture seller should use.</li>
  <li>Reddit Submission Scheduler: It’s basically <a href="http://bufferapp.com/">Buffer</a>, but it’s for Reddit instead of Twitter. The students have built a product that I imagine every marketer wants: an app that allows you to submit a post to Reddit at a future date/time. I actually wonder if Reddit will ban the app because it could potentially be abused to proliferate spam. That said, if Buffer can work for Twitter, than surely something similar can work for Reddit. The idea is simple and unglamorous, but it certainly meets a big demand. It’s easy to imagine a company willing to buy the students’ app.</li>
</ul>

<h1 id="what-i-learned">What I Learned</h1>

<h2 id="nodejs-without-express">Node.js (without Express)</h2>

<p>Finally! Server-side code! Up to this point, the students have been just working with client-side assignments. With the <a href="http://nodejs.org/">Node.js</a> sprint, we started sending HTTP requests back and forth between client and server. We have yet to use <a href="http://expressjs.com/">Express</a> or any other Node.js framework to make life easier. We used modules like http, fs, url, and so on. The asynchronous nature of Node.js was weird at first, but to be honest, a lot of us got around that complexity by using synchronous variants of methods (e.g., <code>fs.readFileSync()</code>in place of <code>fs.readFile()</code>).</p>

<h2 id="databases">Databases</h2>

<p>At first, I was excited by the idea of learning database goodness. But then the asynchronous nature of Node.js started raining on my parade. We worked with MySQL and a SQL-for-Node.js ORM called <a href="http://http://sequelizejs.com/">Sequelize</a>. ORMs are libraries that provide a way to interact with databases without having to write SQL code. In the case of Sequelize, you just write JavaScript code with the Sequelize class/methods to query the database.</p>

<p>It’s not all sunshine and rainbows though. I found Sequelize to be troublesome. You can get stuck in callback hell because unlike the http module for Node.js, the Sequalize module lacks synchronous variants of methods. We have yet to explore the benefits of asynchronous/non-blocking server-side code, so it’s hard to embrace the “pyramid of doom” (aka callback hell). When I asked for help, I was told to investigate another library for adding “promises” to my code. Promises help make asynchronous code much more manageable, but I didn’t have enough time to truly learn and implement them.</p>

<p>So what I’m basically saying is that last week ended on a crappy note: an unfinished assignment. I’ve been told not to worry because there will be more opportunities to learn databases when working on projects (during the 2nd half of the Hack Reactor course).</p>

<h1 id="in-other-news">In other news…</h1>

<h2 id="the-next-phase">The Next Phase</h2>

<p>There isn’t much time! In just a couple of weeks, the individual project phase begins. I have no good ideas for what to create! In my limited spare time, I’m playing Hawken, browsing Imgur, and freaking out about the personal project phase.</p>

<h2 id="nuances-of-javascript">Nuances of JavaScript</h2>

<p>On a more positive note, Hack Reactor shared this YouTube video <a href="https://twitter.com/HackReactor/status/390905108105818112">via Twitter</a>:</p>

<iframe width="300" height="225" src="http://RebootJeff.github.io//www.youtube-nocookie.com/embed/iSxNCYcPAFk" frameborder="0" allowfullscreen=""></iframe>

<p>As I watched it, I realized that it covered material I learned in the first week or so at Hack Reactor. It felt pretty awesome. You may wonder why it took a week to learn content covered by a simple presentation on YouTube. My opinion is that the video is not meant for beginners; it’s meant for seasoned coders trying to learn JavaScript.</p>

<h2 id="disclaimer">Disclaimer</h2>

<p>After a few weeks of this HackR Diary blogging, I’ve noticed that I’ve missed a few things. Despite my best efforts, these posts are not as comprehensive as I originally imagined. For example, last week, I forgot to talk about learning eventing systems. Overall, I’ve been forgetting to talk about specific aspects of student life like food options, daily mini-presentations, fitness challenges, the “halp system”, volunteering for tech blogging, and so on and so forth…</p>

<p>So much to write about; so little time.</p>
]]></content>
  </entry>
  
</feed>
