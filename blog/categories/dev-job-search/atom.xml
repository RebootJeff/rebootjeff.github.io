<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dev job search | RebootJeff.com]]></title>
  <link href="http://RebootJeff.github.io/blog/categories/dev-job-search/atom.xml" rel="self"/>
  <link href="http://RebootJeff.github.io/"/>
  <updated>2014-08-15T11:37:35-07:00</updated>
  <id>http://RebootJeff.github.io/</id>
  <author>
    <name><![CDATA[Jeff Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dev Job Searching Tools Roundup Part 2: Readyforce, The Muse, The Sourcery, AngelList, VC job listings]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/08/14/dev-job-searching-tools-roundup-part-2/"/>
    <updated>2014-08-14T18:49:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/08/14/dev-job-searching-tools-roundup-part-2</id>
    <content type="html"><![CDATA[<p><img src="/images/20140814/code_and_trees.jpg" alt="JavaScript and Palm Trees" /></p>

<p class="my-caption">If you find the right job, you can feast your eyes on sweet code <strong>and palm trees</strong>.</p>

<p>In <a href="/blog/2014/06/28/dev-job-search-tools-part-1">my previous post</a>, I described my experience using LinkedIn, Whitetruffle, Hired, and Dice. This time around, I’m going to cover a crop of sites that I used less extensively. Although they didn’t yield fruitful leads, they’re still pretty interesting to me, and with job searching, you <em>can’t not</em> explore more than a few avenues.</p>

<h1 id="job-sites-and-search-tools">Job Sites and Search Tools</h1>

<h2 id="readyforce">Readyforce</h2>
<ul>
  <li><strong>The gist:</strong> Job board for entry-level opportunities (mostly for recent college grads)</li>
  <li><strong>My experience:</strong> I only browsed Readyforce for a bit</li>
  <li><strong>My recommendation:</strong> Give it a shot, but keep expectations low if you’re not a recent college student.</li>
</ul>

<p>The <a href="http://www.readyforce.com/">Readyforce website</a> has undergone a big redesign since my job searching days. I was originally drawn to the site by its large selection of companies listing their open positions. However, the site is clearly marketed towards college grads, and the creators want job seekers to “connect” with employers through their own social(?) network.</p>

<p>When I visited the site a few days ago, it looked quite different. While it does look cooler nowadays, it also feels buggier. On top of that, there doesn’t seem to be a clear way to apply for jobs. Maybe I just don’t understand their model, or more likely: maybe I have to register an account first.</p>

<h2 id="the-muse">The Muse</h2>
<ul>
  <li><strong>The gist:</strong> Job listing featuring “rich media”</li>
  <li><strong>My experience:</strong> Browsing The Muse was so fun that I even signed up for the email newsletter.</li>
  <li><strong>My recommendation:</strong> Must visit! The site does a fantastic job of profiling each company. Their email newsletter does a pretty bland job of standing out from other self-help resources.</li>
</ul>

<p>I love what <a href="https://www.themuse.com/">The Muse</a> is doing. Muse peeps travel to employers’ offices to take professional photos and record video interviews with current employees to highlight the benefits of working for the employers. It’s great to see photos of cool offices, and although the videos have mediocre audio/visual quality, they still provide some decent insight. The end result is that The Muse feels like a portal for quick tours of hiring companies. I felt like I was getting a fun, behind-the-scenes look at a bunch of tech jobs rather than just browsing endless, cookie-cutter job descriptions like you do with most other job sites.</p>

<p>During my first few visits to their site, I was so enamored with The Muse that I signed up for their email newsletter. That’s right, I actually <em>wanted</em> their spam. Sadly, their emails are pretty lame. Each message uses a click-bait subject line like “This Genius Formula Can Tell You Your Dream Job”. Opening one of these emails just reveals a giant button to take you to their blog where the short articles don’t live up to the hype of their titles/headlines. By the way, the “genius formula” is <code>gifts + passions + values = your calling</code>. <em>Genius</em>.</p>

<h2 id="the-sourcery">The Sourcery</h2>
<ul>
  <li><strong>The gist:</strong> Recruiting firm that actually lists job opportunities on their site.</li>
  <li><strong>My experience:</strong> I talked to a couple of their recruiters, and I got minimal results.</li>
  <li><strong>My recommendation:</strong> I’m not a fan.</li>
</ul>

<p>You can find a lot of <a href="http://www.thesourcery.com/job_seekers">job postings on The Sourcery</a>. The companies that use The Sourcery for recruiting will often post on other job sites, but there will be a note at the bottom of the job description that mentions the requirement to apply via The Sourcery. After filling out a job application on The Sourcery, one of their recruiters will let you know whether or not your candidacy will be pursued.</p>

<p>For me, the problems come from the recruiters. They noticed I was a Hack Reactor <a href="/blog/2014/05/11/hackr-diary-weeks-11-12-and-beyond/">grad</a>, and they immediately labeled me as just another coding bootcamp grad –in a bad way. Although they were friendly, the recruiters implied that all coding bootcamp grads are the same, that they’re all “great” <em>junior-level</em> coders, and that they all can’t handle more than the average entry-level job. What’s really weird is that I would get emails from some recruiters telling me that my job application was rejected due to a lack of work experience, but then other Sourcery recruiters would contact me and tell me that they want to interview me for the exact same job. Maybe the recruiters reach out to rejected applicants if the pool of applicants is running low for a particular job.</p>

<p>Obviously, The Sourcery is not the only company that treats bootcamp grads as low-level programmers. This is why Hack Reactor <a href="http://sympatheticvibration.com/hack-reaction-week-8-no-recognition/">doesn’t want you to talk about them during interviews</a>. It’s also why Hack Reactor avoids calling itself a bootcamp. I’m getting off-topic, but the gist is: the bootcamp market is getting bigger, and the quality is very inconsistent. Consequently, the mediocre bootcamps are hurting the reputation for all bootcamps. The Sourcery’s expectations for bootcamp grads have already been adjusted downwards.</p>

<h2 id="angellist">AngelList</h2>
<ul>
  <li><strong>The gist:</strong> Networking in the startup bubble.</li>
  <li><strong>My experience:</strong> I hit the “I’m interested!” button several times without much luck.</li>
  <li><strong>My recommendation:</strong> Meh. It’s easy enough to use, but results will be hit-or-miss.</li>
</ul>

<p>In my last couple of weeks at <a href="/blog/categories/hackr-diary/">Hack Reactor</a>, I was instructed to make sure I had 3 online profiles ready to show off: LinkedIn, GitHub, and AngelList. The nice thing about <a href="http://angel.co">AngelList</a> is that you’re more likely to get in contact with an in-house recruiter. You don’t have to go through 3rd party recruiters. The bad thing about AngelList is that you might not get in contact with any one. When I say it’s “hit-or-miss”, what I mean is that I know some colleagues who were contacted via AngelList by several companies, and I know other colleagues who were getting zero interest. There was no apparent reason for the two distinct outcomes.</p>

<p>I was only contacted by a few companies via AngelList, and I wasn’t too interested in them. There are plenty of startups on the site, and if you’re hoping to join a tiny company, you should at least try to use AngelList.In my experience, although some companies reached out to me, none of the contacts yielded real conversations about interviewing. Also, there are a ton of companies that don’t distinguish themselves (i.e., there are a ton of startups in the advertising industry –and their profiles look too similar).</p>

<h2 id="vc-sites">VC Sites</h2>
<ul>
  <li><strong>The gist:</strong> Easy way to discover jobs (but doesn’t make applying to jobs any easier).</li>
  <li><strong>My experience:</strong> Lots of browsing filled me with hope.</li>
  <li><strong>My recommendation:</strong> Definitely worthwhile, but it’s going to require plenty of effort.</li>
</ul>

<p>Many moons ago, a <a href="https://github.com/Ken123777/megatwillions">ridiculous</a> fellow Hack Reactor grad pointed out that Venture Capital websites tend to have giant lists of job openings for their respective startups. I eventually validated his insight for myself by checking out job lists maintained by:</p>

<ul>
  <li><a href="http://www.sparkcapital.com/jobs/">Spark Capital</a></li>
  <li><a href="http://careers.accel.com/careers_home.php">Accel Partners</a></li>
  <li><a href="http://www.kpcb.com/careers">Kleiner Perkins</a></li>
</ul>

<p>You can find a huge number of jobs. It definitely helps keep your hopes up, knowing that if you fail a job interview, there are so many other jobs to go for. But the caveat to remember is that these job postings are just like any other: it’s hard to get noticed when applying for a job without a referral/connection. For smaller companies, you have a much better chance, but overall, you will have to apply to a lot of jobs just to hear back from a couple employers. Like with all job openings, I recommend putting in some extra effort by checking LinkedIn (or maybe other social networks like Twitter?) to see if you can contact the employer’s engineers, hiring managers, and/or in-house recruiters.</p>

<h1 id="in-other-news">In other news</h1>
<p>I’m exicted to start a new series of blog posts covering various tips, tricks, hacks, best practices, puzzles, challenges, questions, and mysteries (both solves and unsolved) that I’ve encountered at work. This “Learned On The Job” series will be arriving shortly!</p>

<p>That said, I haven’t finished writing about what I learned from the job search process. More job hunt-related content is still to come (including “WTF moments” :D), but I want to mix things up a bit too. After all, talking about software engineering is more fun than talking about searching for software engineering jobs, right?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dev Job Searching Tools Roundup Part 1: LinkedIn vs Whitetruffle vs Hired vs Dice]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/06/28/dev-job-search-tools-part-1/"/>
    <updated>2014-06-28T11:14:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/06/28/dev-job-search-tools-part-1</id>
    <content type="html"><![CDATA[<p><img src="/images/20140628/unemployed_easter_bunny.jpg" alt="Unemployed Easter Bunny" /></p>

<p class="my-caption">"Will Decorate Eggs For Food" by <a href="http://gratisography.com/">Gratisography.com</a></p>

<p>Back in December of 2013, <a href="/blog/2014/05/11/hackr-diary-weeks-11-12-and-beyond/">I graduated from Hack Reactor</a>. After graduating, I started casually looking for a job, but due to the winter holidays, I didn’t start searching in earnest until early-to-mid January. In hindsight, perhaps I should’ve spent less time searching by myself and more time using Hack Reactor’s network/connections. That said, Hack Reactor encourages grads to look for jobs using all sorts of resources, and I benefited from <a href="/blog/2014/05/11/hackr-diary-weeks-11-12-and-beyond/#overtime-support">other forms of job search support</a> from the HackR staff.</p>

<p>This blog post covers a bunch of online resources I tried out myself. I ultimately found my current job through a recruiter, but that doesn’t mean that job sites felt useless to me. Therefore, I’m happy to share some opinions and experiences with you. Maybe you’ll have better results. At the very least, job sites showed me just how many awesome jobs are available, which kept my spirits up during my battles with job interview stress.</p>

<h1 id="job-sites-and-search-tools">Job Sites and Search Tools</h1>

<h2 id="whitetruffle">Whitetruffle</h2>
<ul>
  <li><strong>The gist:</strong> Employers and job seekers are matched using a system akin to online dating.</li>
  <li><strong>My experience:</strong> I only tried out <a href="http://www.whitetruffle.com/">Whitetruffle</a> for a few days. I revisisted sparingly.</li>
  <li><strong>My recommendation:</strong> Thumbs down. I see potential for the site, but for now, it’s lackluster.</li>
</ul>

<p>It feels a bit hollow. Much like with online dating, everyone makes a profile. Companies look at job seekers’ profiles, and job seekers like you can look at companies’ profiles. There are Like buttons to express interest. Mutual interest leads to a match. A match leads to an email notification. An email notification is <em>supposed to</em> lead to a conversation or some sort of initial phase of job candidacy…right?</p>

<p>You are also given notifications when an employer says they like your profile. The site will nag you to respond to the employer. However, in my experience, employers didn’t respond after I indicated mutual interest. Boooo! This made me wonder if employers just click the Like button on every profile (i.e., spamming) in hopes of stirring up job seeker interest.</p>

<h2 id="hired">Hired</h2>
<ul>
  <li><strong>The gist:</strong> “Auctions” occur regularly. During auctions, employers “bid” on you.</li>
  <li><strong>My experience:</strong> I went through a couple of auctions, which resulted in a few on-site interviews.</li>
  <li><strong>My recommendation:</strong> Thumbs up. I will explain some shortcomings, but overall, Hired is looking good.</li>
</ul>

<p><a href="http://www.hired.com/">Hired</a> is quite an ambitious setup. Job seekers must pass a few coding challenges to enter their pool of candidates, but when I joined, the site hadn’t yet implemented the challenges, so I was able to join after my profile was approved. Hired must have convinced employers that their candidates are top notch because employers were “bidding” salaries between $105,000 and $130,000 on me.</p>

<h3 id="misleading-but-worth-it">Misleading, but worth it?</h3>

<p>However, the auction format is quite misleading because it implies that you must accept the highest bid. It also implies that employers must hire you and offer you whatever they bid. This is not the case. There are no strict obligations. You must still pass whatever interview process employers have. Employers can still ultimately reject you. Employers can offer you whatever salary they want to offer you if you pass their interviews. In other words, Hired simply uses an auction format as a gimmick to get people excited to participate. It’s a trick, but I’m not even mad.</p>

<p>Why not? Because the pool of employers on Hired is pretty darn good. I got serious interest from 5+ companies. I got multiple on-site interviews. I got two offers. Plus, if you get a job, Hired will give you a $2,000 bonus. Awesome, right?</p>

<p>Now it’s not all rosy. Some companies that were interested in me seemed really boring. The companies that gave me offers both offered me salaries below their respective bids. In the end, I didn’t accept any job offers because I didn’t think I was going to fit well within the companies or something irked me about the company. I should also note that Hired “provides” you with an “advocate” –in less disguised terms, Hired assigns a recruiter to you. The recruiter will call you pretty often to help plan interviews and to eventually nudge you into accepting an offer. If this sounds potentially annoying to you, don’t fret because I’ve dealt with many recruiters, and my Hired recruiter was definitely one of the nicer ones (my only beef is that the recruiter would sometimes call me in the morning when I was sleeping in late).</p>

<p><strong>Caveat:</strong> some of my friends used Hired, and they didn’t have a great experience. For me, the only real bummer was when Hired stopped including me in auctions. I think I may have disappointed my “advocate” by not accepting job offers, and I may have reacted poorly to the recruiter’s nudging because at the time, I thought it was a bit too much. Little did I know that he was far less pushy than most recruiters.</p>

<h2 id="dice">Dice</h2>
<ul>
  <li><strong>The gist:</strong> Generic job board with a reputation for being stalked by recruiters.</li>
  <li><strong>My experience:</strong> I put my résumé on Dice and within 2 days, I was receiving tons of emails from 3rd party recruiters and head hunters.</li>
  <li><strong>My recommendation:</strong> Thumbs up. Dice is effective, but you will NOT enjoy the experience.</li>
</ul>

<p>Dice is an ugly site that is incredibly helpful in a painful way. First, I created a résumé specifically for Dice. What does this mean? Dice is for when you WANT spam from recruiters. Dice is for when you want to turbocharge your job search. <strong>Dice is for when you’re finally ready to destroy your fear of sharks, so you jump in a shark tank with craploads of bleeding tuna attached to your wetsuit.</strong> Do you get the picture, or must I throw more ridiculous warnings at your eyes? You must be mentally prepared to be inundated with contact from recruiters. They can sometimes be…unpleasant.</p>

<p>The onslaught of recruiter spam arrives from Dice because your profile is <em>public</em>. Your profile is rather pointless <em>except</em> for the résumé part of the profile. This means that your résumé has to be public, so it’s a good idea to upload a variant that excludes your contact info. Recruiters will check out your résumé and contact you via Dice messaging (which gets sent to your email). You then respond to recruiters, and work with them to get interviews and get hired. It’s a very clunky process. I could rant for several more paragraphs on the downsides of working with recruiters. However, it can be worth it. I’m very happy at my current job, which I earned through a recruiter.</p>

<h2 id="linkedin">LinkedIn</h2>
<ul>
  <li><strong>The gist:</strong> Networking, stalking, and head hunters.</li>
  <li><strong>My experience:</strong> Messaging through LinkedIn actually helped me. Also, I got the feeling that employers/recruiters viewed my LinkedIn more than they read my actual résumé.</li>
  <li><strong>My recommendation:</strong> Thumbs up. Linkedin is overrated, but it’s versitile and omnipresent.</li>
</ul>

<p>I didn’t get a ton of recruiters reaching out to me via LinkedIn. It can’t compete with Dice in that department, but at least with LinkedIn, you get contacted by in-house recruiters, not just 3rd party recruiters.</p>

<p>That said, after I got a job, I updated my LinkedIn profile to show my new gainful employment. Consequently, I’ve been contacted by recruiters at least a few times a week even though I’m not actively trying to get a job. In other words, the recruiter “spam” really only pours in if you’re currently employed (or experienced).</p>

<h3 id="other-uses">Other Uses</h3>

<p>Not to give false hope, but you may want to consider paying for a LinkedIn pro account. This lets you send a few messages to people you’re not connected with. I used this feature to contact executives and engineers at a few companies I was interested in. A couple of folks at one company actually replied to my messages, in which, I sincerely gushed about the company (and bragged about my 1337ness of course).</p>

<h3 id="quick-aside-unique-rsums-and-cool-profiles">Quick Aside: “Unique” résumés and cool profiles</h3>

<p>I consider my LinkedIn profile to be a way for me to show off a bit of my personal style. Some people try to be edgy or unique by formatting their résumés in a different way, but I’ve heard that’s actually a bad idea. Not to mention, a lot of people just don’t come up with good designs. Some do, but plenty don’t. Besides, <a href="/blog/2014/05/31/dev-job-search-tips-from-the-coding-interview-guru/#interviewers-process--employers-perspective">résumés need to be easily skimmed</a> by human eyes and easily scanned by software. After I got hired, I switched from being a job seeker to being an interviewer within my first week at the company. I saw over 10 resumes and sadly, the bland-looking ones were generally easier to skim. The uniquely formatted ones showed good intentions, but poor execution. You should think twice before you use bombastic fonts and lighter colors.</p>

<p>Oh! Back to my original point: I use my LinkedIn profile to demonstrate a bit of my personality through <em>writing style</em> –not through formatting (although I do add bullet points because their text organization powers are un-friggin’-paralleled). In fact, <strong>for pretty much any job site that required me to create a profile, I put in quite a bit of effort to write something actually interesting</strong>. It can be difficult to flex creative muscles for such tasks, but I believe it’s worth it to prevent your profile from being read with the same dry tone as every other candidates’ boring dossier. If you have 5+ years of perfectly relevant skills, then you can probably write a profile devoid of personality/creativity, and you’ll still stand out as a stellar candidate. Hooray for when that day arrives.</p>

<h1 id="stay-tuned">Stay Tuned</h1>

<p>Check back (somewhat) soon for more opinions and anecdotes on software developer job search sites. In part 2 of this Dev Job Searching Tools Roundup, I will ramble about Readyforce, The Muse, The Sourcery, AngelList, VC job listings, and more.</p>

<p>In future blog posts, I will cover other software engineering job hunting topics. I’m particularly excited to discuss my impressions from the other side of interview process. Also on my to-blog list: inheritance in JavaScript and lots of AngularJS best practices / app architecture patterns.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HackR Diary] [Dev Job Search] Tips from the Coding Interview Guru]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/05/31/dev-job-search-tips-from-the-coding-interview-guru/"/>
    <updated>2014-05-31T20:37:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/05/31/dev-job-search-tips-from-the-coding-interview-guru</id>
    <content type="html"><![CDATA[<blockquote class="twitter-tweet" lang="en"><p>Author of Cracking the Coding Interview, <a href="https://twitter.com/gayle">@gayle</a> , talking to <a href="https://twitter.com/HackReactor">@hackreactor</a> <a href="http://t.co/aVbcohgqSG">pic.twitter.com/aVbcohgqSG</a></p>&mdash; Jeff Lee (@RebootJeff) <a href="https://twitter.com/RebootJeff/statuses/423949825587945472">January 16, 2014</a></blockquote>
<script async="" src="http://RebootJeff.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>In a <a href="/blog/2014/05/11/hackr-diary-weeks-11-12-and-beyond/#overtime-support">previous post</a>, I mentioned that attended a talk given by <a href="http://www.technologywoman.com">Gayle Laakmann McDowell</a> when she visited Hack Reactor. She’s the author of the famous <em>Cracking the Coding Interview</em>, which is a book that helps developers perform better when interviewed for a new job. Her text mostly focuses on algorithm challenges, but there’s also a lot of content that has more to do with coaching up interview candidates.</p>

<p>I really liked McDowell’s presentation at Hack Reactor. There were plenty of intriguing anecdotes, and of course, there was plenty of good advice. Plus, she included a lot of insight into the hiring process. Many of her stories and comments provided the Hack Reactor community with a “behind the scenes” sort of perspective.</p>

<p>Keep in mind that she worked for companies like Apple, Microsoft, and Google, so <strong>her advice comes from the perspective of giant companies</strong>. I doubt her tips apply equally to smaller employers. For example, McDowell heavily emphasized the importance to study certain algorithms (e.g., various sorting and searching algos) and data structures (e.g., trees, hashes, etc). In my experience mostly interviewing with smaller companies (fewer than 500 employees; as few as 5 employees), studying textbook algorithms and data structures wouldn’t have helped me as much as studying more web-specific skills.</p>

<p>That said, I still want to share some of the more interesting takeaways from McDowell’s talk.</p>

<h1 id="interviewers-process--employers-perspective">Interviewers’ Process / Employers’ Perspective</h1>

<ul>
  <li>Your performance is evaluated relative to other candidates (so you’re not just being judged based on fixed benchmarks).</li>
  <li>Resumes are barely read. You must make yours easy to skim within 15 seconds.</li>
  <li>Unless it’s a warm-up question, you are not expected to get the solution right away.</li>
  <li>Employers judge your GitHub and public repos based on coding style (<a href="https://github.com/airbnb/javascript">do you violate any major no-nos?</a>) and use of <a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/">design patterns</a>. They don’t have much time to judge app architecture.
    <ul>
      <li><em>My 2 Cents:</em> Perhaps this falls under “design patterns”, but I would like to add that there is time to judge your use of a framework. If the employer is familiar with the frameworks you used, they will notice when you fail to follow the framework’s more important conventions. For example, for AngularJS apps, I will notice if you put too much logic in the views, if you abuse $rootScope (which is akin to relying on global scope variables as a crutch), if you create bloated controllers, if you lack services/factories/providers, etc. I will be extra happy if I see you use multiple modules, if I see tests, if I see usage of Angular best practices, etc.</li>
    </ul>
  </li>
  <li>Only the interviewer knows how well you did in the interview. You may think you aced it. You may think you bombed it. <a href="http://www.technologywoman.com/2011/03/31/why-your-interview-performance-is-impossible-to-judge/">But you don’t really know</a>.</li>
</ul>

<p><blockquote><p>When I was at Google, I referred a number of candidates, and ran a little (informal) experiment. How well could people judge their performance?<br/>After each candidate completed their interview, I’d ask them how they did. Then, I’d look up their actual performance. And guess what? There was no correlation. None. Zip. Zero. Zilch.</p><footer><strong>–Gayle L. McDowell</strong></footer></blockquote></p>

<h1 id="interview-coaching--advice">Interview Coaching / Advice</h1>

<ul>
  <li>When answering a behavioral/experience question, you should tell a story. Your story-telling should use the following format: Premise, Situation, Action, Result. The “premise” is a quick, 1-sentence intro like “One time, I had to do X for an app.” The “situation” is the context of your story. The “action” and “result” are pretty self-explanatory. I imagine Laackmann’s motivation for this advice is that interviewees usually leave out at least one of these four parts when discussing valuable past experience.</li>
  <li>For each major experience you include on your resume, you should be prepared to discuss what you liked, what you disliked, what was challenging, and how you solved difficult problems/bugs.</li>
  <li>Always follow up with interviewers afterwards. Send them thank-you emails and ask about next steps.</li>
</ul>

<h2 id="what-to-worry-about">What to Worry About</h2>

<ul>
  <li>Your conversational skills don’t need to be great because employers are desperate for technical skills.
    <ul>
      <li><em>My 2 Cents:</em> I think this is dangerous advice. It might apply to a giant company, but if you’re joining a smaller team, you need to be decent at chatting. Culture fit is also a bigger concern for smaller companies, and most company cultures include “must be decently articulate” as a core component.</li>
    </ul>
  </li>
  <li>Worry less about super advanced algorithms, but you should worry a lot about the common algorithms and data structures such as: hashes, trees (and common tree methods such as depth/breadth-first search), binary search, merge sort, and quick sort.
    <ul>
      <li><em>My 2 Cents:</em> I disagree. If you’re aiming for a back-end job, then maybe you need to be more of an algo+data structures expert. But if you’re aiming for a front-end or full-stack job, then there are more practical concerns that you will be quizzed on. I’m happy I know tree search methods, but this kind of knowledge only helped me in a few of many interviews I did during my job search. This topic of “advanced algorithms vs practical concerns” is commonly debated, but I have my reasons, which I hope to discuss in a future blog post. For the record, I’ve conducted interviews at my current job. I ask practical questions that most candidates struggle with.</li>
    </ul>
  </li>
  <li>You must know Big-O, recursion, and maybe even bit-wise.
    <ul>
      <li><em>My 2 Cents:</em> I disagree about the bit-wise stuff (although, I suppose it’s impressive if you can bust it out with ease).</li>
    </ul>
  </li>
</ul>

<h2 id="whiteboarding-tips">Whiteboarding Tips</h2>

<ul>
  <li>If you are asked a trivia question, and you don’t know the answer, consider reasoning the answer by imagining how things should work. For example, if asked a question about CSS, imagine you created CSS. How would you implement a given rule?
    <ul>
      <li><em>My 2 Cents:</em> This one’s iffy because a lot of trivia questions are meant to focus on unintuitive situations. A quick aside for a quick example: <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/margin_collapsing">margin collapsing</a>. If there are two sibling <code>&lt;div&gt;</code> elements, and they both have <code>margin: 10px;</code>, then how much space is between them? You’d expect there to be 20px of space between them, but instead, there is only 10px thanks to margin collapsing.</li>
    </ul>
  </li>
  <li>When solving an algorithm question, come up with some test cases (including edge cases!).</li>
  <li>Think out loud when trying to solve an algorithm question. Don’t just write code.
    <ul>
      <li><em>My 2 Cents:</em> As someone who has interviewed dev candidates, I can’t stress this enough.</li>
    </ul>
  </li>
  <li>When whiteboarding, be conscious of your handwriting, alignment, etc.</li>
  <li>It’s ok to…
    <ul>
      <li>start solving a problem via pseudocode before writing real code. Just let your interviewer(s) know your plan.</li>
      <li>write <code>TODO</code> comments in your code for important-but-tangential stuff like input validation</li>
      <li>create proper variable names at first and then switch to abbreviated versions</li>
    </ul>
  </li>
  <li>Use “breadth-first coding”: write your code to use helper functions that may not exist. Write the helper functions later as needed. Think of it like writing an outline before writing an essay so then other people can quickly get a grasp of your overall approach rather than waiting and awkwardly watching for several minutes while you write out everything.
    <ul>
      <li><em>My 2 Cents:</em> This sounds like a no-brainer, but you’d be surprised how many people don’t do this. To be fair, this is like writing modular code BEFORE refactoring.</li>
    </ul>
  </li>
  <li>Beware of common bugs you might make regardless of how awesome you are. Examples:
    <ul>
      <li>off-by-one errors</li>
      <li>bad comparison operators in if-statements, loops, and other conditionals</li>
      <li>math where you must perform a check before performing the operation to prevent edge cases from making your program explode. E.g., it might be good to perform a check before performing division so then you stop divide-by-zero errors.</li>
    </ul>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Questions to ask dev interviewers]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/01/09/questions-to-ask-dev-interviewers/"/>
    <updated>2014-01-09T20:06:00-08:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/01/09/questions-to-ask-dev-interviewers</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Do you have any questions for me?</p>
</blockquote>

<p>When an employer/recruiter asks you this question, you should answer, “YES OF COURSE I DO.” Then you casually bombard them with the questions listed below. Although, you should keep in mind that some questions can be answered just by doing your homework (researching the company). So don’t ask <em>all the questions</em>.</p>

<h1 id="company-vision">Company Vision</h1>

<ul>
  <li>Where will the company be in 2 years? (maybe “2 years” should be greater if company is older)
    <ul>
      <li>Will the business model remain the same? Is the business model still in flux?</li>
      <li>How many employees will there be in X years? What many of them will be engineers?</li>
    </ul>
  </li>
  <li>Does the company plan to scale up? How?
    <ul>
      <li>Increased marketing efforts?</li>
      <li>Increased R&amp;D?</li>
      <li>Growing talent?</li>
      <li>Creating partnerships?</li>
      <li>Business model pivot?</li>
    </ul>
  </li>
</ul>

<h1 id="employee-logisticsculture">Employee logistics/culture</h1>

<ul>
  <li>What are typical work hours?</li>
  <li>
    <p>How often do people actually take vacations?</p>
  </li>
  <li>What are some examples of your company’s culture in play?
    <ul>
      <li>e.g., It’s one thing to say the company is open and friendly, but what are examples of that happening?</li>
    </ul>
  </li>
  <li>
    <p>What aspects of your company help shape the cuture?</p>
  </li>
  <li>Older/bigger companies: One of the stereotypical downsides of working at a more established company is that employees don’t feel like they have a big enough impact. How do you ensure employees can make substantive contributions rather than feel like a tiny cog in a big machine?
    <ul>
      <li>How do you ensure that employees always get to try/learn new things?</li>
    </ul>
  </li>
</ul>

<h1 id="engineering-logistics">Engineering Logistics</h1>

<ul>
  <li>How many engineers does the company have?
    <ul>
      <li>How many back-end, how many front-end, how many full-stack?</li>
    </ul>
  </li>
  <li>How big are the engineering teams?
    <ul>
      <li>Will team size change a lot (scaling up)?</li>
    </ul>
  </li>
  <li>Do employees ever change teams/roles?</li>
  <li>Exactly who would I be working with?
    <ul>
      <li>What are their roles, backgrounds, etc?</li>
    </ul>
  </li>
  <li>How does user feedback ultimately end up reaching the engineers?</li>
  <li>What kind of development cycle do they use?
    <ul>
      <li>What is the structure of a typical sprint?</li>
      <li>How often do engineers deploy?</li>
      <li>Do they use Agile SCRUM, Kanban, etc?</li>
    </ul>
  </li>
</ul>

<h1 id="engineering-culture">Engineering Culture</h1>

<ul>
  <li>How does the company ensure quick, painless onboarding?
    <ul>
      <li>(does the company ensure new hires don’t get overwhelmed by huge, existing codebase?)</li>
      <li>(or is there no onboarding at all because the company is too tiny?)</li>
    </ul>
  </li>
  <li>Does the company have strong opinions on coding aesthetics?
    <ul>
      <li>Does the company have a style guide?</li>
    </ul>
  </li>
  <li>Mentorship?</li>
  <li>Are there code reviews?
    <ul>
      <li>Are they scheduled or ad hoc? (“ad hoc” may be BS for “rarely”)</li>
    </ul>
  </li>
  <li>Is there time set aside for post-mortems, reflections, retrospectives, etc?</li>
  <li>What kind of testing is in place?
    <ul>
      <li>(unit testing, integration testing, e2e testing, QA engineering)?</li>
      <li>which tools?</li>
    </ul>
  </li>
</ul>

]]></content>
  </entry>
  
</feed>
