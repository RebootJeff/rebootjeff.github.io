<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web development | RebootJeff.com]]></title>
  <link href="http://RebootJeff.github.io/blog/categories/web-development/atom.xml" rel="self"/>
  <link href="http://RebootJeff.github.io/"/>
  <updated>2017-08-14T23:18:57-07:00</updated>
  <id>http://RebootJeff.github.io/</id>
  <author>
    <name><![CDATA[Jeff Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Web Dev Machine Setup 2016]]></title>
    <link href="http://RebootJeff.github.io/blog/2016/04/25/web-dev-machine-setup-2016/"/>
    <updated>2016-04-25T19:04:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2016/04/25/web-dev-machine-setup-2016</id>
    <content type="html"><![CDATA[<h1 id="my-web-dev-setup">My Web Dev Setup</h1>

<p>It‚Äôs been nearly two years since I wrote about <a href="http://rebootjeff.github.io/blog/2014/05/15/my-sublime-text-2-setup-and-customization/">my preferences for Sublime Text 2</a>. In those two years, I‚Äôve accrued more tools, and I‚Äôve installed/configured a better web dev setup for myself. <strong><em>My current setup is <a href="https://github.com/RebootJeff/my-installfest">documented in a repo</a></em></strong>, which will be kept up to date so then any time I need to set up a new machine, I have a quick guide that I can reference.</p>

<p>There are a few aspects of my setup worth explaining‚Ä¶</p>

<h2 id="atom-vs-sublime-text">Atom vs Sublime Text</h2>

<p>I‚Äôve switched to Atom. There‚Äôs no doubt that Sublime Text is way faster. I still use it to read and edit extremely large files (e.g., large JSON). But Sublime Text always felt a bit clunky in its GUI. Most notably, the package manager for Sublime Text wasn‚Äôt very nice to use.</p>

<p>On Macs, Atom has a lot of great features for updating the software and packages. It has one-click installation of shell commands (e.g., <code>atom [filename]</code> to open a file in Atom via terminal).</p>

<p>On Linux, these features are missing, but I still use Atom on my Ubuntu machine because its GUI feels more modern than Sublime Text‚Äôs GUI. Also, Atom‚Äôs built-in Markdown and Git features are pretty sweet.</p>

<p>That said, <a href="https://code.visualstudio.com/">Microsoft‚Äôs Visual Code Studio</a> looks enticing. The battle of free code editors is really heating up! Visual Code Studio appears to be more powerful than Atom ‚Äì and I‚Äôve got to give it a try eventually ‚Äì but Atom‚Äôs community is at least 2x larger at the moment. The ecosystem of Atom packages is outstanding.</p>

<p>Some of my favorite Atom packages:
- <a href="https://atom.io/packages/pigments">pigments</a> to highlight colors (great for CSS/SCSS/LESS code that deal with colors)
- <a href="https://atom.io/packages/file-icons">file-icons</a> to show icons specific to different file types
- <a href="https://atom.io/packages/autocomplete-emojis">autocomplete-emojis</a> because emojis can spice up any comment/documentation! üåü</p>

<p><img src="/images/20160425/atom_ss.png" alt="Atom screenshot" /></p>

<h2 id="browsers">Browsers</h2>

<h3 id="a-few-words-about-chrome">A few words about Chrome</h3>

<p>I still use Google Chrome as my main browser for development, and now I use a few Chrome extensions a whole lot: <a href="https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo?hl=en-US">Advanced REST Client</a> for testing REST APIs and <a href="https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc/related?hl=en">JSONView</a> for browsing JSON data.</p>

<p>For development, it can be helpful to disable the ‚Äúprefetch resources‚Äù advanced setting. If it‚Äôs enabled, the network panel of your Chrome DevTools might jump the gun, confusing you in the process.</p>

<h3 id="firefox-is-getting-better">Firefox is getting better</h3>

<p>That said, I‚Äôm enjoying <a href="https://www.mozilla.org/en-US/firefox/developer/">Mozilla Firefox Developer Edition</a>. It‚Äôs got some <a href="https://www.youtube.com/playlist?list=PLo3w8EB99pqLRJBWRCoyGTIrkctoUgB9W">fancy dev tools</a> that I haven‚Äôt gotten a chance to use much, but the browser itself feels pretty speedy. Unlike normal Firefox, the dev edition has separate processes for each tab.</p>

<h4 id="mini-rant-modern-browser-wars">Mini-Rant: Modern Browser Wars</h4>

<p>Also, I like supporting Mozilla by using their browser. <a href="https://www.youtube.com/watch?v=_YkTAu333xM">It‚Äôs good to have some competition in browsers</a>, and Mozilla has no conflict of interest with the web. They‚Äôre more likely to promote an open web as much as possible whereas Google and especially Apple have a conflict of supporting web versus supporting iOS/Android apps. <a href="http://arstechnica.com/information-technology/2015/06/op-ed-safari-is-the-new-internet-explorer/">Some say Safari is neglected</a> by Apple because they care more about dedicating resources to iOS + the App Store.</p>

<p>There‚Äôs also a nice conspiracy theory suggesting that Apple would rather web apps not rise in popularity because that would detract from the App Store‚Äôs prominence. You could argue the same goes for Google and the Play store, but Google‚Äôs done some amazing work on ‚Äú<a href="https://developers.google.com/web/progressive-web-apps">Progressive Web Apps</a>‚Äù to make web tech (push notifications, offline support, etc) as powerful as native mobile apps.</p>

<h2 id="mac-tips--tricks">Mac Tips &amp; Tricks</h2>

<p><a href="https://github.com/RebootJeff/my-installfest">My documentation repo</a> has more tips &amp; tricks, but I‚Äôll lay out a few here. They all happen to relate to making development on a Mac even better (I guess I‚Äôve been using my Mac way more than my Ubuntu machine lately).</p>

<h4 id="window-management">Window Management</h4>
<p>The latest Mac OSX has a built-in window layout feature, but it sucks. I continue to use <a href="http://www.irradiatedsoftware.com/sizeup/">SizeUp</a>. It‚Äôs free and more powerful/flexible.</p>

<h4 id="installing-software-on-macs">Installing software on Macs</h4>
<p>I try to install as much as possible via <a href="http://brew.sh/">Homebrew</a>. It makes updating installed software a bit easier, and it can help you avoid common pitfalls (e.g., installing Node.js via Homebrew avoids permissions issues with <code>npm install -g</code> that you‚Äôd normally have to fix yourself).</p>

<h4 id="horrible-smart-quotes">Horrible ‚ÄúSmart Quotes‚Äù</h4>
<p>Do yourself a favor and go into the keyboard settings to disable Smart Quotes. Otherwise, they could eventually find their way into your code and screw you up in the most insidious way (it could take awhile for you to realize you‚Äôve accidentally typed/copy/pasted some Smart Quotes into your code).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why fast code matters even when phones have octa-core CPUs]]></title>
    <link href="http://RebootJeff.github.io/blog/2015/11/16/why-fast-code-matters-even-when-phones-have-octa-core-cpus/"/>
    <updated>2015-11-16T09:10:00-08:00</updated>
    <id>http://RebootJeff.github.io/blog/2015/11/16/why-fast-code-matters-even-when-phones-have-octa-core-cpus</id>
    <content type="html"><![CDATA[<p>Have you seen the new Nexus 6P smartphone? It packs a ‚Äúsystem on a chip‚Äù that features <em>two</em> CPUs, each with <em>four</em> cores. What a crazy, powerful world we live in! Surely modern smartphones can run your JavaScript code without breaking a sweat, right?</p>

<p><img src="/images/20151116/ss_snapdragon810.png" alt="Snapdragon 810 promo material" /></p>

<h2 id="writing-performant-code-is-hard">Writing Performant Code is Hard</h2>

<p>It‚Äôs true that really low-level performance optimizations often don‚Äôt feel like they‚Äôre worth learning or worrying about. You‚Äôve got to deal with complicated business logic and juggling user data and state! You don‚Äôt have time to record CPU profiles for every new function you write!</p>

<p>On top of that, <strong>computers keep getting more powerful, right?</strong></p>

<h2 id="but-what-does-the-future-hold">But What Does the Future Hold?</h2>

<p>Here‚Äôs the insight*: if you‚Äôre targeting laptops/desktops, then you can probably feel safe about imperfect code in many respects. However, <strong>the trend of computers getting more powerful isn‚Äôt what it seems.</strong></p>

<h3 id="devices-speed-up-after-slow-starts">Devices speed up after slow starts</h3>

<p>Look at the trend from a bigger picture perspective: modern tech has gone from powerful desktops to less powerful laptops (and netbooks and Chromebooks!) to even less powerful smartphones/tablets to much less powerful wearables and IoT devices. Consider that smartphone apps might not be so popular if web apps were more performant earlier in the history of iOS, Android, and web views.</p>

<p><em>*Disclaimer:</em> I can‚Äôt take credit for the insight. I read it somewhere on the Internet, and I don‚Äôt remember where. Probably Quora though.</p>

<p>I‚Äôll also add my own thought to chew on: Memory optimizations might still be important as folks browsing the web tend to leave a ton of tabs open and don‚Äôt close/reopen their browsers as often as they used to.</p>

<h2 id="whats-a-well-intentioned-developer-to-do">What‚Äôs a well-intentioned developer to do?</h2>

<p>To be fair, browsers have come a long way. And it can be tough to care about tiny performance optimizations when browsers might end up handling them for you. For example, string concatenation used to be a no-no in JavaScript. The recommended best practice was to use <code>Array.prototype.join</code> instead of string concatenation.</p>

<p>This ‚Äúbest practice‚Äù is now <a href="http://archive.oreilly.com/pub/a/server-administration/excerpts/even-faster-websites/writing-efficient-javascript.html">very outdated</a>.</p>

<p>Like most decisions in reality, there will be trade-offs and ROI concerns. Like most decisions, the right answer is probably somewhere in between two extremes. Like most of my commentary on this blog, I‚Äôm dispensing info with JavaScript in mind, but some takeaways are language-agnostic.</p>

<p>My decision-making process for how to spend my time on performance involves a few key points:</p>

<ul>
  <li>Always stay curious about current best practices.</li>
  <li>Don‚Äôt learn a ‚Äúbest practice‚Äù and expect it to remain ‚Äúbest‚Äù forever. If someone teaches you a performance optimization tactic, check the Internet to make sure it‚Äôs still relevant.</li>
  <li>Focus on higher-level performance optimizations (e.g., learning <a href="https://blog.codeschool.io/2015/09/11/how-to-keep-web-animations-from-slowing-you-down/">performant animation techniques</a>, shaming nested loops/traversals, plugging memory leaks, refactoring to recursion for <a href="http://www.2ality.com/2015/06/tail-call-optimization.html">Tail Call Optimization</a>) rather than lower-level concerns (e.g., <code>while</code> loop vs <code>for</code> loop, <code>i++</code> vs <code>++i</code>, etc).</li>
  <li>Learn how code is actually digested by your target platform (e.g., for browser-based apps, <a href="https://www.udacity.com/course/website-performance-optimization--ud884">learn the Critical Rendering Path</a>, learn the <a href="http://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/">JavaScript Event Loop</a> ‚Äìand Web Workers as a bonus).</li>
  <li>Readability matters. If other devs can‚Äôt understand your code because of obscure micro-optimizations, then you‚Äôre probably hurting the team. Consider sacrificing the optimizations to prioritize collaboration.</li>
  <li>Keep dreaming for the day when platforms will optimize your code for you! Just kidding. It‚Äôs kinda sorta already happening (<a href="https://twitter.com/RebootJeff/status/603281637070123008">learn about JIT compilers</a>).</li>
</ul>

<p>I‚Äôve noticed many of my ‚Äúkey points‚Äù really just boil down to ‚Äúdo your best, buddy!‚Äù Freaking brilliant.</p>

<h4 id="ps">P.S.</h4>

<p>Because JavaScript is single-threaded, the multi-core loveliness of modern CPUs doesn‚Äôt directly help your web app unless you use web workers.</p>

<p>That said, there will be some benefit regardless of web workers just because devices such as smartphones usually have to juggle more than just your web app (e.g., background apps, managing sensors, etc). The extra cores should help prevent the phone from stressing out from the juggling, so that tangentially helps your web app‚Äôs performance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Start AND Continue Learning JavaScript and Web Development]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/11/23/how-to-learn-javascript-and-web-development/"/>
    <updated>2014-11-23T21:37:00-08:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/11/23/how-to-learn-javascript-and-web-development</id>
    <content type="html"><![CDATA[<p><img src="/images/20141123/IMG_20141116_135049sp.jpg" alt="Teaching my JS Fundamentals workshop" /></p>

<p class="my-caption">Me teaching a JavaScript workshop for beginners</p>

<p class="last-updated">Last update on Nov 30, 2014 to add a great link to the "Compilations" section.</p>

<ol>
  <li>A couple of weeks ago, a friend asked me for advice on giving advice to beginners.</li>
  <li>One week ago, I taught a <a href="http://www.meetup.com/hackreactor/events/217841372/">class on JavaScript</a> for beginners (or <em>advanced</em> beginners ‚Äìas I like to say).</li>
  <li>A few days ago, I recently found a <a href="https://www.quora.com/Should-I-purchase-a-Code-School-subscription-to-prepare-for-the-Hack-Reactor-interview">Quora question about getting better at JS</a>.</li>
</ol>

<p>These three moments have had my brain wondering about how to point coding newbies in the right direction. After some Googling and recalling my own past, I‚Äôve gathered some links that will hopefully help beginners and maybe even intermediate folks. However, I should warn you that I haven‚Äôt tried out all the various services for myself.</p>

<h2 id="the-basics">The Basics</h2>

<p><a href="http://imgur.com/gallery/BL6Vs">This Imgur post</a> lists 6 sites that provide tutorials for getting started in coding. I‚Äôve personally used Code School and Codecademy. They‚Äôre great, but after awhile, you‚Äôll want to explore other options. They are not sufficient by themselves.</p>

<h2 id="compilations">Compilations</h2>

<p>These sites gather tutorials and various resources into one place. Most of these also give some guidance or roadmap to help beginners prioritize what to learn:</p>

<ul>
  <li><a href="http://programming-motherfucker.com/become.html">Programming, Motherf‚Ä¶</a>: Categorized links for various languages.</li>
  <li><a href="https://www.bento.io/">Bento</a>: Links organized into manageable sections.</li>
  <li><a href="http://www.whatsnext.info/#/javascript">What‚Äôs Next</a>: Links grouped by topic and difficulty.</li>
  <li><a href="http://www.theodinproject.com/courses">The Odin Project</a>: Open-source web dev curriculum.</li>
  <li><a href="http://www.jstherightway.org/">JavaScript The Right Way</a>: Links covering the entire JS ecosystem (basics, patterns, testing, frameworks, news/podcasts/feeds).</li>
</ul>

<h2 id="the-fundamentals-of-js">The Fundamentals of JS</h2>

<p>If you‚Äôre specifically trying to learn the quirks of JavaScript, then <a href="http://www.meetup.com/hackreactor/events/217841372/">classes like the one I teach</a> are perfect for you. If you‚Äôre not near San Francisco, you can try <a href="https://frontendmasters.com/workshops/js-fundamentals-to-functional/">online classes</a> taught by the one who helped me become a teacher (<a href="https://twitter.com/biancagando">@BiancaGando</a>).</p>

<p>But these aren‚Äôt free. Ya know what is free? This great gathering of words describing vital JS concepts: <a href="http://javascriptissexy.com/16-javascript-concepts-you-must-know-well/">16 JavaScript Concepts JavaScript Professionals Must Know Well</a></p>

<h2 id="the-community">The Community</h2>

<p>San Francisco is my neck of the woods. If you‚Äôre lucky enough to be around here, then you should take advantage of the stellar community. There are lots of free meetups/events that can help you learn. If you‚Äôre not in the area, check Meetup.com for groups that provide similar events.</p>

<ul>
  <li><a href="http://www.meetup.com/tinderbox/events/212435202/">Tinderbox</a>: They often host ‚Äúhack nights‚Äù, which might sound intimidating, but they‚Äôre very open-ended so you could show up and just ask for help learning a particular subject.</li>
  <li><a href="http://www.meetup.com/SFRails/events/199733902/">SF Rails</a>: Much like Tinderbox, the SF Rails group hosts open-ended ‚Äúprotonight‚Äù events. The group might focus on Ruby on Rails, but you‚Äôre likely to find people who can help with any beginner or intermediate level coding topic.</li>
</ul>

<p>If you‚Äôre female, you might want to search for organizations that provide free support for women. Some examples:</p>

<ul>
  <li><a href="https://www.womenwhocode.com/">Women Who Code</a></li>
  <li><a href="http://www.girldevelopit.com/">Girl Develop It</a></li>
  <li><a href="http://railsbridge.org/">Railsbridge</a></li>
  <li><a href="https://twitter.com/tevgende">Aysegul Office Hours</a></li>
</ul>

<p>Back in the day, I used <a href="http://curriculum.railsbridge.org/frontend/frontend">a free, online curriculum</a> created by Railsbridge to learn some web dev skills.</p>

<p>A Hack Reactor alum recently launched a free service called Hackvard. It helps people quickly find nearby programmers who want to meet up. After a few weeks (or days?), it was renamed to <a href="http://www.codaround.com/">Codaround</a>. One of the co-founders contacted me and mentioned that Codaround might be changed to focus on helping match mentors/teachers with students/beginners. I don‚Äôt know any details, but it‚Äôs worth keeping an eye on this.</p>

<h2 id="games">Games</h2>

<p>Want to play while you program? Here are some sites that turn learning to code into a game:</p>

<ul>
  <li><a href="http://www.checkio.org/">CheckIO</a>: When I <a href="http://localhost:4000/blog/2013/09/02/mini-review-of-checkio/">tried them out</a>, I wasn‚Äôt impressed by their attempt to cover coding challenges in a layer of gamification. A CheckIO employee reached out to me and told me things have changed a lot. I haven‚Äôt verified his claims, but their user base was pretty large last time I checked, and their blog is very active, so they‚Äôre alive and kicking.</li>
  <li><a href="http://codecombat.com/">Code Combat</a>: I played with this a couple months ago. It was fun, but a tad buggy. I like the idea of writing code to control your character.</li>
  <li><a href="http://www.screeps.com/">Screeps</a>: This looks quite promising. You write code to control small armies.</li>
</ul>

<h2 id="what-else">What else?</h2>

<p>Let me know in the comments (or via Twitter) if you know of any other solid resources that help people learn JavaScript and other programming skills.</p>
]]></content>
  </entry>
  
</feed>
