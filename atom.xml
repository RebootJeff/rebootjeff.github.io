<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[RebootJeff.com]]></title>
  <link href="http://RebootJeff.github.io/atom.xml" rel="self"/>
  <link href="http://RebootJeff.github.io/"/>
  <updated>2017-08-14T23:43:07-07:00</updated>
  <id>http://RebootJeff.github.io/</id>
  <author>
    <name><![CDATA[@RebootJeff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What's the Point of One-on-Ones with Your Manager?]]></title>
    <link href="http://RebootJeff.github.io/blog/2017/08/14/one-on-ones-with-manager/"/>
    <author>
      <name><![CDATA[@RebootJeff]]></name>
      
    </author>
    <updated>2017-08-14T22:38:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2017/08/14/one-on-ones-with-manager</id>
    <content type="html"><![CDATA[<p>I’ve heard some newbies and even not-so-newbies wonder about what to do in 1:1 meetings with their managers. As a result, I gave some advice, and I listened to others’ advice. After collecting some thoughts, here’s the not-so-short overview…</p>

<h2 id="the-easy-stuff">The Easy Stuff</h2>

<h3 id="company-inquiries">Company Inquiries</h3>
<p>Ask for clarifications or details on the company’s roadmap. How’s the business side of things? How is the engineering dept progressing towards meeting roadmap goals? How is the roadmap changing? What factors might cause it to change?</p>

<h3 id="company-improvement">Company Improvement</h3>
<p>Bring up any pain points. Talk about possible improvements in company processes (PTO, food, etc) or technical process (git practices, code reviews, hiring, dev environment, deployment, tech stack).</p>

<h3 id="self-improvement">Self Improvement</h3>
<p>How can you improve your value to the company?
Are there any upcoming training opportunities. What do you want to learn? What does the company want you to learn? What can the company help you learn via training classes and conferences?</p>

<h2 id="the-tough-stuff-get-feedback">The Tough Stuff (Get Feedback!)</h2>
<p>But make try to get specific feedback. Asking “How am I doing?” is imprecise, and therefore, it could be less helpful. Unless you’re screwing up something big, most managers probably don’t have a solid response ready (they’ve got other things on their minds –like other meetings they have that day). More precise: “What skills should I focus on? How can I help more? Are there new projects in the roadmap that I can really add value to? What goals does the company has for my role?”</p>

<p>Anyway, one of the biggest things I focus on in my 1:1s is training/learning opportunities. For example, “What’s the company’s training budget/policy? Is there any training I could take that would benefit the company directly? What about training that I’m personally interested in? Can I go to conference A, B, and/or C? Can I attend workshop D, E, and/or F? There’s a meetup I want to attend, but I’d have to leave work early every Tuesday; is that ok?”</p>

<p>I also like to discuss new hotness. For example, “I’ve been interested in technology X; can I give a presentation to the team about it even if we can’t use it any time soon? Can we possibly start using it?”</p>

<p>And suggestions for process improvements. For example, “Here are my thoughts re: onboarding, hiring, story planning, etc”.</p>

<p>Sometimes, I discuss team issues (personnel or process). For example, personnel issues: “Person X tends to interrupt me a lot. I’ve tried A, B, and C. So things have gotten better, but there’s still room for improvement. Can you help?” For example, process issues: “We need a better convention for git branching/merging.”</p>

<p>After the first 2 or 3 1:1 meetings, a decent chunk of time is dedicated to just reflect on the topics brought up in the previous meeting.</p>

<p>You can also talk about a lot of initiatives outside of the day-to-day. You can express desire to: spearhead company culture stuff, organize team events, be a mentor, start an internship program, organize meetups, volunteer at recruiting events, etc.</p>

<p>So I guess it’s a mutual feedback session: I want to discuss ways for me to grow + ways for company/team to grow.</p>

<p>Less directly, it’s a good way to see if your interests are still aligned with the team. For example, through the 1:1s, if you express concerns that are never addressed or if you express desire to work on something but you never get the opportunity –then the 1:1s help you learn it’s time to switch teams or even jobs :(</p>

<h2 id="the-bonus-stuff-get-perspective">The Bonus Stuff (Get Perspective)</h2>
<p>Ask your manager about their experiences. How many meetings do they attend on a typical (and atypical) week? What goals do they have for themselves? What do they like/dislike about the job? What did it take for them to achieve their own career goals?</p>

<p>You gain a lot of insight by learning about your manager, their perspectives, and their typical day (outside of directly interacting with you and your team). You gain insight on what it’s like to be in a formal leadership role, how content/stressed your manager is (look out for burnout), etc. This insight can help you better approach your manager with new ideas and even help make sure there are no major signs that the manager might be unhappy at the company. If the manager leaves, that could have a huge impact on your job.</p>

<h2 id="what-not-to-do">What NOT To Do</h2>

<p>It’s not a status meeting, code review session, etc.</p>

<p>This isn’t a time for simply recapping “so what have you been working on?” If your manager doesn’t already know the answer to that question, that’s a bad sign or your organization isn’t properly structured to give your managers the time/opportunity to understand direct reports’ work.</p>

<p>In other words, the 1-on-1 shouldn’t just be used as a more in-depth SCRUM/status meeting.</p>

<p>I’ve also heard that 1-on-1s could be used for in-depth code reviews, but if your organization doesn’t do proper code reviews as part of the usual process of development, that’s another bad sign.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Dev Machine Setup 2016]]></title>
    <link href="http://RebootJeff.github.io/blog/2016/04/25/web-dev-machine-setup-2016/"/>
    <author>
      <name><![CDATA[@RebootJeff]]></name>
      
    </author>
    <updated>2016-04-25T19:04:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2016/04/25/web-dev-machine-setup-2016</id>
    <content type="html"><![CDATA[<h1 id="my-web-dev-setup">My Web Dev Setup</h1>

<p>It’s been nearly two years since I wrote about <a href="http://rebootjeff.github.io/blog/2014/05/15/my-sublime-text-2-setup-and-customization/">my preferences for Sublime Text 2</a>. In those two years, I’ve accrued more tools, and I’ve installed/configured a better web dev setup for myself. <strong><em>My current setup is <a href="https://github.com/RebootJeff/my-installfest">documented in a repo</a></em></strong>, which will be kept up to date so then any time I need to set up a new machine, I have a quick guide that I can reference.</p>

<p>There are a few aspects of my setup worth explaining…</p>

<h2 id="atom-vs-sublime-text">Atom vs Sublime Text</h2>

<p>I’ve switched to Atom. There’s no doubt that Sublime Text is way faster. I still use it to read and edit extremely large files (e.g., large JSON). But Sublime Text always felt a bit clunky in its GUI. Most notably, the package manager for Sublime Text wasn’t very nice to use.</p>

<p>On Macs, Atom has a lot of great features for updating the software and packages. It has one-click installation of shell commands (e.g., <code>atom [filename]</code> to open a file in Atom via terminal).</p>

<p>On Linux, these features are missing, but I still use Atom on my Ubuntu machine because its GUI feels more modern than Sublime Text’s GUI. Also, Atom’s built-in Markdown and Git features are pretty sweet.</p>

<p>That said, <a href="https://code.visualstudio.com/">Microsoft’s Visual Code Studio</a> looks enticing. The battle of free code editors is really heating up! Visual Code Studio appears to be more powerful than Atom – and I’ve got to give it a try eventually – but Atom’s community is at least 2x larger at the moment. The ecosystem of Atom packages is outstanding.</p>

<p>Some of my favorite Atom packages:
- <a href="https://atom.io/packages/pigments">pigments</a> to highlight colors (great for CSS/SCSS/LESS code that deal with colors)
- <a href="https://atom.io/packages/file-icons">file-icons</a> to show icons specific to different file types
- <a href="https://atom.io/packages/autocomplete-emojis">autocomplete-emojis</a> because emojis can spice up any comment/documentation! 🌟</p>

<p><img src="http://RebootJeff.github.io/images/20160425/atom_ss.png" alt="Atom screenshot" /></p>

<h2 id="browsers">Browsers</h2>

<h3 id="a-few-words-about-chrome">A few words about Chrome</h3>

<p>I still use Google Chrome as my main browser for development, and now I use a few Chrome extensions a whole lot: <a href="https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo?hl=en-US">Advanced REST Client</a> for testing REST APIs and <a href="https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc/related?hl=en">JSONView</a> for browsing JSON data.</p>

<p>For development, it can be helpful to disable the “prefetch resources” advanced setting. If it’s enabled, the network panel of your Chrome DevTools might jump the gun, confusing you in the process.</p>

<h3 id="firefox-is-getting-better">Firefox is getting better</h3>

<p>That said, I’m enjoying <a href="https://www.mozilla.org/en-US/firefox/developer/">Mozilla Firefox Developer Edition</a>. It’s got some <a href="https://www.youtube.com/playlist?list=PLo3w8EB99pqLRJBWRCoyGTIrkctoUgB9W">fancy dev tools</a> that I haven’t gotten a chance to use much, but the browser itself feels pretty speedy. Unlike normal Firefox, the dev edition has separate processes for each tab.</p>

<h4 id="mini-rant-modern-browser-wars">Mini-Rant: Modern Browser Wars</h4>

<p>Also, I like supporting Mozilla by using their browser. <a href="https://www.youtube.com/watch?v=_YkTAu333xM">It’s good to have some competition in browsers</a>, and Mozilla has no conflict of interest with the web. They’re more likely to promote an open web as much as possible whereas Google and especially Apple have a conflict of supporting web versus supporting iOS/Android apps. <a href="http://arstechnica.com/information-technology/2015/06/op-ed-safari-is-the-new-internet-explorer/">Some say Safari is neglected</a> by Apple because they care more about dedicating resources to iOS + the App Store.</p>

<p>There’s also a nice conspiracy theory suggesting that Apple would rather web apps not rise in popularity because that would detract from the App Store’s prominence. You could argue the same goes for Google and the Play store, but Google’s done some amazing work on “<a href="https://developers.google.com/web/progressive-web-apps">Progressive Web Apps</a>” to make web tech (push notifications, offline support, etc) as powerful as native mobile apps.</p>

<h2 id="mac-tips--tricks">Mac Tips &amp; Tricks</h2>

<p><a href="https://github.com/RebootJeff/my-installfest">My documentation repo</a> has more tips &amp; tricks, but I’ll lay out a few here. They all happen to relate to making development on a Mac even better (I guess I’ve been using my Mac way more than my Ubuntu machine lately).</p>

<h4 id="window-management">Window Management</h4>
<p>The latest Mac OSX has a built-in window layout feature, but it sucks. I continue to use <a href="http://www.irradiatedsoftware.com/sizeup/">SizeUp</a>. It’s free and more powerful/flexible.</p>

<h4 id="installing-software-on-macs">Installing software on Macs</h4>
<p>I try to install as much as possible via <a href="http://brew.sh/">Homebrew</a>. It makes updating installed software a bit easier, and it can help you avoid common pitfalls (e.g., installing Node.js via Homebrew avoids permissions issues with <code>npm install -g</code> that you’d normally have to fix yourself).</p>

<h4 id="horrible-smart-quotes">Horrible “Smart Quotes”</h4>
<p>Do yourself a favor and go into the keyboard settings to disable Smart Quotes. Otherwise, they could eventually find their way into your code and screw you up in the most insidious way (it could take awhile for you to realize you’ve accidentally typed/copy/pasted some Smart Quotes into your code).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Example] Refactoring to Functional JS - Combine Keyed Lists]]></title>
    <link href="http://RebootJeff.github.io/blog/2015/12/11/example-refactoring-to-functional-js-combine-keyed-lists/"/>
    <author>
      <name><![CDATA[@RebootJeff]]></name>
      
    </author>
    <updated>2015-12-11T09:02:00-08:00</updated>
    <id>http://RebootJeff.github.io/blog/2015/12/11/example-refactoring-to-functional-js-combine-keyed-lists</id>
    <content type="html"><![CDATA[<p><img src="http://RebootJeff.github.io/images/20151211/pipe-174918_640.jpg" alt="pipe" /></p>

<p>Why the image of a water pipe with flowing water? It will all make sense soon, my dear reader.</p>

<h2 id="the-premise">The Premise</h2>

<p>Given a bunch of arrays kept within a JavaScript hash table (plain object), we want to extract the arrays and combine them. In other words, we’re given a collection of arrays of elements and we want a single array of elements.</p>

<p>This example was inspired by some code I found in the codebase where I work. The use case was different, but the overall idea (extracting elements from within arrays that are within an object) is the same. To make things slightly more complex, the arrays of the input object could possibly contain <code>null</code> elements because the elements were being provided by a service that could sometimes return <code>null</code>.</p>

<h3 id="example-inputoutput">Example Input/Output</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Example Input/Output Data </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// example input</span>
<span class="keyword">var</span> usersBySocialNetwork = {
  <span class="key">twitter</span>: [
    { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">@RebootJeff</span><span class="delimiter">'</span></span> },
    { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">@doitwithalambda</span><span class="delimiter">'</span></span> },
    <span class="predefined-constant">null</span>
  ],
  <span class="key">facebook</span>: [
    <span class="predefined-constant">null</span>,
    { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">Kevin</span><span class="delimiter">'</span></span> },
    { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">Bianca</span><span class="delimiter">'</span></span> },
  ]
};

<span class="comment">// expected output</span>
<span class="keyword">var</span> users = [
  { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">@RebootJeff</span><span class="delimiter">'</span></span> },
  { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">@doitwithalambda</span><span class="delimiter">'</span></span> },
  { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">Kevin</span><span class="delimiter">'</span></span> },
  { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">Bianca</span><span class="delimiter">'</span></span> }
];
</pre></div>
</div>
 </figure></notextile></div>

<p>The output has the <code>null</code>s removed. We can pretty much assume we only want to see user objects in the output array; no other kinds of elements.</p>

<h3 id="the-original-solution">The Original Solution</h3>

<p>The following code snippet is a slightly modified version of someone else’s work. I’ve changed the variable names and comments, but the core logic/algorithm is the same.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Original Solution </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">var</span> _ = require(<span class="string"><span class="delimiter">'</span><span class="content">lodash</span><span class="delimiter">'</span></span>);

<span class="keyword">function</span> <span class="function">combineKeyedArrays</span>(keyedArrays){
  <span class="keyword">var</span> flattened = [];

  <span class="comment">// produce a flat Array from an Object with values that are arrays</span>
  _.each(keyedArrays, <span class="keyword">function</span>(array){
    flattened = flattened.concat(array);
  });

  <span class="comment">// only return the truthy elements of flat Array</span>
  <span class="keyword">return</span> _.filter(flattened, <span class="keyword">function</span>(element) {
    <span class="keyword">return</span> Boolean(element);
  });
}
</pre></div>
</div>
 </figure></notextile></div>

<ul>
  <li>The combination of <code>_.each</code> and <code>Array.prototype.concat</code> creates one big array from all the arrays within the input object called <code>keyedArrays</code>.</li>
  <li>The combo of <code>filter</code> and <code>Boolean</code> rids the big array of falsey values to ensure no <code>null</code> elements end up in the output.</li>
</ul>

<h2 id="lets-refactor">Let’s Refactor!</h2>

<h3 id="refactor-1---using-lodashs-chain">Refactor 1 - Using Lodash’s Chain</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Refactored Version 1 </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">var</span> _ = require(<span class="string"><span class="delimiter">'</span><span class="content">lodash</span><span class="delimiter">'</span></span>);

<span class="keyword">function</span> <span class="function">combineKeyedArrays</span>(keyedArrays){
  <span class="keyword">return</span> _.chain(keyedArrays)
    .reduce(concatArray, [])
    .filter(Boolean)
    .value();
}

<span class="keyword">function</span> <span class="function">concatArray</span>(arr, val) {
  <span class="keyword">return</span> arr.concat(val);
}
</pre></div>
</div>
 </figure></notextile></div>

<p>Sadly, we need to create our own <code>concatArray</code> because Lodash doesn’t have such a utility method (I swear it used to exist in an earlier version …maybe).</p>

<p>Thankfully, we can actually use Lodash’s <code>reduce</code> on objects (not just arrays). I see the replacement of <code>each</code> with <code>reduce</code> as a win because the end result is more expressive. <code>each</code> is vague whereas <code>reduce</code> makes it more clear that we intend to go from a collection of things (in this case, a collection of arrays) to just a single thing (in this case, just a single array).</p>

<h3 id="refactor-2---using-lodashs-flow">Refactor 2 - Using Lodash’s Flow</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Refactored Version 2 </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">var</span> _ = require(<span class="string"><span class="delimiter">'</span><span class="content">lodash</span><span class="delimiter">'</span></span>);

<span class="keyword">var</span> combineKeyedArrays = _.flow(
  _.values,
  _.flatten,
  _.compact
);
</pre></div>
</div>
 </figure></notextile></div>

<p>Now we use <a href="https://github.com/MostlyAdequate/mostly-adequate-guide/blob/master/ch5.md">function composition</a> via <code>flow</code>, which uses left-to-right direction. Standard function composition via <code>compose</code> would read from right-to-left, but I prefer LTR for a more familiar aesthetic. My friends who are more advanced in <a href="http://RebootJeff.github.io/blog/categories/functional-programming/">functional programming</a> assure me I’ll get used to the RTL direction if I give it a shot, but for now, I protest (i.e., I’m lazy).</p>

<p>With <code>flow</code>, we can read <code>combineKeyedArrays</code> as a series of 3 steps. First, we extract values from an object via <code>values</code>, then we flatten the resulting array via <code>flatten</code>, then we reject any falsey elements from the array via <code>compact</code>.</p>

<p>Notes:</p>

<ul>
  <li><code>values</code> obviates the need for the combo of <code>reduce</code> + <code>concat</code></li>
  <li><code>flatten</code> is <em>shallow</em> by default</li>
  <li><code>compact</code> obviates the need for the combo of <code>filter</code> + <code>Boolean</code></li>
</ul>

<blockquote>
  <p>OMG WHERE DID THE INPUT/PARAMETER GO?!</p>

  <p><strong>–You (probably)</strong></p>
</blockquote>

<p>We can stop referring to the input as <code>keyedArrays</code>. Our function <code>combineKeyedArrays</code> has now been written in a <strong>pointfree (aka point-free aka tacit) style</strong>. In other words, we no longer need to name - and refer back to - any parameter variable.</p>

<p>Think of it like the verbs “hit” and “type” in the English language. The word “hit” is a bit vague, so you probably should include more context or <em>references</em> for clarity. Are you hitting a person in a fight? Are you hitting some books to study? Are you hitting the bed to sleep? Are you hitting a keyboard button to type?</p>

<p>The word “type” is more specific. You already can infer you’ll be dealing with a keyboard. You don’t need to mention the keyboard at all when you use the verb “type” instead of the verb “hit”.</p>

<p>“I’m typing UNIX commands” is more concise and direct than “I’m hitting buttons on the keyboard to issue UNIX commands”. Both are valid, but the former is easier to understand even though it’s less comprehensive.</p>

<h3 id="refactor-3---using-ramda">Refactor 3 - Using Ramda</h3>

<p>Now, let’s translate from Lodash to <a href="http://ramdajs.com/">Ramda</a>, a utility library that is much more aligned with the functional programming style. I’ve covered how to get started with Ramda in <a href="http://RebootJeff.github.io/blog/2015/06/14/refactoring-towards-functional-programming-in-javascript/">an earlier blog post that one friend labeled as an “excellent summary”</a>. I must be pretty awesome <a href="https://duckduckgo.com/?q=awesome+smiley+face&amp;iax=1&amp;ia=images&amp;iai=http%3A%2F%2Fannawrites.com%2Fblog%2Fwp-content%2Fuploads%2F2012%2F03%2Fawesome-smiley.jpg">:D</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Refactored Version 3 </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">var</span> R = require(<span class="string"><span class="delimiter">'</span><span class="content">ramda</span><span class="delimiter">'</span></span>);

<span class="keyword">var</span> combineKeyedArrays = R.pipe(
  R.values,
  R.unnest,
  R.filter(Boolean)
);
</pre></div>
</div>
 </figure></notextile></div>

<p>Notes:</p>

<ul>
  <li><code>pipe</code> is Ramda’s <code>_.flow</code>. I appreciate the name “pipe” over “flow” because “pipe” reminds me of Bash’s <code>|</code> operator.</li>
  <li><code>unnest</code> is Ramda’s <em>shallow</em> array-flattening method.</li>
  <li>Ramda lacks a <code>compact</code> :(</li>
  <li><code>R.filter(Boolean)</code> is leveraging <a href="https://github.com/MostlyAdequate/mostly-adequate-guide/blob/master/ch4.md">currying</a> / using partial application to yield the same effect as <code>_.compact</code>.</li>
</ul>

<h2 id="lets-review">Let’s Review</h2>

<p>We’ve gained so much:</p>

<ul>
  <li><strong>Expressiveness!</strong> Remember that <code>each</code> is vague; the refactored versions using <code>flow</code> and <code>pipe</code> are far more direct and straightforward (assuming you’re familiar with the library methods). Also, the combo of <code>_.chain</code> and <code>_.value</code> adds unnecessary boilerplate cruft compared to the simplicity of <code>flow</code> or <code>pipe</code>.</li>
  <li><strong>Brevity!</strong> Shorter code isn’t always better code, but if expressiveness and legibility remain high as code length decreases, that’s generally what scientists refer to as a victory.</li>
  <li><strong>Robustness!</strong> We’re using well-tested library methods. There are fewer possible typos after refactoring to simpler code.</li>
  <li><strong>Fun!</strong> Wasn’t that so much fun?! Hell yeah it was!! <a href="https://www.youtube.com/watch?v=qEg9wKFGtQg&amp;t=0m05s">*level-up*</a></li>
</ul>

<p>By the way, possible documentation for our refactored, pointfree <code>combineKeyedArrays</code> involves a type signature as a comment, but admittedly, I’m still learning how to do proper, FP-style type signatures. Also, keep in mind that the names of your functions should help tell others what it does, and the fact that it’s composed of 3 easy-to-read methods is quite helpful as well.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Refactored Version 3 with comment for documentation </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">var</span> R = require(<span class="string"><span class="delimiter">'</span><span class="content">ramda</span><span class="delimiter">'</span></span>);

<span class="comment">// Object&lt;Array&gt; --&gt; Array (more old-fashioned)</span>
<span class="comment">// ...or...maybe...</span>
<span class="comment">// {k: [v]} --&gt; [v] (similar to Ramda docs)</span>
<span class="keyword">var</span> combineKeyedArrays = R.pipe(
  R.values,
  R.unnest,
  R.filter(Boolean)
);
</pre></div>
</div>
 </figure></notextile></div>

<p>Why don’t we say something more specific such as <code>// {k: [user]} --&gt; [user]</code>? Because <code>combineKeyedArrays</code> clearly works with any type of element inside the arrays. It could even be considered as a utility function and added to an internal library of helpers. Whoooaaaaaa…</p>

<p>And because I appreciate you as a cool person, here’s a <a href="https://gist.github.com/RebootJeff/d8877fdbcff79ec140cf">Gist that has all the code in one spot</a> for your future reference.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why fast code matters even when phones have octa-core CPUs]]></title>
    <link href="http://RebootJeff.github.io/blog/2015/11/16/why-fast-code-matters-even-when-phones-have-octa-core-cpus/"/>
    <author>
      <name><![CDATA[@RebootJeff]]></name>
      
    </author>
    <updated>2015-11-16T09:10:00-08:00</updated>
    <id>http://RebootJeff.github.io/blog/2015/11/16/why-fast-code-matters-even-when-phones-have-octa-core-cpus</id>
    <content type="html"><![CDATA[<p>Have you seen the new Nexus 6P smartphone? It packs a “system on a chip” that features <em>two</em> CPUs, each with <em>four</em> cores. What a crazy, powerful world we live in! Surely modern smartphones can run your JavaScript code without breaking a sweat, right?</p>

<p><img src="http://RebootJeff.github.io/images/20151116/ss_snapdragon810.png" alt="Snapdragon 810 promo material" /></p>

<h2 id="writing-performant-code-is-hard">Writing Performant Code is Hard</h2>

<p>It’s true that really low-level performance optimizations often don’t feel like they’re worth learning or worrying about. You’ve got to deal with complicated business logic and juggling user data and state! You don’t have time to record CPU profiles for every new function you write!</p>

<p>On top of that, <strong>computers keep getting more powerful, right?</strong></p>

<h2 id="but-what-does-the-future-hold">But What Does the Future Hold?</h2>

<p>Here’s the insight*: if you’re targeting laptops/desktops, then you can probably feel safe about imperfect code in many respects. However, <strong>the trend of computers getting more powerful isn’t what it seems.</strong></p>

<h3 id="devices-speed-up-after-slow-starts">Devices speed up after slow starts</h3>

<p>Look at the trend from a bigger picture perspective: modern tech has gone from powerful desktops to less powerful laptops (and netbooks and Chromebooks!) to even less powerful smartphones/tablets to much less powerful wearables and IoT devices. Consider that smartphone apps might not be so popular if web apps were more performant earlier in the history of iOS, Android, and web views.</p>

<p><em>*Disclaimer:</em> I can’t take credit for the insight. I read it somewhere on the Internet, and I don’t remember where. Probably Quora though.</p>

<p>I’ll also add my own thought to chew on: Memory optimizations might still be important as folks browsing the web tend to leave a ton of tabs open and don’t close/reopen their browsers as often as they used to.</p>

<h2 id="whats-a-well-intentioned-developer-to-do">What’s a well-intentioned developer to do?</h2>

<p>To be fair, browsers have come a long way. And it can be tough to care about tiny performance optimizations when browsers might end up handling them for you. For example, string concatenation used to be a no-no in JavaScript. The recommended best practice was to use <code>Array.prototype.join</code> instead of string concatenation.</p>

<p>This “best practice” is now <a href="http://archive.oreilly.com/pub/a/server-administration/excerpts/even-faster-websites/writing-efficient-javascript.html">very outdated</a>.</p>

<p>Like most decisions in reality, there will be trade-offs and ROI concerns. Like most decisions, the right answer is probably somewhere in between two extremes. Like most of my commentary on this blog, I’m dispensing info with JavaScript in mind, but some takeaways are language-agnostic.</p>

<p>My decision-making process for how to spend my time on performance involves a few key points:</p>

<ul>
  <li>Always stay curious about current best practices.</li>
  <li>Don’t learn a “best practice” and expect it to remain “best” forever. If someone teaches you a performance optimization tactic, check the Internet to make sure it’s still relevant.</li>
  <li>Focus on higher-level performance optimizations (e.g., learning <a href="https://blog.codeschool.io/2015/09/11/how-to-keep-web-animations-from-slowing-you-down/">performant animation techniques</a>, shaming nested loops/traversals, plugging memory leaks, refactoring to recursion for <a href="http://www.2ality.com/2015/06/tail-call-optimization.html">Tail Call Optimization</a>) rather than lower-level concerns (e.g., <code>while</code> loop vs <code>for</code> loop, <code>i++</code> vs <code>++i</code>, etc).</li>
  <li>Learn how code is actually digested by your target platform (e.g., for browser-based apps, <a href="https://www.udacity.com/course/website-performance-optimization--ud884">learn the Critical Rendering Path</a>, learn the <a href="http://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/">JavaScript Event Loop</a> –and Web Workers as a bonus).</li>
  <li>Readability matters. If other devs can’t understand your code because of obscure micro-optimizations, then you’re probably hurting the team. Consider sacrificing the optimizations to prioritize collaboration.</li>
  <li>Keep dreaming for the day when platforms will optimize your code for you! Just kidding. It’s kinda sorta already happening (<a href="https://twitter.com/RebootJeff/status/603281637070123008">learn about JIT compilers</a>).</li>
</ul>

<p>I’ve noticed many of my “key points” really just boil down to “do your best, buddy!” Freaking brilliant.</p>

<h4 id="ps">P.S.</h4>

<p>Because JavaScript is single-threaded, the multi-core loveliness of modern CPUs doesn’t directly help your web app unless you use web workers.</p>

<p>That said, there will be some benefit regardless of web workers just because devices such as smartphones usually have to juggle more than just your web app (e.g., background apps, managing sensors, etc). The extra cores should help prevent the phone from stressing out from the juggling, so that tangentially helps your web app’s performance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Towards Functional Programming in JavaScript]]></title>
    <link href="http://RebootJeff.github.io/blog/2015/06/14/refactoring-towards-functional-programming-in-javascript/"/>
    <author>
      <name><![CDATA[@RebootJeff]]></name>
      
    </author>
    <updated>2015-06-14T13:58:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2015/06/14/refactoring-towards-functional-programming-in-javascript</id>
    <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/0b4c12a5daec02b72e6e6879861ac70f75046e65/687474703a2f2f72616d64612e6a637068696c6c697070732e636f6d2f6c6f676f2f72616d646146696c6c65645f323030783233352e706e67" alt="Ramda.js logo" /></p>

<p>This is not a “What is FP?” guide that uses JavaScript. If that’s what you’re looking for, you’ll love <a href="https://github.com/DrBoolean/mostly-adequate-guide">Brian Lonsdorf’s free GitHub-based guide</a>. For this blog post, I will assume you already know currying and composition. I won’t assume you know functors, monads, and the other funky whatchamacallits that I’m still trying to learn for myself.</p>

<p>There are a lot of blogs and presentations that answer “What is Functional Programming?” and “Why bother with Functional Programming?”. There aren’t a lot of resources answering “How do I start using Functional Programming in REAL life?”. Most intro-to-FP resources leave you feeling like you’re supposed to just drop everything and start coding from scratch in Haskell or an FP-focused language that transpiles into JavaScript (e.g., <a href="http://elm-lang.org/">Elm</a> and <a href="https://github.com/clojure/clojurescript">ClosureScript</a>).</p>

<p>My team at work has recently been exploring FP in JavaScript by using a library called <a href="http://ramdajs.com/">Ramda</a>. It’s a functional programming JavaScript library. Ramda offers some common FP utilities to help you code in the FP style or just slowly convert parts of your codebase to the FP style.</p>

<p>Most of the team is unfamiliar with FP, so rather than diving into massive re-writes to convert large chunks of code from Object-Oriented Programming to FP, we’ve been starting small. Along the way, we’ve learned some solid steps for introducing FP into an existing codebase at a comfy pace. The gist of it is: don’t dive into the world of endofunctors, monoids, and catamorphisms. Instead, focus on treating functions differently by cutting down on anonymous functions, subdividing functions into tiny functions, and using the simplest FP concepts such as currying and composition.</p>

<h2 id="code-smells">Code smells</h2>

<p>These are some signs that code is very imperative and not very FP-like:</p>

<ul>
  <li><strong>Anonymous callbacks</strong> - It’s harder to re-use functions that don’t have names, it’s harder to write pointfree code with anonymous <em>callbacks</em> in particular, and function expressions will be more commonplace when you start using more FP (due to frequent use of <code>curry</code> and <code>composition</code>).</li>
  <li><strong>Suboptimal parameter order</strong> - Function signatures should have parameters arranged in an order that fits currying. This means putting config-like parameters first and main data parameters last (which is pretty much the exact opposite order that we’re all used to).</li>
  <li><strong>Loops</strong> - In JS, loops are usually for-loops that iterate over collections. There are specialized methods such as <code>map</code>, <code>reduce</code>, and <code>filter</code> that can perform the most common looping operations in a style that is more functional and declarative.</li>
  <li><strong>Localized mutation</strong> - This is a bit harder to explain, but local mutation (usually limited to the scope of a single function and a few nested anonymous callbacks) generally seems innocent enough until you realize it makes it more difficult to split up your functions into tiny functions, which is a major part of refactoring towards FP.</li>
  <li><strong>Side-effects from functions</strong> - One of the major principles in FP is that <a href="https://github.com/DrBoolean/mostly-adequate-guide/blob/master/ch3.md">functions should be pure</a>. When functions affect data outside their own local scope, it is usually due to IO actions or an OOP construct such as a method operating on the properties of its context object.</li>
</ul>

<h2 id="refactoring-steps">Refactoring steps</h2>

<h3 id="easy-difficulty">Easy Difficulty</h3>

<ul>
  <li><strong>Use named functions</strong> - This will make it easier to write pointfree code and to compose functions.</li>
  <li><strong>Use predicates</strong> - Functions that encapsulate conditional statements can be composed with other functions for the FP/declarative equivalent of imperative control flow.</li>
  <li><strong>Refactor loops via <code>each</code>, <code>map</code>, <code>filter</code>, <code>reduce</code>, etc</strong> - Using these FP iteration functions encourage you to also write small helper functions and predicates. They will guide you towards more FP.</li>
</ul>

<h3 id="medium-difficulty">Medium Difficulty</h3>

<ul>
  <li><strong>Focus on simple FP utilities</strong> - <code>R.curry</code>, <code>R.compose</code>, <code>R.composeP</code>, <code>R.prop</code>, <code>R.is</code>, <code>R.has</code>, <code>R.anyPass</code>/<code>R.allPass</code> are all worth checking out. Set a goal to use these as much as possible. It’s a great (and reasonable!) goal to get started with the FP style without getting too overwhelmed.
    <ul>
      <li>Using <code>curry</code> and <code>compose</code> get you to the heart of FP’s flexibility. Your code will look significantly different once you start currying and composing functions.</li>
      <li>Dot notation for accessing properties that will be used as input to a function (use <code>R.prop</code> or <code>R.has</code> as needed).</li>
    </ul>
  </li>
  <li><strong>Simplify all functions</strong> - Break down larger functions into smaller functions; break down helper functions into more and more generalized helper functions.
    <ul>
      <li>Minimize the number of arguments</li>
      <li>Write pure functions as often as possible</li>
    </ul>
  </li>
  <li><strong>Segregate mutation/state</strong> - If mutation/state is absolutely necessary, then try to separate the mutation into a traditional function and the rest into something that can be more FP-like. For example, if a function called <code>foo</code> changes some parent scope variables in addition to performing some calculation, then change <code>foo</code> so it calls two helper functions: the parent scope manipulation is done by one helper function while the calculation is done by another helper function.</li>
</ul>

<h2 id="getting-comfortable">Getting Comfortable</h2>

<p>What can you expect as you start writing FP code?</p>

<ul>
  <li>Function names should be very expressive and more verbose.
    <ul>
      <li>…which leads to code that looks more semantic.</li>
    </ul>
  </li>
  <li>Higher-level functions should be composed of smaller, lower-level functions.
    <ul>
      <li>Making functions from functions will look/feel like a tree of nested functions.</li>
      <li>Lower-level functions should be only a handful of lines (and 1-line functions become common-place). Higher-level functions might also be really short because they just rely on calling multiple functions without much additional logic.</li>
    </ul>
  </li>
  <li>Remember: Function compositions are normally read from right to left.</li>
  <li>Debugging may be tricky at first, but you should be able to easily test lower-level functions, which means higher-level functions should be less fragile.
    <ul>
      <li>For debugging with <code>console.log</code>, you may have to add it to compositions. E.g., <code>var processData = R.compose(calculateStuff, logFilteredData, filterData);</code> You can find a more detailed example of this logging tactic later in this blog post.</li>
    </ul>
  </li>
  <li>Naming functions becomes even more important; names no longer always start with verbs because they are often treated as data (nouns) rather than actions/procedures (verbs).
    <ul>
      <li>However, due to FP’s relative obscurity, naming conventions are not as widespread, which could lead to codebases with poorly named functions (significantly more helper functions means more opportunities to get function names messed up). Make sure your team is on the same page for nomenclature.</li>
    </ul>
  </li>
</ul>

<h2 id="examples">Examples</h2>

<p>Keep in mind that I’m using <a href="http://ramdajs.com/">Ramda.js</a> for these examples.</p>

<h3 id="ex-filtering-an-array">Ex: Filtering an array</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Example - Filtering for odd numbers and multiples of 6 </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">var</span> originalArray = [<span class="integer">1</span>, <span class="integer">2</span>, <span class="integer">3</span>, <span class="integer">4</span>];

<span class="comment">// Bad - using a for-loop to mutate a new array</span>
<span class="keyword">var</span> filteredArray = [];
<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="integer">0</span>; i &lt; originalArray.length; i++) {
  <span class="keyword">var</span> number = originalArray[i];
  <span class="keyword">if</span>(number % <span class="integer">2</span> || number % <span class="integer">6</span> === <span class="integer">0</span>) {
    filteredArray.push(number);
  }
}

<span class="comment">// Better - using the native Array filter method with a typical anonymous function</span>
<span class="keyword">var</span> filteredArray = originalArray.filter(<span class="keyword">function</span>(number) {
  <span class="keyword">return</span> number % <span class="integer">2</span> || number % <span class="integer">6</span> === <span class="integer">0</span>;
});

<span class="comment">// Most Functional - using predicates with a filter method</span>
<span class="keyword">var</span> <span class="function">isOdd</span> = <span class="keyword">function</span>(number) {
  <span class="keyword">return</span> number % <span class="integer">2</span>;
};
<span class="keyword">var</span> <span class="function">isDivisibleBySix</span> = <span class="keyword">function</span>(number) {
  <span class="keyword">return</span> number % <span class="integer">6</span> === <span class="integer">0</span>;
};
<span class="keyword">var</span> isValid = R.allPass([isOdd, isDivisibleBySix]);
<span class="keyword">var</span> filteredArray = R.filter(isValid, originalArray);
</pre></div>
</div>
 </figure></notextile></div>

<p>The “most functional” technique may seem unappealling because it requires so many lines of code, but it’s vital to remember that predicates serve as re-usable, easily testable utilities. Also, <code>R.allPass([isOdd, isDivisibleBySix])</code> is more expressive than <code>number % 2 || number % 6 === 0</code>. In the latter case, readers must remember how <code>%</code> works and how the result is a number that gets coerced into a boolean value for truthiness/falsiness.</p>

<h3 id="ex-debugging-via-consolelog">Ex: Debugging via console.log</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Example - Adding a logger for debugging </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Let's try to debug the following function</span>
<span class="keyword">var</span> processData = R.compose(calculateStuff, sortByDate, filterByStatus);

<span class="comment">// First, we need an FP-friendly logger that works with composition</span>
<span class="keyword">function</span> <span class="function">log</span>(note, input) {
  console.log(note + <span class="string"><span class="delimiter">'</span><span class="content"> --- </span><span class="delimiter">'</span></span> + input);
  <span class="keyword">return</span> input; <span class="comment">// this return is vital</span>
}

<span class="comment">// Second, we insert the logger into the composition to check if filtering worked</span>
<span class="keyword">var</span> processData = R.compose(calculateStuff, sortByDate, log(<span class="string"><span class="delimiter">'</span><span class="content">filtered data</span><span class="delimiter">'</span></span>), filterByStatus);

<span class="comment">// Then we run processData with some data, check the log output, and adjust</span>
<span class="comment">// the placement of the log within the composition until we find where</span>
<span class="comment">// things go wrong.</span>
</pre></div>
</div>
 </figure></notextile></div>

<p>Once again, it may seem a tad painful. You’re being forced to create a special logger function. But much like in the previous example, keep in mind that you’re being forced to create specialized functions that will probably be useful enough to be part of your project’s internal library of utilities and helpers.</p>

<h3 id="ex-promises">Ex: Promises</h3>
<p>Let’s pretend we need to grab data about an animal.
First, we query our database of animals.
Second, we use our query results to get more info from a 3rd-party animal API.
Third, we use some part of that info to search for relevant photos from the Flickr API.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Example - Writing promise chains </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Bad - using typical anonymous function boilerplate</span>
<span class="keyword">function</span> <span class="function">getAnimalData</span>() {
  <span class="keyword">return</span> getAnimalInfoFromDatabase().then(<span class="keyword">function</span>(response1) {
    <span class="keyword">return</span> getRelevantInfoFrom3rdPartyAPI(response1);
  }).then(<span class="keyword">function</span>(response2) {
    <span class="keyword">return</span> getRelevantPhotoFromFlickrAPI(response2);
  }).then(<span class="keyword">function</span>(response3) {
    <span class="keyword">return</span> response3;
    <span class="comment">// Note: This last part of the promise chain is actually unnecessary, but</span>
    <span class="comment">// newbies tend to include it.</span>
  });
}

<span class="comment">// Better - using pointfree style</span>
<span class="keyword">function</span> <span class="function">getAnimalData</span>() {
  <span class="keyword">return</span> getAnimalInfoFromDatabase()
    .then(getRelevantInfoFrom3rdPartyAPI)
    .then(getRelevantPhotoFromFlickrAPI);
}

<span class="comment">// Most Radtastic - using Ramda's promise composer</span>
<span class="keyword">var</span> getAnimalData = R.composeP(
  getRelevantPhotoFromFlickrAPI,
  getRelevantInfoFrom3rdPartyAPI,
  getAnimalInfoFromDatabase
);
<span class="comment">// Notice how the order of composition goes from right to left.</span>
</pre></div>
</div>
 </figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pair Programming Impressions and Tips]]></title>
    <link href="http://RebootJeff.github.io/blog/2015/06/12/pair-programming-tips-and-impressions/"/>
    <author>
      <name><![CDATA[@RebootJeff]]></name>
      
    </author>
    <updated>2015-06-12T01:33:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2015/06/12/pair-programming-tips-and-impressions</id>
    <content type="html"><![CDATA[<p><img src="http://RebootJeff.github.io/images/20150612/pair_programming_ducks.jpg" alt="two rubber ducks pair programming" /></p>

<p class="my-caption">This is the best photo I&#8217;ve ever taken.</p>

<p>Some programming friends think I’m crazy, but I most definitely &lt;3 pair programming. I dig the human interaction. I appreciate enduring the horrors of debugging with a comrade. I love the anti-ego culture.</p>

<p>On top of all that, pairing reduces the risk of burnout for a couple of reasons. Firstly, the average level of focus stays high throughout the day so you don’t have to work as many hours. Secondly, any stress, tedium, and brain workouts are shared by two folks instead of one. Therefore, individuals are less likely to get overwhelmed or feel alone in handling responsibilities or overcoming blockers.</p>

<p>Admittedly, there are times when I want to get in the flow by myself without the need to constantly talk to another person, but usually, I embrace 1-on-1 talks. Why? (1) Discussion activates more of my brain. (2) <a href="http://rebootjeff.github.io/blog/categories/communication-for-engineers/">I’m a big fan of communication skills</a>. (3) Considering another individual’s perspective gives me more to think about, and I love thinking about thinking.</p>

<p>For nearly 2 years, I’ve been pair programming. During this time, I’ve picked up on a few tips and pet-peeves. Read on for some musings on software development in dynamic duos.</p>

<h2 id="communication-tips">Communication Tips</h2>
<p>These tips are good for all communication, not just pair programming. But bad communication skills become an unavoidable problem when you pair up, so consider improving how you talk and listen to become a better paired engineer.</p>

<h4 id="tone-be-inquisitive-not-accusatory">Tone: be inquisitive, not accusatory</h4>
<p>Another way to put it: be curious about your own assumptions, conclusions, and judgements. Unless you are 100% certain, give your partner the benefit of the doubt.</p>

<blockquote>
  <ul>
    <li><strong>DO:</strong> What if X? Will that affect idea Y?</li>
    <li><strong>DON’T:</strong> Your idea (Y) won’t work because of X.</li>
  </ul>
</blockquote>

<blockquote>
  <ul>
    <li><strong>DO:</strong> What are the obstacles? Let’s see if we can tackle them together.</li>
    <li><strong>DON’T:</strong> I imagine what we need to do should be easy. Why don’t you think so?</li>
  </ul>
</blockquote>

<h4 id="precision-be-specific-use-idiomatic-terms-avoid-vague-pronouns">Precision: be specific; use idiomatic terms; avoid vague pronouns</h4>
<p>The below example is more pertinent to a senior teaching a junior, but even proficient engineers get out of sync when generic words like “that one” are used instead of precise words like “the <em>[insert object name]</em> at <em>[insert context or line number]</em>.”</p>

<blockquote>
  <ul>
    <li><strong>DO:</strong> The promise returned by the request at line 31 will resolve with a response body containing the JSON we need to parse and possibly flatten.</li>
    <li><strong>DON’T:</strong> That method call will give us the data we need to check out.</li>
  </ul>
</blockquote>

<h2 id="keyboard--mouse-tips">Keyboard &amp; Mouse Tips</h2>
<p>Maybe it’s just me, but I find it painful to watch someone use only arrow keys to move a cursor or use slow mouse movements to scroll to the top or bottom of a file. Although, I admit that I could be a tad unfair in the typing department (<a href="http://10fastfingers.com/speedtests/generate_screenshot_result/1_102_508_0_0_96_0_97.96_3086_151253">I rock triple-digit WPM</a> so …booya).</p>

<ul>
  <li>Please learn general typing shortcuts such as moving the cursor to beginning/end of word/line/file. Use these cursor movement shortcuts in conjunction with shift/delete to select/remove code quickly.</li>
  <li>Learn IDE shortcuts such as multi-selection/cursors, vertical/block selection, switching tabs, and deleting current line.</li>
  <li>Use the mouse to point at parts of the screen, not your finger. You don’t want to block parts of the screen with your hand/arm, and you don’t want to reach over to your partner’s monitor if you’ve got a setup with dual-mirrored-monitors.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recap of LambdaConf 2015 - Where Brains Explode]]></title>
    <link href="http://RebootJeff.github.io/blog/2015/06/03/recap-of-lambdaconf-2015/"/>
    <author>
      <name><![CDATA[@RebootJeff]]></name>
      
    </author>
    <updated>2015-06-03T20:39:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2015/06/03/recap-of-lambdaconf-2015</id>
    <content type="html"><![CDATA[<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr">Can you intuit that these slides are about promise-land of virtual filesystems inspired by <a href="https://twitter.com/hashtag/FunctionalProgramming?src=hash">#FunctionalProgramming</a> ? <a href="http://t.co/AGiupUies9">pic.twitter.com/AGiupUies9</a></p>&mdash; Jeff Lee (@RebootJeff) <a href="https://twitter.com/RebootJeff/status/602129973067952128">May 23, 2015</a></blockquote>
<script async="" src="http://RebootJeff.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>On May 21st, I traveled to Boulder for <a href="http://www.degoesconsulting.com/lambdaconf-2015/">LambdaConf 2015</a>, a functional programming (FP) conference. Overall, it wasn’t as beginner-friendly as I had hoped, but it gave me plenty of food for thought as I explore FP. Today, I’m going to summarize some key points and takeaways from the talks that really stuck with me. I didn’t understand everything I heard, but still learned a thing or two …I think.</p>

<h1 id="recaps">Recaps</h1>

<h2 id="keynote-ipecac-for-the-ouroboros-by-paul-phillips">Keynote: “Ipecac for the Ouroboros” by Paul Phillips</h2>
<p>Apparently, the <a href="http://en.wikipedia.org/wiki/Ouroboros">Ouroboros</a> (serpent eating its own tail) in this talk represents all programmers (and perhaps even all computer users) who are eating their own tails by accepting the current model for filesystems (files, folders, directories, etc). Phillips suggests that he has the cure (the ipecac).</p>

<p>What if computers used virtual filesystems? Imagine if filesystems were more like databases, and retrieving files would be like using expressions that define queries and which files to retrieve. You would not need to rely on knowing filepaths and file names. You wouldn’t end up with multiple copies of the same files/folders in various directories. You would rely on useful metadata to get your latest photos. You could even ask for “all the photos with person X” (via facial recognition).</p>

<h2 id="selfish-purity-how-functional-programming-makes-every-day-jobs-easier-by-daniel-spiewak">“Selfish Purity: How Functional Programming Makes Every-Day Jobs Easier” by Daniel Spiewak</h2>
<p>Spiewak claims that FP gurus suck at articulating to non-FP programmers about why FP rocks. According to him, FP’s strengths boil down to reasonability, testability, and concurrency.</p>

<p>As a beginner in the world of FP, I partially agree. For me, it’s easy to grasp why FP rocks in theory, but sometimes it’s hard to understand in practice because it can be so difficult to start writing FP code.</p>

<p>Instead of going on about abstract algebra, Spiewak says FP evangelists should emphasize <strong>reasonability, testability, and concurrency</strong>. For intro classes, FP teachers should focus less on manipulating data and more on how to do data-centric programming instead of behavior-centric programming.</p>

<h3 id="reasonability">Reasonability</h3>
<p>FP emphasizes data over behavior, and it’s easier to reason about data than behavior (especially if the behavior can be different due to side-effects, implicit inputs, etc –in other words, impurity makes it difficult to reason about behavior).</p>

<h3 id="testability">Testability</h3>
<p>Side-effects leads to difficult testability leads to devs hating testing leads to devs writing fewer/poorer tests leads to lower software quality. This plagues the software industry.</p>

<p>Using FP algebra leads to simpler logic and better testability. By writing a “real” interpreter that performs side-effects and a “fake” interpreter that inspects, testing becomes easy. Free monads enable this pattern. Free monads make it easy to write these 2 “interpreters”.</p>

<h3 id="concurrency">Concurrency</h3>

<ul>
  <li>sequential ~ <code>flatMap</code> or <code>for-</code>comprehensions ~ monads</li>
  <li>Parallel ~ <code>zip</code> ~ applicatives</li>
</ul>

<p><em>Note:</em> In case it isn’t obvious already, I had trouble comprehending this part of the Spiewak’s talk. My understanding is that the purity of FP lends itself to easily distributing computation of expressions and composing the results.</p>

<h2 id="why-i-like-fp-by-adelbert-chang">“Why I Like FP” by Adelbert Chang</h2>
<p>Imperative programming requires you to maintain state in your head. At the very least, you have to remember values stored in all sorts of variables, maybe different state for each iteration of a loop, etc. With imperative programming, your brain uses a lot of energy on maintaining state (and types in an untyped language) when it should be focused on just solving the problem. This is really annoying if you love the expressions from physics/math where you simply derive solutions to problems.</p>

<p>Math has referential transparency (algebra is just lots of substitution), which is straightforward. FP brings referential transparency (and therefore, more algrebraic concepts) into programming.</p>

<h2 id="how-i-learned-haskell-in-5-years-by-chris-allen">“How I Learned Haskell in 5 Years” by Chris Allen</h2>
<p>Or: Thoughts on <strong>teaching</strong> Haskell (and just “teaching” in general).</p>

<p>Allen is a professional Haskeller, but he also does a lot of teaching. He spent a lot of time introducing co-workers to the language, and he eventually created a <a href="https://github.com/bitemyapp/learnhaskell">free guide on Haskell</a>. It was great to hear his perspective on education in the realm of coding.</p>

<ul>
  <li>It took Allen 5 years to learn Haskell because he went through unproductive cycles: complete a tutorial, try a practical project, get frustrated, stop …repeat.</li>
  <li>When he first started teaching, he sucked at it. He emphasizes that his first audiences were test subjects, and novice teachers should be grateful to their first audiences.</li>
  <li>His Haskell book, <em><a href="http://haskellbook.com/">Haskell Programming from first principles</a></em> is for self-learners and doesn’t assume recent Computer Science education. It doesn’t even assume programming experience because going from something like JavaScript to Haskell will feel like starting from scratch anyway (yikes!).</li>
  <li>Handwaving over explanations is problematic. Allen warns that teachers should avoid giving definitions before explanations. That tactic runs counter to how <strong>humans learn via intuition and informal observations that eventually coalesce into formal explanations</strong>.</li>
  <li>I found a few particularly interesting blog posts by Allen:
    <ul>
      <li><a href="http://bitemyapp.com/posts/2014-12-31-functional-education.html">The problem of learning functional programming</a></li>
      <li><a href="http://bitemyapp.com/posts/2014-04-29-meditations-on-learning-haskell.html">Meditations on learning Haskell</a></li>
    </ul>
  </li>
</ul>

<h2 id="programming-and-math-by-harold-carr">“Programming and Math” by Harold Carr</h2>
<p>Boom: <a href="http://www4.di.uminho.pt/~jno/ps/pdbc_part.pdf">http://www4.di.uminho.pt/~jno/ps/pdbc_part.pdf</a></p>

<h1 id="further-impressions">Further Impressions</h1>

<h2 id="fp-in-the-real-world">FP in the real world</h2>
<p>Functional programming used to be considered rather academic and unpractical, but nowadays, there are a lot of languages and corresponding communities that make FP friendlier and useful. Consequently, there are plenty of people using FP for “real” software.</p>

<h2 id="fp-languages">FP languages</h2>
<p>Judging from the conference, Scala, Clojure, and Haskell are the most popular functional programming languages. Haskell seems to have the fewest programmers, but the most momentum/interest. Not only is Haskell favored by the purists, but its static type system is lauded as being the near-panacea that programmers don’t realize they need until they learn it.</p>

<p>However, I saw enough Clojure code to walk away impressed by it. It seems far less intimidating than Haskell, but perhaps that’s largely due to my background in JavaScript (JS and Clojure are both dynamically typed). The funny thing is that there seemed to be a theme where Clojure developers end up finding enlightenment in Haskell thanks to its strict ways. Perhaps learning Clojure is the perfect stepping stone for learning Haskell? If you’re intrigued, check out:</p>

<ul>
  <li><a href="http://www.braveclojure.com/getting-started/#1__First_things_first__What_is_Clojure_">Clojure for the Brave and True</a>, an online book</li>
  <li><a href="https://github.com/ClojureBridge/curriculum/tree/gh-pages">ClojureBridge</a>, organization providing workshops and a free online curriculum</li>
  <li><a href="https://sekao.net/nightmod/">Nightmod</a>, a Clojure-based game-making tool</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Talk While Coding and Whiteboarding in 7 Steps]]></title>
    <link href="http://RebootJeff.github.io/blog/2015/04/19/how-to-talk-while-coding-and-whiteboarding/"/>
    <author>
      <name><![CDATA[@RebootJeff]]></name>
      
    </author>
    <updated>2015-04-19T21:13:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2015/04/19/how-to-talk-while-coding-and-whiteboarding</id>
    <content type="html"><![CDATA[<p><img src="http://RebootJeff.github.io/images/20150419/startupstock_whiteboarding.jpg" alt="Photo of whiteboarding" /></p>

<p>In <a href="http://RebootJeff.github.io/blog/2014/09/02/communication-for-engineers-101-we-have-a-problem/">my first article on Communication For Engineers</a>, I ranted about my disappointment surrounding engineering and communication skills. I ended that blog post with a list of communication-related topics that I promised to write about. Instead of addressing any of those topics (sorry!), this post will talk about how software engineers can improve their communication while coding collaboratively or while solving coding challenges for a job interview.</p>

<p><strong>Warning:</strong> JavaScript is my specialty, so some of the advice below is JS-centric, and all code examples are written in JS.</p>

<h4 id="i-cooked-up-7-steps-for-how-to-discuss-code-smoothly">I cooked up 7 steps for how to discuss code smoothly:</h4>

<ol>
  <li>Draw the situation</li>
  <li>Ask clarifying questions</li>
  <li>Explain approach</li>
  <li>Breadth-first coding</li>
  <li>Refactor</li>
  <li>Walkthrough</li>
  <li>Testing</li>
</ol>

<p>Notice that these steps don’t magically provide a complete guide to actually solving problems. For example, they don’t tell you which data structures to use. Instead, these steps show you how to communicate better as you solve a challenge. They help you talk with your interviewer or colleague about the problem space, your initial impressions, your ability to break down the problem into sub-problems, and your quality assurance process.</p>

<h1 id="the-7-steps-explained">The 7 Steps Explained</h1>

<h2 id="drawing-the-problem">1. Drawing the Problem</h2>
<p>Admittedly, this step could be optional. Drawing is best for folks who work well with visuals. But even if you’re not an artist, you should still consider drawing a diagram or picture of the problem because visuals tend to be effective tools for communicating complex subjects and situations. For example, data structures are usually easier to talk about after you draw them out.</p>

<p>Furthermore, you might reveal certain questions through the act of drawing. At the very least, <strong>drawing stuff out can help an interviewer follow you</strong>. Going back to the data structures example: imagine you’re supposed to work with a binary tree. It’s easier to talk about it if you draw a tree and point to nodes rather than just saying, “First we will process the root node, then we will go to the left child and do blah blah blah. At that point, depending on the value, we might go down to the child’s child or we might…”</p>

<p>By the way, <strong>you don’t have to stick to drawing pictures</strong>. This step could be about writing down example data, example inputs, example outputs, example use cases; and then mapping them together by drawing arrows, circles, etc. Examples are great for communication, and they are also good for problem-solving in general. Try to think of examples that are really simple (to get a basic grasp of the problem), examples that are more realistic, and examples that are crazy (to reveal edge cases and potential validation concerns).</p>

<h2 id="asking-clarifying-questions">2. Asking Clarifying Questions</h2>
<p>Do not follow any of your assumptions without asking a question first. It’s tempting to hear a challenge or puzzle and immediately get into solving it. But there are real-world concerns for real-world problems, and you should demonstrate your familiarity with such issues.</p>

<p>Also, you can save time by asking clarifying questions during an interview because interview challenges tend to be contrived. Do you have to account for crazy input values? Does the output need to be formatted in a certain way? If the puzzle involves numbers, do you have to account for negative values, decimals, etc? Are you expected to do input validation, error handling, or memory optimization?</p>

<h2 id="explaining-your-approach">3. Explaining Your Approach</h2>

<p>At this point, you might have a solution in mind and you’re eager to get coding. Or you might just have a partial solution. Either way, take a moment to give a quick overview of the <strong>purpose</strong> of the code you’re about to write. Also, give a sense of what <strong>algorithms or concepts</strong> will be implemented as part of your approach to the problem at hand.</p>

<p>For example, “This looks like a problem we can solve with a recursive solution that traverses all nodes of the dataset.” In this example, “recursion” is the concept and traversal is the purpose.</p>

<h2 id="breadth-first-coding">4. Breadth-First Coding</h2>

<p>When it comes time to actually write out some code (or pseudocode), write out as much as possible at a high-level before going into the low-level details. For example, if your solution requires looping over objects received from an AJAX request in order to parse some data, don’t dive into that AJAX request. That’s a low-level detail. Start from the high-level approach of “fetching data” and then immediately move to the next high-level step of “parsing data”. With this strategy, you cover the whole breadth of the solution before diving into any detail of the solution.</p>

<p>In other words, write modular code by using a breadth-first mindset. Everyone knows it’s a good idea to write several small functions rather than one giant function, so apply that approach to your communication too. When you explain how a computer works, you start the explanation at a high level (e.g., “hard drives store data, CPUs crunch data, …”) rather than starting at a low level (e.g., “the flow of electrons is controlled by gates known as transistors”).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Example - Breadth-First Coding </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Challenge (aka Prompt) - Write a function that determines the average number of</span>
<span class="comment">// retweets for a given user after a given cut off date.</span>

<span class="comment">// Phase 0 - Psuedocode (optional)</span>
<span class="keyword">function</span> <span class="function">getRetweetAverage</span>(username, cutOffDate) {
  <span class="comment">/**
   * 1. Fetch tweets via Twiter API
   * 2. Filter tweets based on date
   * 3. Calculate avg count of retweets from filtered data
   * 4. Return a promise that resolves to the answer
  **/</span>
}

<span class="comment">// Phase 1 - Coding with declarative helper functions</span>
<span class="keyword">function</span> <span class="function">getRetweetAverage</span>(username, cutOffDate) {
  <span class="keyword">return</span> fetchTweets(username).then(<span class="keyword">function</span>(tweets) {
    <span class="keyword">var</span> recentTweets = filterTweetsByDate(tweets, cutOffDate);
    <span class="keyword">return</span> calculateAverageRetweets(recentTweets);
  });
}

<span class="comment">// Phase 2 - Implement low-level helper functions</span>
<span class="keyword">function</span> <span class="function">fetchTweets</span>(username) {
  <span class="comment">// Let's pretend we're using AngularJS's HTTP request service, which uses promises.</span>
  <span class="keyword">var</span> params = {
    <span class="key">screen_name</span>: username,
    <span class="key">count</span>: <span class="integer">200</span> <span class="comment">// FYI this is the max allowed by Twitter's API</span>
  };
  <span class="keyword">return</span> <span class="predefined">$http</span>.get(<span class="string"><span class="delimiter">'</span><span class="content">https://api.twitter.com/1.1/statuses/user_timeline.json</span><span class="delimiter">'</span></span>, params);
}

<span class="keyword">function</span> <span class="function">filterTweetsByDate</span>(tweets, cutOffDate) {
  <span class="keyword">return</span> tweets.filter(<span class="keyword">function</span>(tweet) {
    <span class="comment">// Convert tweet's String date into a JS Date object before comparing.</span>
    <span class="keyword">var</span> createdAt = <span class="keyword">new</span> Date(tweet.created_at);
    <span class="keyword">return</span> createdAt &gt; cutOffDate;
  });
}

<span class="keyword">function</span> <span class="function">calculateAverageRetweets</span>(tweets) {
  <span class="keyword">var</span> totalRetweets = tweets.reduce(<span class="keyword">function</span>(sum, tweet) {
    <span class="keyword">return</span> sum + tweet.retweet_count;
  }, <span class="integer">0</span>);
  <span class="keyword">return</span> totalRetweets / tweets.length;
}
</pre></div>
</div>
 </figure></notextile></div>

<p>In the example above, you should write code one “phase” at a time. Starting with psuedocode is optional, but it might be a good idea to at least verbalize it if you don’t plan on writing it. Then write the code in a declarative style as seen in “Phase 1”. Lastly, flesh out the functionality of your solution by writing the code that actually makes things work.</p>

<p>By the way, I’ve never actually used the Twitter API, so the example code might not follow best practices or might not take into account how it actually behaves. For instance, maybe the API accepts a parameter to do the date filtering for you.</p>

<h2 id="refactoring-your-first-draft">5. Refactoring Your First Draft</h2>

<p>Once you’ve reached the point where the code seems to solve the challenge at hand, it’s time to refactor. If you’re writing under pressure in an interview situation, it’s likely that you haven’t written the cleanest code. If you’re writing without any pressure, it’s still good to refactor your first draft into a more readable/maintainable variant. Here’s a list of tips for deciding what to refactor:</p>

<ul>
  <li><strong>Improve readability</strong> by fixing indentation, whitespace, names, etc.
    <ul>
      <li><strong>Rename variables</strong> into semantic names. It’s tempting to use very short variable names during interviews because you feel pressure to finish quickly. Consider renaming them into more recognizable names to show your audience that you know how to write maintainable code that potential co-workers could easily read.</li>
      <li><strong>Replace loops</strong> with a <code>map</code>, <code>filter</code>, <code>reduce</code>, etc where possible.</li>
      <li><strong>Consider naming anonymous functions</strong> if they have potential to be re-used as a helper.</li>
    </ul>
  </li>
  <li><strong>Extract code</strong> into helper functions. It’s very common for interview candidates to inadvertently write long functions. Even if you tried to follow Breadth-First Coding in Step 4, you may have slipped.</li>
  <li><strong>Double-check promises</strong> and look for opportunities to reduce boilerplate and anonymous functions.
    <ul>
      <li><strong>Check return statements</strong> to ensure that your promises will resolve to the correct values (and that the segments of your promise chain will pass correct values).</li>
      <li><strong>Use promise library helpers</strong> such as <code>all</code>, <code>spread</code>, etc where possible.</li>
    </ul>
  </li>
  <li><strong>Add error-handling</strong>/logging for professional bonus points.</li>
  <li><strong>Rewrite in another style</strong> (e.g., Functional Programming vs Object-Oriented Programming) for massive bonus points.</li>
</ul>

<p>Admittedly, this Step 5 isn’t as directly related to communication as other steps. It’s mostly focused on improving your code. However, there is still a communiation-related opportunity here. As you are refactoring, verbalize your intentions. Discuss what you want to improve before you improve it. Explain the rationale behind the improvements. Mentions the pros and cons of your code without the improvements and with the improvements (i.e., before vs after).</p>

<h2 id="walking-through-your-answer">6. Walking Through Your Answer</h2>

<p>At this point, your code should be presentable. By following the previous steps, your audience should already have a solid, high-level understanding of your code. So now it’s time to give a detailed walkthrough.</p>

<p>Explain any nuances, use precise terminology, and expound on any interesting control flow or references (e.g., closures in JavaScript). You can also mention any implications regarding speed, memory, I/O, security, etc. But overall, your goal is to describe your code <em>in detail</em>.</p>

<h2 id="testing-your-answer">7. Testing Your Answer</h2>

<p>You might actually want to perform this step before step 6, but it depends on how you roll. After you’ve gotten to the point where you have a solution that seems to be good, take a minute to describe how you’d make sure it’s robust. When you normally write code on your own, you of course test it out by running it with various inputs or circumstances. Describe them; verbalize them.</p>

<p>For example, if you’re writing a function with some parameters, you’ll probably run the function with a bunch of different arguments with different values and maybe different datatypes.</p>

<ul>
  <li><strong>Numbers:</strong> negative values, 0, 1, odd vs even, really big numbers, decimals</li>
  <li><strong>Strings:</strong> upper vs lower case, single character, numeric characters, punctuation and non-alphanumeric characters.</li>
  <li><strong>Object Literals:</strong> check for weird keys (much like <em>Strings</em>)</li>
  <li><strong>Collections &amp; Data Structures:</strong> empty collections, only 1 item, several items, check for mutation side-effects, ascending order, descending order, random order, nested objects/arrays/other data structures.</li>
</ul>

<h1 id="where-did-these-steps-come-from">Where Did These Steps Come From?</h1>

<p>I came up with these 7 steps based on…</p>

<ul>
  <li><a href="http://RebootJeff.github.io/blog/2014/05/31/dev-job-search-tips-from-the-coding-interview-guru/">advice from Gayle Laakmann McDowell</a></li>
  <li><a href="http://RebootJeff.github.io/blog/2014/05/11/hackr-diary-weeks-11-12-and-beyond/">advice from Hack Reactor instructors</a></li>
  <li>my experience interviewing for jobs</li>
  <li>my experience conducting a handful of mock interviews for Hack Reactor grads</li>
  <li>my experience conducting interviews where I work (10+ so far)</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Help a Beginner Debug Code]]></title>
    <link href="http://RebootJeff.github.io/blog/2015/04/11/how-to-help-a-beginner-debug/"/>
    <author>
      <name><![CDATA[@RebootJeff]]></name>
      
    </author>
    <updated>2015-04-11T16:21:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2015/04/11/how-to-help-a-beginner-debug</id>
    <content type="html"><![CDATA[<p><img src="http://RebootJeff.github.io/images/teachingatmks.jpg" alt="Teaching" /></p>

<p>When I teach JavaScript workshops, I usually have teaching assistants who can help students complete classwork exercises. The TAs mostly focus on helping beginners debug their code rather than just giving solutions and walking through them.</p>

<p>Here’s the advice that I give TAs:</p>

<h2 id="dear-teaching-assistant">Dear Teaching Assistant</h2>

<p>Remember that you should avoid giving away direct solutions. When students ask for your help, they will often not know exactly what puzzles them. They will often just ask, “Can you help me?” rather than asking something more precise such as, “Why doesn’t this function return the value I expect?”</p>

<p>Your role is to understand the particular problem that the student is facing. Try to find out what precise questions should be asked and relay them to the student. This might require vocalizing your step-by-step thought process for solving the problem, and finding the first step that confuses the student.</p>

<p>When debugging, try to debug the student’s code one step at a time. Explain those steps so the student can learn how to debug (e.g., where to put <code>console.log</code>s, which variables need to be checked, etc).</p>

<p>Never give the hungry student a cooked fish. Teach the student how to use a fishing pole, a gutting knife, a cooking fire, and Chrome DevTools.</p>

<p>Do everything you can to show a student <em>how</em> to get the solution. Showing a student the actual solution is the last resort. At that point, you should not only show the student the solution, but walk through it and ask the student questions to test their understanding. Oftentimes, asking a student “do you understand?” is not effective. You will get nods thanks to a superficial level of a understanding. That understanding must be tested by asking the student to walk through the code verbally, asking the student values of specific variables, and so on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Myth of the AngularJS Armageddon]]></title>
    <link href="http://RebootJeff.github.io/blog/2015/01/05/maybe-the-angularjs-armageddon-isnt-real/"/>
    <author>
      <name><![CDATA[@RebootJeff]]></name>
      
    </author>
    <updated>2015-01-05T19:26:00-08:00</updated>
    <id>http://RebootJeff.github.io/blog/2015/01/05/maybe-the-angularjs-armageddon-isnt-real</id>
    <content type="html"><![CDATA[<p><img src="http://RebootJeff.github.io/images/20150105/AngularRIP.png" alt="RIP? AngularJS" /></p>

<p>A few months ago, the JavaScript community had a rather negative <a href="https://www.quora.com/Why-are-many-developers-upset-about-the-changes-in-Angular-2-0">reaction to an announcement about Angular v2.0</a>. <em>Quick aside: my boss lost faith in Google and jumped on the ReactJS bandwagon.</em> On a <a href="http://devchat.tv/adventures-in-angular/016-aia-ng-1-3-and-2-0-with-brad-green-igor-minar-and-mi-ko-hevery">recent episode</a> of the Adventures in Angular podcast, the Angular core dev team tried to clear the air regarding the general approach for Angular 2.0 and the differences between Angular 1.3 and 2.0. The podcast is surprisingly well-done. There are 9 people included (1 of them is THE <a href="http://www.johnpapa.net/angularjs-patterns-clean-code-released/">John Papa</a>; 4 of them are Angular team members) and yet they never accidentally interrupt one another or talk over one another.</p>

<p>I’ve listed some interesting bits I gleaned:</p>

<h3 id="some-misunderstandings">Some Misunderstandings</h3>

<ul>
  <li>It sounds like there might actually be a migration path for 1.3 to 2.0. There is no path yet because 2.0 isn’t close enough to completion to judge. The idea of <strong>“no migration path” was a misunderstanding</strong>.</li>
  <li>It is not necessary to use AtScript for Angular 2.0 (and it is not necessary to use Angular 2.0 for AtScript).</li>
</ul>

<h3 id="some-rationale">Some Rationale</h3>

<ul>
  <li>They’re trying to re-make their routing module in a way that will be easier to use.</li>
  <li>Some things are disappearing for logical reasons:
    <ul>
      <li><code>$scope</code> is disappearing because they realized “controller as” syntax is best, so they want to revamp that system completely to avoid common <code>$scope</code> confusion.</li>
      <li>Code for directives will be totally different because <a href="https://d2eip9sf3oo6c2.cloudfront.net/pdf/egghead-io-directive-definition-object-cheat-sheet.pdf">Directive Definition Objects</a> as they currently stand are ugly and kind of convoluted (e.g., most directives don’t need a linking function, they just need a controller function –kind of like how most views/templates should use <code>controllerAs</code> instead of <code>$scope</code>).</li>
      <li>Angular’s module system will disappear because ECMAScript6 will have a native module system. By embracing the new ES6 system, it will make Angular 2.0 more compatible with future non-Angular modules (much like how all back-end JS embraces Node’s system).</li>
    </ul>
  </li>
  <li>There are a few <strong>key motivations behind Angular 2.0’s design:</strong>
    <ul>
      <li>Mobile friendliness.</li>
      <li>Fixing mistakes they’ve made when creating Angular 1.x (e.g., getting rid of $scope).</li>
      <li>Simplicity and performance.</li>
      <li>Embracing future tech like ES6 and web components.</li>
    </ul>
  </li>
</ul>

<h3 id="some-points-of-emphasis">Some Points of Emphasis</h3>

<ul>
  <li>The new syntax looks crazy, but the Angular team claims that it will be much harder to convert a non-Angular 1.3 app to 2.0 than to convert Angular 1.3 to 2.0 –which sounds like a no-brainer, but as you can imagine, they’re really trying to emphasize that you should not abandon 1.3 just because 2.0 looks so different now.</li>
  <li>They emphasized how Angular 2.0 is still in a state of flux, so it’s too early to make business decisions based on it.</li>
  <li>The Angular team claims they are making changes for practical reasons, not purely academic reasons. In other words, they have examined how current Angular apps are made, deployed, etc. They don’t just think about what would be cool, they do think about what would be truly helpful/useful.</li>
</ul>

<h3 id="my-takeaways">My Takeaways</h3>

<p>I know I sound like I’m defending the Angular team. To a certain extent, that’s true (I need to try some React.js one day to hopefully reduce my bias for Angular), but it really comes down to:</p>

<ul>
  <li>They’re converting to ES6, which means it will probably be necessary to use a transpiler to convert core Angular 2.0 code to ES5 for older browsers.
    <ul>
      <li>Ideally, this won’t be a huge problem for evergreen (self-updating) browsers. Maybe they will support key ES6 features by the time Angular 2.0 becomes “mainstream” (in the same sense that Angular 1.3 is currently “mainstream”). Or maybe I’m dreaming :p.</li>
    </ul>
  </li>
  <li>There were some huge misunderstandings when Angular 2.0 was announced (re: lack of migration path, role of AtScript, etc).</li>
  <li>It’s too early to really tell what Angular 2.0 will look like when it’s released.</li>
  <li>When Angular 2.0 does arrive, it may look syntactically different, but it will do many of the same, <em>Angulary</em> things (i.e., the Angular “flavor” of MVC, augmenting HTML markup, enabling powerful custom components, etc).</li>
</ul>

<h3 id="newsflash-angular-1x-is-not-dead">Newsflash! Angular 1.x is NOT Dead!</h3>

<p><strong>Angular 1.4 is <a href="http://angularjs.blogspot.com/2014/12/planning-angular-14.html">coming in Spring 2015</a>.</strong></p>

<p>News of 1.4 landed <em>after</em> the podcast aired. It will bring the new router I mentioned earlier, a “first class” I18N system, slick-looking documentation (using <a href="https://material.angularjs.org/">Angular-Material</a>), and other goodies –including some breaking changes. :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Start AND Continue Learning JavaScript and Web Development]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/11/23/how-to-learn-javascript-and-web-development/"/>
    <author>
      <name><![CDATA[@RebootJeff]]></name>
      
    </author>
    <updated>2014-11-23T21:37:00-08:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/11/23/how-to-learn-javascript-and-web-development</id>
    <content type="html"><![CDATA[<p><img src="http://RebootJeff.github.io/images/20141123/IMG_20141116_135049sp.jpg" alt="Teaching my JS Fundamentals workshop" /></p>

<p class="my-caption">Me teaching a JavaScript workshop for beginners</p>

<p class="last-updated">Last update on Nov 30, 2014 to add a great link to the &#8220;Compilations&#8221; section.</p>

<ol>
  <li>A couple of weeks ago, a friend asked me for advice on giving advice to beginners.</li>
  <li>One week ago, I taught a <a href="http://www.meetup.com/hackreactor/events/217841372/">class on JavaScript</a> for beginners (or <em>advanced</em> beginners –as I like to say).</li>
  <li>A few days ago, I recently found a <a href="https://www.quora.com/Should-I-purchase-a-Code-School-subscription-to-prepare-for-the-Hack-Reactor-interview">Quora question about getting better at JS</a>.</li>
</ol>

<p>These three moments have had my brain wondering about how to point coding newbies in the right direction. After some Googling and recalling my own past, I’ve gathered some links that will hopefully help beginners and maybe even intermediate folks. However, I should warn you that I haven’t tried out all the various services for myself.</p>

<h2 id="the-basics">The Basics</h2>

<p><a href="http://imgur.com/gallery/BL6Vs">This Imgur post</a> lists 6 sites that provide tutorials for getting started in coding. I’ve personally used Code School and Codecademy. They’re great, but after awhile, you’ll want to explore other options. They are not sufficient by themselves.</p>

<h2 id="compilations">Compilations</h2>

<p>These sites gather tutorials and various resources into one place. Most of these also give some guidance or roadmap to help beginners prioritize what to learn:</p>

<ul>
  <li><a href="http://programming-motherfucker.com/become.html">Programming, Motherf…</a>: Categorized links for various languages.</li>
  <li><a href="https://www.bento.io/">Bento</a>: Links organized into manageable sections.</li>
  <li><a href="http://www.whatsnext.info/#/javascript">What’s Next</a>: Links grouped by topic and difficulty.</li>
  <li><a href="http://www.theodinproject.com/courses">The Odin Project</a>: Open-source web dev curriculum.</li>
  <li><a href="http://www.jstherightway.org/">JavaScript The Right Way</a>: Links covering the entire JS ecosystem (basics, patterns, testing, frameworks, news/podcasts/feeds).</li>
</ul>

<h2 id="the-fundamentals-of-js">The Fundamentals of JS</h2>

<p>If you’re specifically trying to learn the quirks of JavaScript, then <a href="http://www.meetup.com/hackreactor/events/217841372/">classes like the one I teach</a> are perfect for you. If you’re not near San Francisco, you can try <a href="https://frontendmasters.com/workshops/js-fundamentals-to-functional/">online classes</a> taught by the one who helped me become a teacher (<a href="https://twitter.com/biancagando">@BiancaGando</a>).</p>

<p>But these aren’t free. Ya know what is free? This great gathering of words describing vital JS concepts: <a href="http://javascriptissexy.com/16-javascript-concepts-you-must-know-well/">16 JavaScript Concepts JavaScript Professionals Must Know Well</a></p>

<h2 id="the-community">The Community</h2>

<p>San Francisco is my neck of the woods. If you’re lucky enough to be around here, then you should take advantage of the stellar community. There are lots of free meetups/events that can help you learn. If you’re not in the area, check Meetup.com for groups that provide similar events.</p>

<ul>
  <li><a href="http://www.meetup.com/tinderbox/events/212435202/">Tinderbox</a>: They often host “hack nights”, which might sound intimidating, but they’re very open-ended so you could show up and just ask for help learning a particular subject.</li>
  <li><a href="http://www.meetup.com/SFRails/events/199733902/">SF Rails</a>: Much like Tinderbox, the SF Rails group hosts open-ended “protonight” events. The group might focus on Ruby on Rails, but you’re likely to find people who can help with any beginner or intermediate level coding topic.</li>
</ul>

<p>If you’re female, you might want to search for organizations that provide free support for women. Some examples:</p>

<ul>
  <li><a href="https://www.womenwhocode.com/">Women Who Code</a></li>
  <li><a href="http://www.girldevelopit.com/">Girl Develop It</a></li>
  <li><a href="http://railsbridge.org/">Railsbridge</a></li>
  <li><a href="https://twitter.com/tevgende">Aysegul Office Hours</a></li>
</ul>

<p>Back in the day, I used <a href="http://curriculum.railsbridge.org/frontend/frontend">a free, online curriculum</a> created by Railsbridge to learn some web dev skills.</p>

<p>A Hack Reactor alum recently launched a free service called Hackvard. It helps people quickly find nearby programmers who want to meet up. After a few weeks (or days?), it was renamed to <a href="http://www.codaround.com/">Codaround</a>. One of the co-founders contacted me and mentioned that Codaround might be changed to focus on helping match mentors/teachers with students/beginners. I don’t know any details, but it’s worth keeping an eye on this.</p>

<h2 id="games">Games</h2>

<p>Want to play while you program? Here are some sites that turn learning to code into a game:</p>

<ul>
  <li><a href="http://www.checkio.org/">CheckIO</a>: When I <a href="http://localhost:4000/blog/2013/09/02/mini-review-of-checkio/">tried them out</a>, I wasn’t impressed by their attempt to cover coding challenges in a layer of gamification. A CheckIO employee reached out to me and told me things have changed a lot. I haven’t verified his claims, but their user base was pretty large last time I checked, and their blog is very active, so they’re alive and kicking.</li>
  <li><a href="http://codecombat.com/">Code Combat</a>: I played with this a couple months ago. It was fun, but a tad buggy. I like the idea of writing code to control your character.</li>
  <li><a href="http://www.screeps.com/">Screeps</a>: This looks quite promising. You write code to control small armies.</li>
</ul>

<h2 id="what-else">What else?</h2>

<p>Let me know in the comments (or via Twitter) if you know of any other solid resources that help people learn JavaScript and other programming skills.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Security Fundamentals - Part 2: More Info on Modern Defense]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/09/22/web-security-fundamentals-part-2-helpful-resources/"/>
    <author>
      <name><![CDATA[@RebootJeff]]></name>
      
    </author>
    <updated>2014-09-22T08:26:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/09/22/web-security-fundamentals-part-2-helpful-resources</id>
    <content type="html"><![CDATA[<p class="last-updated">Last updated: Sep 22nd, 2014 at 12:21PM PDT. I added <a href="#angularjs--csp">some info</a> about using CSP with AngularJS.</p>

<p>Last Thursday, I published <a href="http://RebootJeff.github.io/blog/2014/09/18/web-security-fundamentals-by-google-peeps/">a blog post</a> in which I summarized the main attack techniques (XSS, CSRF, and MITM) used by baddies to screw with the web. That post also covered two header-based solutions available to help you defend your site: CSP and HSTS. To supplement all that info, I am providing a bunch of articles, references, videos, and tools to help you learn more and take advantage of CSP and HSTS.</p>

<h1 id="content-security-policy-csp">Content Security Policy (CSP)</h1>

<h3 id="browser-support">Browser Support</h3>

<p>Cross-browser support for CSP is <a href="http://caniuse.com/#feat=contentsecuritypolicy">pretty good</a>. The latest versions of IE require the CSP header to use a special prefix (much like vendor prefixes for certain CSS features). Older crap like IE9 and below have no CSP support.</p>

<h3 id="angularjs--csp">AngularJS + CSP</h3>

<p>Sadly, CSP reduces Angular’s performance because the framework does some optimizations that run afowl of CSP. I imagine that the performance loss shouldn’t be a problem unless you have a ton of Angular expressions on the page at once (e.g., you use <code>ng-repeat</code> to generate hundreds of expressions).</p>

<p>Despite these concerns, CSP is highly recommended by the <a href="https://docs.angularjs.org/misc/faq">AngularJS FAQ page</a>. For more info on how to use CSP with AngularJS, check out the <a href="https://docs.angularjs.org/api/ng/directive/ngCsp">docs for the ngCSP directive</a>.</p>

<h3 id="further-readingreferences">Further Reading/References</h3>

<ul>
  <li><a href="http://www.html5rocks.com/en/tutorials/security/content-security-policy/">HTML5 Rocks - Intro to CSP</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/Security/CSP">MDN - CSP Topics</a></li>
  <li><a href="http://content-security-policy.com/">CSP Cheatsheet</a></li>
  <li><a href="http://engineeringblog.yelp.com/2014/09/csp_reports_at_scale.html">Yelp Engineering Blog - CSP at Scale</a></li>
</ul>

<h4 id="awesome-presentation-on-csp">Awesome Presentation on CSP</h4>
<iframe width="300" height="169" src="http://RebootJeff.github.io//www.youtube-nocookie.com/embed/pocsv39pNXA" frameborder="0" allowfullscreen=""></iframe>

<h1 id="http-strict-transport-security-hsts">HTTP Strict Transport Security (HSTS)</h1>

<h3 id="browser-support-1">Browser Support</h3>

<p>Most browsers get a passing grade when it comes to HSTS support –except for…</p>

<blockquote><p>Internet Explorer doesn&#8217;t support HSTS—which means that there&#8217;s basically no such thing as a secure website in IE</p><footer><strong>Electronic Frontier Foundation (EFF),</strong> <cite><a href="https://www.eff.org/deeplinks/2014/02/websites-hsts">Websites Must Use HSTS in Order to Be Secure</a></cite></footer></blockquote>

<h3 id="further-readingreferences-1">Further Reading/References</h3>

<ul>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security">MDN - HSTS Overview</a></li>
  <li><a href="https://www.eff.org/deeplinks/2014/02/websites-hsts">EFF - HSTS is a must</a></li>
  <li><a href="https://www.leviathansecurity.com/blog/the-double-edged-sword-of-hsts-persistence-and-privacy/">Leviathan - Caveat for using HSTS with wildcard SSL certificates</a></li>
</ul>

<h4 id="quick-video-summary-of-mitm-and-hsts">Quick Video Summary of MITM and HSTS</h4>

<iframe width="300" height="169" src="http://RebootJeff.github.io//www.youtube-nocookie.com/embed/zEV3HOuM_Vw" frameborder="0" allowfullscreen=""></iframe>

<p><strong>Note:</strong> The video above provides <em>outdated</em> browser support info. Updated info can be found here: <a href="http://caniuse.com/#feat=stricttransportsecurity">CanIUse.com</a>.</p>

<h1 id="bonus-security-toolkit-for-express-apps">Bonus: Security Toolkit for Express Apps</h1>

<h2 id="lusca">Lusca</h2>

<p>Do you use Node.js? Does your Node.js app use Express? Want some middleware to help secure that app? Perhaps you should consider using <a href="https://github.com/krakenjs/lusca">Lusca</a>, a free module created by Paypal to quickly add and configure various security features such as CSP and HSTS. I haven’t personally tried it yet, but I plan to do so soon. Their README file makes Lusca look very easy for devs to use.</p>

<p>You can pick and choose which security features you want to enable. For example, if you’re already using <a href="http://angular-tips.com/blog/2014/05/json-web-tokens-introduction/">JSON Web Tokens</a>, then you may not want to use Lusca’s CSRF method while you take advantage of Lusca’s legacy browser XSS protection.</p>

<p>By the way, don’t get confused: Paypal uses their own open-source, Express-based framework called KrakenJS, but Lusca works with Kraken apps <em>and</em> Express apps.</p>

<h4 id="presentation-on-securing-spas-and-nodejs-apps-by-paypal-engineer">Presentation on Securing SPAs and Node.js Apps (by PayPal Engineer)</h4>

<iframe width="300" height="169" src="http://RebootJeff.github.io//www.youtube-nocookie.com/embed/40-Ccq6b5lk" frameborder="0" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Security Fundamentals - Part 1: What Google Peeps Say]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/09/18/web-security-fundamentals-by-google-peeps/"/>
    <author>
      <name><![CDATA[@RebootJeff]]></name>
      
    </author>
    <updated>2014-09-18T10:26:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/09/18/web-security-fundamentals-by-google-peeps</id>
    <content type="html"><![CDATA[<p>Back in late May, I went to one of the most informative tech meetups ever. The <a href="http://www.meetup.com/sfhtml5/">SFHTML5 meetup group</a> organized an event at the Google SF office to cover web security. Google security researchers presented about 2.5 hours of lectures talking about common hacks/attacks, good defense, and the general state of web security.</p>

<p>You can check out the slides here: <a href="http://www.meetup.com/sfhtml5/events/179713932/#event_comment-362704742">click here if you dare.</a> You can watch the lectures here:</p>

<iframe width="300" height="185" src="http://RebootJeff.github.io//www.youtube-nocookie.com/embed/Yg5g2aMKbNA?list=PLOU2XLYxmsIIkEU3Z_xdVo9EADurbdxKa" frameborder="0" allowfullscreen=""></iframe>
<p />

<p>But if you don’t feel like sitting through 2.5 hours of lecture, allow me to summarize the best parts:</p>

<ol>
  <li>Common hacks/exploits
    <ul>
      <li>XSS</li>
      <li>CSRF</li>
      <li>MITM</li>
    </ul>
  </li>
  <li>Simple security best practices
    <ul>
      <li>Use frameworks/libraries to fight XSS for you</li>
      <li>Implement CSP to protect your front end</li>
      <li>Reinforce HTTPS with HSTS</li>
    </ul>
  </li>
</ol>

<p><strong>I won’t go into detail about any particular topic.</strong> This blog post will simply get you started in understanding fundamental web security. I suggest you use Google to research more about hacks/attacks or wait for me to post another blog post that provides a collection of links to sweet videos, references, and articles that I found particularly helpful for learning more about all these topics.</p>

<h1 id="be-afraid">Be Afraid</h1>

<p>How are websites and web apps compromised? Why are sites often “hacked”? There are three main types of attacks that you should worry about: XSS, CSRF, and MITM.</p>

<h2 id="cross-site-scripting-xss">Cross-Site Scripting (XSS)</h2>

<p>When a punk manages to get your code to run their JavaScript, that’s XSS. A simple example is when an unprotected website just accepts text from the user and adds it to the site’s HTML code. If that text is actually JS, then the site ends up sending the browser user-generated code. Damn.</p>

<p>XSS is one of the most common problems plaguing web security today. This is pretty depressing because there are plenty of frameworks and libraries that help fight XSS, but so many site operators just don’t use them and some fools even try to write their own anti-XSS code.</p>

<h2 id="cross-site-request-forgery-xsrfcsrf">Cross-Site Request Forgery (XSRF/CSRF)</h2>

<p>Let’s say a user logs into your website or web app. They are now authenticated, right? Well it depends. It could be that the user’s <em>browser</em> is authenticated. An attacker could take advantage of this authentication and get the user’s browser to submit an HTTP request crafted with nefarious intentions. The request will be accepted because the browser has the right authentication cookie data, for example.</p>

<p>How is the evil HTTP request initiated? It could be through XSS, it could be through convincing a victim to visit a malicious site that sends HTTP requests, etc. Most examples mention authenticated cookies being used by attackers.</p>

<h2 id="man-in-the-middle-mitm">Man-in-the-Middle (MITM)</h2>

<p>There’s a reason why public internet is unsafe. When you’re on a shared network, other users on the same network can try to intercept your data. Not only can man-in-the-middle attacks read your data, they can also send you bad data/code. Some attackers merely intercept web pages you’re accessing, add more advertisements, and feed you the web page with extra ads. Other attackers might intercept your attempt to visit http://www.facebook.com, give you a fake Facebook login page, and convince you to submit your login info to them.</p>

<p>Obviously, protecting a network by requiring a password to connect can help. However, if you’re using public WiFi in a coffee shop where the password is given to anybody who asks for it, then you’re in trouble again. As I shall mention, HTTPS is crucial for fighting MITM pain.</p>

<h1 id="be-somewhat-less-afraid">Be Somewhat Less Afraid</h1>

<p>It’s great if you’re aware of threats. Now it’s time to learn the basics on how to combat the threats. At the meetup, the Google peeps focused on three types of solutions: frameworks/libraries, CSP, and HTTPS with HSTS. I will also mention a couple other technologies (BONUS) for your consideration.</p>

<h2 id="frameworkslibraries-features">Frameworks/Libraries Features</h2>

<p>One of the Google experts emphasized that XSS is a much bigger problem than it should be because there are so many frameworks and libraries that help fight XSS. He said that no one should be writing their own anti-XSS libraries. Instead, use one of the many open-source solutions. Also, it’s quite possible that you’re already using a framework that has anti-XSS features that just need to be activated or configured.</p>

<p>For example, in some templating libraries, a simple syntax change will enable anti-XSS escaping features. Other templating libraries automatically escape contents by default. Some frameworks like AngularJS do “round-trip escaping on all strings for you” to protect your app from XSS and other injection attacks.</p>

<h2 id="content-security-policy-csp">Content Security Policy (CSP)</h2>

<p>A server can instruct a browser to use a whitelist to decide which resources should be loaded and which should be blocked. This is done when a server adds a CSP to a response header.</p>

<p>For example, a CSP whitelist can tell a browser to trust script files from the server and Google CDNs, images from the server and Amazon CDNs, CSS files from the server, and web fonts from Google. Everything else will be blocked. In-line JavaScript will be blocked, in-line styles will be blocked, images hosted by 3rd parties will be blocked, Flash will be blocked, iframes will be blocked, etc.</p>

<p>Your CSP can be configured based on various types of resources. Check this <a href="http://content-security-policy.com/">CSP Cheatsheet</a> for the list of options. I recommend that you investigate server-side libraries, frameworks, or middleware that can help you implement CSP. When writing your CSP, you can try starting with the most restrictive whitelist and then see what needs to be unblocked.</p>

<h3 id="reporting-feature">Reporting Feature</h3>

<p>You can also set up a reporting system to find out what your CSP has managed to block (thereby identifying failed attacks).</p>

<p>A Googler suggested using the CSP reporting feature <em>without</em> an enforced whitelist to help you examine what browsers are actually digesting when they visit your site or app. For example, you could set up a CSP that has a whitelist and just asks browsers to report non-whitelisted sources without actually blocking them. This gives you the ability to <strong>tweak your whitelist based on production usage without changing production usage</strong>. After you’re done tweaking, change the CSP to force browsers to report <em>and</em> block uninvited resources and content.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Ultra-Strict Example CSP for Express server using Lusca middleware </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
app.use(lusca.csp({
  <span class="key">policy</span>: {
    <span class="key"><span class="delimiter">'</span><span class="content">default-src</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">none</span><span class="delimiter">'</span></span>, <span class="comment">// Block EVERYTHING</span>
  },
  <span class="key">reportOnly</span>: <span class="predefined-constant">true</span>, <span class="comment">// Record what's being blocked</span>
  <span class="key">reportUri</span>: <span class="string"><span class="delimiter">'</span><span class="content">/report-violation-endpoint</span><span class="delimiter">'</span></span>
}));
</pre></div>
</div>
 </figure></notextile></div>

<h2 id="https-and-http-strict-transport-security-hsts">HTTPS and HTTP Strict Transport Security (HSTS)</h2>

<h3 id="https">HTTPS</h3>

<p>To protect data transfers from MITM attacks, many sites connect to visitors via HTTPS. HTTPS connections not only protect typical payloads like JSON, but also static files and cookies that would otherwise be vulnerable to CSRF attacks. The hard part about using HTTPS is making sure no part of the site ever falls back to unencrypted HTTP.</p>

<p>For example, let’s say you’re browsing a site that provides free icons and graphics. Are all files served over HTTPS? HTML, CSS, and JavaScript files are no-brainers. What about images? Yeah that’s pretty standard too. But what about when you get an icon pack? You click a download link, and the browser starts downloading a zip file. Is that using the HTTPS protocol? It’s easy to <a href="http://httpshaming.tumblr.com/">make mistakes</a>.</p>

<h3 id="hsts">HSTS</h3>

<p>Furthermore, what if a user visits the site using HTTP first? It’s pretty common for people to type “somewebsite.com” in the URL bar and the browser will turn that into “http://somewebsite.com”. After they visit that URL, the site can redirect the visitor to “<strong>https</strong>://somewebsite.com”. But sadly, that initial connection via http wasn’t secure. It’s susceptible to a MITM attack.</p>

<p>With HTTP Strict Transport Security, the browser can automatically turn “somewebsite.com” into “<strong>https</strong>://somewebsite.com”. HSTS works by setting a header that tells the browser to enforce HTTPS for requests sent to the domain (“somewebsite.com”) for the next X number of seconds. Yes, you can set X to be a very large number such that HSTS is enforcing HTTPS for the next <em>year</em>, if you want to be cool like that.</p>

<h1 id="stay-tuned">Stay Tuned</h1>

<p>This blog post was getting pretty lengthy, so I decided to split it into two parts. In a follow-up blog post, I will provide a list of references, tutorials, and videos to help you research more about CSP, HSTS, and some complementary tools/libraries.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Communication for Engineers 101: We Have A Problem]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/09/02/communication-for-engineers-101-we-have-a-problem/"/>
    <author>
      <name><![CDATA[@RebootJeff]]></name>
      
    </author>
    <updated>2014-09-02T12:01:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/09/02/communication-for-engineers-101-we-have-a-problem</id>
    <content type="html"><![CDATA[<p>Software Engineers are hot shit right now. Recruiters pander to us by calling us rockstars, ninjas, and gurus. We are revered for our intellect, our problem solving skills, our powerful working memory, our familiarity with mysterious tech –but not for our communication skills. <strong>Why is this ok?</strong> If we’re expected to be smart, shouldn’t we be expected to grasp effective information exchange with <em>fellow humans</em>? Why is modern society still excusing coding “rockstars” from having to come equipped with high quality communication skills?</p>

<p><img src="http://RebootJeff.github.io/images/20140902/tin_can_walkies.jpg" alt="Tin Can Tech" /></p>

<p class="my-caption">Photo by <a href="http://gratisography.com/">Gratisography</a></p>

<p>How do I know that software engineers aren’t expected to have stellar communication abilities? While I don’t have hard data, I have met, worked with, or listened to a lot of engineers who have sub-par comm skills. And no one makes a big fuss of it, which makes me think no one has high standards for the skills I’m talking about.</p>

<p>On top of that, job interviews target coding skills, web tech trivia, and algorithms with minimal examination of proficiency in structuring arguments, explaining complex concepts, and intelligent discussion. There’s a <a href="http://qz.com/258066/this-is-why-you-dont-hire-good-developers/">pretty great article</a> by the CTO of npm that drills into this topic.</p>

<p>Maybe it’s all rooted by the tendency for engineering schools to suck at emphasizing communication in their curricula. My time in college certainly didn’t include any lessons on effective speaking. You often hear schools talk about the importance of group projects and working together, but they never explain what good teamwork looks like, what common pitfalls plague discussions/meeting, etc. Instead, they focus on teaching the hard sciences and math. Then class after class of students walk away with little or no appreciation for the subtleties and subjective nuances of conveying ideas to one another.</p>

<blockquote><p>I find it so funny that programmers laugh at all these subjective fields of endeavor when that is what they do.</p><footer><strong>David Heinemeier Hansson, Creator of Ruby on Rails,</strong> <cite><a href="https://www.youtube.com/watch?v=9LfmrkyP81M?t=18m30s">RailsConf 2014 Keynote: Writing Software</a></cite></footer></blockquote>

<p>The ability to “work well with others” is often mentioned as a requirement in job descriptions for programming positions, but how many interviewers and interviewees really know wtf that means? Does it mean employees are expected to avoid conflict like their lives depend on it? Is it benchmarked by low quantum of drama? Should it be deeply linked to “likeability”?</p>

<p>No. It’s about empathy, open-mindedness with regards to homo sapiens, and communication skills (among other things).</p>

<h3 id="who-died-and-made-you-king-of-communication-skills">Who died and made you king of communication skills?</h3>

<p>My point is that it’s time to stop letting engineers off the hook for lacking skills in listening, speaking, presenting, asking, writing, and critiquing. I’m no master in these subjects. My own skills are far from honed, but you don’t need to be a master to have some ideas on how to improve. Also, it can be fun to explore communication issues just like how it can be fun to solve mysteries in web app development. Besides, as engineers, we pride ourselves in being good at what we do, so shouldn’t we put some effort into gaining communication skills that make us even better at what we do?</p>

<p><strong>If you’re pondering my motivation for making such a big deal out of all this</strong>, then let me just say that impatience is a potent impetus. I started analyzing communication when I started noticing miscommunication and the toll it took on my patience. I’m not just talking about miscommunication during meetings at work. I’m also referring to poor presentations at meetups, chatting at networking events, conversing during job interviews, writing open-source documentation, writing test descriptions, etc.</p>

<p>When I don’t understand someone, I tend to wonder, “Wtf is this person even saying?” Then that little voice in my head chimes in, “Don’t be so harsh, Jeff. Maybe you’re just too dumb to understand.” After that, another inner commentator adds, “Fellas. Shut up. Let’s use our detail-oriented brain to brainstorm reasons why communication has fallen apart here.”</p>

<h1 id="lets-do-this">Let’s Do This</h1>

<p>We engineers are problem-solvers, right? Well here’s a problem: miscommunication. So let’s solve it. What’s the first step for solving stuff? Comprehend the problem space. Break it down. Then divide and conquer.</p>

<h2 id="breaking-it-down">Breaking it Down</h2>

<p>We’ve confirmed miscommunication. Now what are the root causes? There are too many possibilities to cover now, but here are a few:</p>

<ul>
  <li><strong>Knowledge Imbalance:</strong> Person A knows something person B doesn’t know. The imbalance results in lack of context or incorrect assumptions.</li>
  <li><strong>Ambiguity:</strong> Is the person talking about this? Or is the speaker talking about that? What is this? What is that? Maybe we’re referring to different things. Perhaps less ambiguous nouns are needed.</li>
  <li><strong>Suboptimal Terminology:</strong> Lack of or misuse of terminology and jargon is pretty common in programming. For example, does everyone know what you mean when you say “collection”? Are you referring to an object literal that has a bunch of properties, an array with a bunch of elements, a MongoDB collection, or a more abstract thingamabob that “collects” stuff?</li>
</ul>

<h2 id="divide-and-conquer">Divide and Conquer</h2>

<p><em>If X, then Y.</em></p>

<ul>
  <li>If there is a knowledge imbalance, then identify who needs what info and let the glorious sharing of knowledge begin.</li>
  <li>If something is ambiguous, then ask clarifying questions.</li>
</ul>

<p>Et cetera. One at a time. We can get through this together! Let’s hold hands! –or not. Because even the nicest people fail to wash their hands frequently enough to earn hand-holding privileges. Don’t let your guard down.</p>

<h1 id="whats-next">What’s Next?</h1>

<p>The next blog post in my <a href="http://RebootJeff.github.io/blog/categories/communication-for-engineers/">Communication for Engineers</a> series will focus on tips for presenting a tech talk. I’m oddly excited about it. I haven’t done any big tech talks, but I’ve attended plenty. There are some easy ways they could be better. There are common issues that are easy to solve. That said, I’m also working on a blog post covering web security fundamentals. In due time, I will write tips for:</p>

<ul>
  <li>Presenting a tech talk</li>
  <li>Conversation (with emphasis on listening)</li>
  <li>Asking Questions</li>
</ul>

<p>If I’m not burnt out from writing about communication skills, I will also blog about:</p>

<ul>
  <li>Giving &amp; Getting Feedback</li>
  <li>Writing (with emphasis on concision)</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protractor E2E Testing: Reveal Element Blocked By Fixed Nav]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/08/17/protractor-e2e-testing-reveal-element-blocked-by-fixed-nav/"/>
    <author>
      <name><![CDATA[@RebootJeff]]></name>
      
    </author>
    <updated>2014-08-17T14:19:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/08/17/protractor-e2e-testing-reveal-element-blocked-by-fixed-nav</id>
    <content type="html"><![CDATA[<p>End-to-end testing can be pretty tricky. There are a lot of “gotchas” that prove how hard it can be for you to truly think from the perspective of a computer. Ideally, E2E testing is all about writing tests from the perspective of a user, but that’s not going to always provide smooth sailing when writing E2E spec files.</p>

<p>This blog post is going to focus on a gotcha that rears its ugly head when you have a fixed nav bar. Nowadays, it’s pretty common to see fixed nav bars. Let’s use Twitter as an example. Twitter doesn’t use Angular, so you wouldn’t want to test their site using Protractor, but what I’m about to talk about can also be applied to WebDriver (which can be used for non-AngularJS sites).</p>

<p><img src="http://RebootJeff.github.io/images/20140817/screenshot_twitter_fixed_nav.png" alt="Twitter nav bar blocking an avatar" /></p>

<h1 id="whats-the-big-deal">What’s the big deal?</h1>

<p>Here’s the problem: <strong>what if we want Protractor to click on the avatar under the fixed nav bar as seen in the screenshot above?</strong> Obviously, a human user would intuitively scroll to find an element before clicking on it. However, Protractor’s perspective is different.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Example A - E2E spec with potential problem </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
describe(<span class="string"><span class="delimiter">'</span><span class="content">&quot;Who to Follow&quot; widget</span><span class="delimiter">'</span></span>, <span class="keyword">function</span>() {
  it(<span class="string"><span class="delimiter">'</span><span class="content">should include avatars that go to other Twitter profiles</span><span class="delimiter">'</span></span>, <span class="keyword">function</span>() {
    <span class="comment">// get first (index 0) avatar using class-based CSS selector</span>
    <span class="keyword">var</span> avatar = <span class="predefined">$$</span>(<span class="string"><span class="delimiter">'</span><span class="content">.who-to-follow .avatar</span><span class="delimiter">'</span></span>).get(<span class="integer">0</span>);

    <span class="comment">// Will this click always work?</span>
    avatar.click();

    <span class="comment">// assertion of what to expect as a result of the click</span>
    expect(blahBlahBlah).toBe(yadaYada);
  });
});
</pre></div>
</div>
 </figure></notextile></div>

<p>When you use <code>.click()</code>, you might expect Protractor (or WebDriver, which serves as the underlying engine for Protractor) will try to scroll the web page until the target element is displayed before clicking. However, Protractor will only scroll until the target element is in the browser <em>viewport</em>.</p>

<p>Now imagine your test suite includes several tests (ooh la la!). In test #1, the actions of the test cause Protractor to scroll to the bottom of the page. In test #2, the test tries to perform the actions of <em>Example A</em>. Therefore, during test #2, Protractor tries to scroll back up the page until the target avatar is in the viewport, but this just brings the avatar directly under the fixed nav bar.</p>

<p>Then Protractor attempts a click by finding the center of the target. So even if a tiny portion of the avatar’s butt is displayed just below the bottom of the fixed nav bar, it won’t be clicked. Instead, Protractor will throw an error saying that the target could not be clicked. The error will also mention that the nav bar would receive the click event.</p>

<h1 id="well-that-sucks-now-what">Well that sucks. Now what?</h1>

<p>There are two main solutions to consider:</p>

<ol>
  <li>Un-fix the nav bar for your E2E tests. –Bleh!</li>
  <li>Add extra scrolling to your E2E tests. –Okay</li>
</ol>

<p>The first solution might not be a great idea because it’s a major alteration for the sake of testing. What if the fixed position of the nav bar causes other issues that your tests will reveal? I believe you want E2E tests to interact with a product that is very close to the product users will interact with. Changing the nav bar’s position just for testing goes against this philosophy. The main exception to this rule is animation: I believe it’s ok to disable animations for E2E testing just because it can take up a lot of time, slowing down your test/build process. Also, animations can just be very cumbersome for automated E2E systems like Protractor to deal with.</p>

<h2 id="solution-how-to-add-pre-click-scrolling">Solution: How to add pre-click scrolling</h2>

<p>The solution I use for dealing with fixed nav bars is to define and use a helper function that invokes <code>element.scrollIntoView(false)</code>. This method is a native DOM element method <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element.scrollIntoView">that you can read about on MDN</a>. You can’t simply invoke it on a Protractor ElementFinder object. You can’t call <code>elemFinder.scrollIntoView()</code> the same way you call <code>elemFinder.click()</code>.</p>

<p>Also, you may have noticed that <code>false</code> is passed into <code>scrollIntoView</code>. This tells the browser to scroll as far as it can in an attempt to align the bottom of the target element with the bottom of the scroll area. In other words, <strong>this solution only solves issues with fixed nav bars at the <em>top</em> of the viewport.</strong> Using <code>element.scrollIntoView(false)</code> will fail if your web app uses a fixed nav bar at the <em>bottom</em> of the viewport.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Example B - Solution: Helper function to align element with bottom of viewport </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Inside a separate JS file that contains helper functions...</span>

<span class="comment">// Syntax Option 1</span>
<span class="keyword">function</span> <span class="function">scrollElemToBottomOfView</span>(elem) {
  elem.scrollIntoView(<span class="predefined-constant">false</span>);
}
module.exports.<span class="function">scrollElemFinderIntoView</span> = <span class="keyword">function</span>(elemFinder) {
  <span class="keyword">var</span> promise = browser.executeScript(scrollElemToBottomOfView, elemFinder);
  <span class="keyword">return</span> promise;
};

<span class="comment">// Syntax Option 2</span>
module.exports.<span class="function">scrollElemFinderIntoView</span> = <span class="keyword">function</span>(elemFinder) {
  <span class="keyword">var</span> promise = browser.executeScript(<span class="keyword">function</span>(elem) {
    elem.scrollIntoView(<span class="predefined-constant">false</span>);
  }, elemFinder);
  <span class="keyword">return</span> promise;
};

<span class="comment">// Syntax Option 3</span>
module.exports.<span class="function">scrollElemFinderIntoView</span> = <span class="keyword">function</span>(elemFinder) {
  <span class="keyword">var</span> promise = browser.executeScript(<span class="string"><span class="delimiter">'</span><span class="content">arguments[0].scrollIntoView(false)</span><span class="delimiter">'</span></span>, elemFinder);
  <span class="keyword">return</span> promise;
};
</pre></div>
</div>
 </figure></notextile></div>

<p>There are 3 syntax options above because I just wanted to present a few different coding styles. As you can probably tell, <code>browser.executeScript()</code> accepts a couple of parameters. The first one is the script, the second one is the script’s parameter. The script can either be a function (technically speaking, it’s a function reference) or a string representation of the script’s body. Syntax Option #3 was inspired by a Stack Overflow answer for a very similar situation (it was for WebDriver, but it was easy to translate to Protractor).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Example C - Using the Solution </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Somewhere inside test code...</span>
<span class="keyword">var</span> helpers = require(<span class="string"><span class="delimiter">'</span><span class="content">../path/to/helpers</span><span class="delimiter">'</span></span>);
helpers.scrollElemFinderIntoView(avatar);
avatar.click();
</pre></div>
</div>
 </figure></notextile></div>

<p>You may have noticed that the solution in <em>Example B</em> mentions promises, but the code in <em>Example C</em> does not use them. My understanding is that it’s not crucial to use every single promise that Protractor and WebDriverJS provide. For example, even though the <code>.click()</code> method returns a promise, you don’t see devs writing Protractor tests with <code>exampleButton.click().then(function() { ... });</code> all the time.</p>

<p>So why did I mention promises in <em>Example B</em>? Just to reinforce the fact that <code>browser.executeScript()</code> will return a promise. By storing the result in a variable called “promise”, it tells other devs what to expect. That said, I admit it may not be terribly valuable. Let me know your opinion on this or any other part of the solution presented here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dev Job Searching Tools Roundup Part 2: Readyforce, The Muse, The Sourcery, AngelList, VC job listings]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/08/14/dev-job-searching-tools-roundup-part-2/"/>
    <author>
      <name><![CDATA[@RebootJeff]]></name>
      
    </author>
    <updated>2014-08-14T18:49:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/08/14/dev-job-searching-tools-roundup-part-2</id>
    <content type="html"><![CDATA[<p><img src="http://RebootJeff.github.io/images/20140814/code_and_trees.jpg" alt="JavaScript and Palm Trees" /></p>

<p class="my-caption">If you find the right job, you can feast your eyes on sweet code <strong>and palm trees</strong>.</p>

<p>In <a href="http://RebootJeff.github.io/blog/2014/06/28/dev-job-search-tools-part-1">my previous post</a>, I described my experience using LinkedIn, Whitetruffle, Hired, and Dice. This time around, I’m going to cover a crop of sites that I used less extensively. Although they didn’t yield fruitful leads, they’re still pretty interesting to me, and with job searching, you <em>can’t not</em> explore more than a few avenues.</p>

<h1 id="job-sites-and-search-tools">Job Sites and Search Tools</h1>

<h2 id="readyforce">Readyforce</h2>
<ul>
  <li><strong>The gist:</strong> Job board for entry-level opportunities (mostly for recent college grads)</li>
  <li><strong>My experience:</strong> I only browsed Readyforce for a bit</li>
  <li><strong>My recommendation:</strong> Give it a shot, but keep expectations low if you’re not a recent college student.</li>
</ul>

<p>The <a href="http://www.readyforce.com/">Readyforce website</a> has undergone a big redesign since my job searching days. I was originally drawn to the site by its large selection of companies listing their open positions. However, the site is clearly marketed towards college grads, and the creators want job seekers to “connect” with employers through their own social(?) network.</p>

<p>When I visited the site a few days ago, it looked quite different. While it does look cooler nowadays, it also feels buggier. On top of that, there doesn’t seem to be a clear way to apply for jobs. Maybe I just don’t understand their model, or more likely: maybe I have to register an account first.</p>

<h2 id="the-muse">The Muse</h2>
<ul>
  <li><strong>The gist:</strong> Job listing featuring “rich media”</li>
  <li><strong>My experience:</strong> Browsing The Muse was so fun that I even signed up for the email newsletter.</li>
  <li><strong>My recommendation:</strong> Must visit! The site does a fantastic job of profiling each company. Their email newsletter does a pretty bland job of standing out from other self-help resources.</li>
</ul>

<p>I love what <a href="https://www.themuse.com/">The Muse</a> is doing. Muse peeps travel to employers’ offices to take professional photos and record video interviews with current employees to highlight the benefits of working for the employers. It’s great to see photos of cool offices, and although the videos have mediocre audio/visual quality, they still provide some decent insight. The end result is that The Muse feels like a portal for quick tours of hiring companies. I felt like I was getting a fun, behind-the-scenes look at a bunch of tech jobs rather than just browsing endless, cookie-cutter job descriptions like you do with most other job sites.</p>

<p>During my first few visits to their site, I was so enamored with The Muse that I signed up for their email newsletter. That’s right, I actually <em>wanted</em> their spam. Sadly, their emails are pretty lame. Each message uses a click-bait subject line like “This Genius Formula Can Tell You Your Dream Job”. Opening one of these emails just reveals a giant button to take you to their blog where the short articles don’t live up to the hype of their titles/headlines. By the way, the “genius formula” is <code>gifts + passions + values = your calling</code>. <em>Genius</em>.</p>

<h2 id="the-sourcery">The Sourcery</h2>
<ul>
  <li><strong>The gist:</strong> Recruiting firm that actually lists job opportunities on their site.</li>
  <li><strong>My experience:</strong> I talked to a couple of their recruiters, and I got minimal results.</li>
  <li><strong>My recommendation:</strong> I’m not a fan.</li>
</ul>

<p>You can find a lot of <a href="http://www.thesourcery.com/job_seekers">job postings on The Sourcery</a>. The companies that use The Sourcery for recruiting will often post on other job sites, but there will be a note at the bottom of the job description that mentions the requirement to apply via The Sourcery. After filling out a job application on The Sourcery, one of their recruiters will let you know whether or not your candidacy will be pursued.</p>

<p>For me, the problems come from the recruiters. They noticed I was a Hack Reactor <a href="http://RebootJeff.github.io/blog/2014/05/11/hackr-diary-weeks-11-12-and-beyond/">grad</a>, and they immediately labeled me as just another coding bootcamp grad –in a bad way. Although they were friendly, the recruiters implied that all coding bootcamp grads are the same, that they’re all “great” <em>junior-level</em> coders, and that they all can’t handle more than the average entry-level job. What’s really weird is that I would get emails from some recruiters telling me that my job application was rejected due to a lack of work experience, but then other Sourcery recruiters would contact me and tell me that they want to interview me for the exact same job. Maybe the recruiters reach out to rejected applicants if the pool of applicants is running low for a particular job.</p>

<p>Obviously, The Sourcery is not the only company that treats bootcamp grads as low-level programmers. This is why Hack Reactor <a href="http://sympatheticvibration.com/hack-reaction-week-8-no-recognition/">doesn’t want you to talk about them during interviews</a>. It’s also why Hack Reactor avoids calling itself a bootcamp. I’m getting off-topic, but the gist is: the bootcamp market is getting bigger, and the quality is very inconsistent. Consequently, the mediocre bootcamps are hurting the reputation for all bootcamps. The Sourcery’s expectations for bootcamp grads have already been adjusted downwards.</p>

<h2 id="angellist">AngelList</h2>
<ul>
  <li><strong>The gist:</strong> Networking in the startup bubble.</li>
  <li><strong>My experience:</strong> I hit the “I’m interested!” button several times without much luck.</li>
  <li><strong>My recommendation:</strong> Meh. It’s easy enough to use, but results will be hit-or-miss.</li>
</ul>

<p>In my last couple of weeks at <a href="http://RebootJeff.github.io/blog/categories/hackr-diary/">Hack Reactor</a>, I was instructed to make sure I had 3 online profiles ready to show off: LinkedIn, GitHub, and AngelList. The nice thing about <a href="http://angel.co">AngelList</a> is that you’re more likely to get in contact with an in-house recruiter. You don’t have to go through 3rd party recruiters. The bad thing about AngelList is that you might not get in contact with any one. When I say it’s “hit-or-miss”, what I mean is that I know some colleagues who were contacted via AngelList by several companies, and I know other colleagues who were getting zero interest. There was no apparent reason for the two distinct outcomes.</p>

<p>I was only contacted by a few companies via AngelList, and I wasn’t too interested in them. There are plenty of startups on the site, and if you’re hoping to join a tiny company, you should at least try to use AngelList.In my experience, although some companies reached out to me, none of the contacts yielded real conversations about interviewing. Also, there are a ton of companies that don’t distinguish themselves (i.e., there are a ton of startups in the advertising industry –and their profiles look too similar).</p>

<h2 id="vc-sites">VC Sites</h2>
<ul>
  <li><strong>The gist:</strong> Easy way to discover jobs (but doesn’t make applying to jobs any easier).</li>
  <li><strong>My experience:</strong> Lots of browsing filled me with hope.</li>
  <li><strong>My recommendation:</strong> Definitely worthwhile, but it’s going to require plenty of effort.</li>
</ul>

<p>Many moons ago, a <a href="https://github.com/Ken123777/megatwillions">ridiculous</a> fellow Hack Reactor grad pointed out that Venture Capital websites tend to have giant lists of job openings for their respective startups. I eventually validated his insight for myself by checking out job lists maintained by:</p>

<ul>
  <li><a href="http://www.sparkcapital.com/jobs/">Spark Capital</a></li>
  <li><a href="http://careers.accel.com/careers_home.php">Accel Partners</a></li>
  <li><a href="http://www.kpcb.com/careers">Kleiner Perkins</a></li>
</ul>

<p>You can find a huge number of jobs. It definitely helps keep your hopes up, knowing that if you fail a job interview, there are so many other jobs to go for. But the caveat to remember is that these job postings are just like any other: it’s hard to get noticed when applying for a job without a referral/connection. For smaller companies, you have a much better chance, but overall, you will have to apply to a lot of jobs just to hear back from a couple employers. Like with all job openings, I recommend putting in some extra effort by checking LinkedIn (or maybe other social networks like Twitter?) to see if you can contact the employer’s engineers, hiring managers, and/or in-house recruiters.</p>

<h1 id="in-other-news">In other news</h1>
<p>I’m exicted to start a new series of blog posts covering various tips, tricks, hacks, best practices, puzzles, challenges, questions, and mysteries (both solves and unsolved) that I’ve encountered at work. This “Learned On The Job” series will be arriving shortly!</p>

<p>That said, I haven’t finished writing about what I learned from the job search process. More job hunt-related content is still to come (including “WTF moments” :D), but I want to mix things up a bit too. After all, talking about software engineering is more fun than talking about searching for software engineering jobs, right?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dev Job Searching Tools Roundup Part 1: LinkedIn vs Whitetruffle vs Hired vs Dice]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/06/28/dev-job-search-tools-part-1/"/>
    <author>
      <name><![CDATA[@RebootJeff]]></name>
      
    </author>
    <updated>2014-06-28T11:14:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/06/28/dev-job-search-tools-part-1</id>
    <content type="html"><![CDATA[<p><img src="http://RebootJeff.github.io/images/20140628/unemployed_easter_bunny.jpg" alt="Unemployed Easter Bunny" /></p>

<p class="my-caption">&#8220;Will Decorate Eggs For Food&#8221; by <a href="http://gratisography.com/">Gratisography.com</a></p>

<p>Back in December of 2013, <a href="http://RebootJeff.github.io/blog/2014/05/11/hackr-diary-weeks-11-12-and-beyond/">I graduated from Hack Reactor</a>. After graduating, I started casually looking for a job, but due to the winter holidays, I didn’t start searching in earnest until early-to-mid January. In hindsight, perhaps I should’ve spent less time searching by myself and more time using Hack Reactor’s network/connections. That said, Hack Reactor encourages grads to look for jobs using all sorts of resources, and I benefited from <a href="http://RebootJeff.github.io/blog/2014/05/11/hackr-diary-weeks-11-12-and-beyond/#overtime-support">other forms of job search support</a> from the HackR staff.</p>

<p>This blog post covers a bunch of online resources I tried out myself. I ultimately found my current job through a recruiter, but that doesn’t mean that job sites felt useless to me. Therefore, I’m happy to share some opinions and experiences with you. Maybe you’ll have better results. At the very least, job sites showed me just how many awesome jobs are available, which kept my spirits up during my battles with job interview stress.</p>

<h1 id="job-sites-and-search-tools">Job Sites and Search Tools</h1>

<h2 id="whitetruffle">Whitetruffle</h2>
<ul>
  <li><strong>The gist:</strong> Employers and job seekers are matched using a system akin to online dating.</li>
  <li><strong>My experience:</strong> I only tried out <a href="http://www.whitetruffle.com/">Whitetruffle</a> for a few days. I revisisted sparingly.</li>
  <li><strong>My recommendation:</strong> Thumbs down. I see potential for the site, but for now, it’s lackluster.</li>
</ul>

<p>It feels a bit hollow. Much like with online dating, everyone makes a profile. Companies look at job seekers’ profiles, and job seekers like you can look at companies’ profiles. There are Like buttons to express interest. Mutual interest leads to a match. A match leads to an email notification. An email notification is <em>supposed to</em> lead to a conversation or some sort of initial phase of job candidacy…right?</p>

<p>You are also given notifications when an employer says they like your profile. The site will nag you to respond to the employer. However, in my experience, employers didn’t respond after I indicated mutual interest. Boooo! This made me wonder if employers just click the Like button on every profile (i.e., spamming) in hopes of stirring up job seeker interest.</p>

<h2 id="hired">Hired</h2>
<ul>
  <li><strong>The gist:</strong> “Auctions” occur regularly. During auctions, employers “bid” on you.</li>
  <li><strong>My experience:</strong> I went through a couple of auctions, which resulted in a few on-site interviews.</li>
  <li><strong>My recommendation:</strong> Thumbs up. I will explain some shortcomings, but overall, Hired is looking good.</li>
</ul>

<p><a href="http://www.hired.com/">Hired</a> is quite an ambitious setup. Job seekers must pass a few coding challenges to enter their pool of candidates, but when I joined, the site hadn’t yet implemented the challenges, so I was able to join after my profile was approved. Hired must have convinced employers that their candidates are top notch because employers were “bidding” salaries between $105,000 and $130,000 on me.</p>

<h3 id="misleading-but-worth-it">Misleading, but worth it?</h3>

<p>However, the auction format is quite misleading because it implies that you must accept the highest bid. It also implies that employers must hire you and offer you whatever they bid. This is not the case. There are no strict obligations. You must still pass whatever interview process employers have. Employers can still ultimately reject you. Employers can offer you whatever salary they want to offer you if you pass their interviews. In other words, Hired simply uses an auction format as a gimmick to get people excited to participate. It’s a trick, but I’m not even mad.</p>

<p>Why not? Because the pool of employers on Hired is pretty darn good. I got serious interest from 5+ companies. I got multiple on-site interviews. I got two offers. Plus, if you get a job, Hired will give you a $2,000 bonus. Awesome, right?</p>

<p>Now it’s not all rosy. Some companies that were interested in me seemed really boring. The companies that gave me offers both offered me salaries below their respective bids. In the end, I didn’t accept any job offers because I didn’t think I was going to fit well within the companies or something irked me about the company. I should also note that Hired “provides” you with an “advocate” –in less disguised terms, Hired assigns a recruiter to you. The recruiter will call you pretty often to help plan interviews and to eventually nudge you into accepting an offer. If this sounds potentially annoying to you, don’t fret because I’ve dealt with many recruiters, and my Hired recruiter was definitely one of the nicer ones (my only beef is that the recruiter would sometimes call me in the morning when I was sleeping in late).</p>

<p><strong>Caveat:</strong> some of my friends used Hired, and they didn’t have a great experience. For me, the only real bummer was when Hired stopped including me in auctions. I think I may have disappointed my “advocate” by not accepting job offers, and I may have reacted poorly to the recruiter’s nudging because at the time, I thought it was a bit too much. Little did I know that he was far less pushy than most recruiters.</p>

<h2 id="dice">Dice</h2>
<ul>
  <li><strong>The gist:</strong> Generic job board with a reputation for being stalked by recruiters.</li>
  <li><strong>My experience:</strong> I put my résumé on Dice and within 2 days, I was receiving tons of emails from 3rd party recruiters and head hunters.</li>
  <li><strong>My recommendation:</strong> Thumbs up. Dice is effective, but you will NOT enjoy the experience.</li>
</ul>

<p>Dice is an ugly site that is incredibly helpful in a painful way. First, I created a résumé specifically for Dice. What does this mean? Dice is for when you WANT spam from recruiters. Dice is for when you want to turbocharge your job search. <strong>Dice is for when you’re finally ready to destroy your fear of sharks, so you jump in a shark tank with craploads of bleeding tuna attached to your wetsuit.</strong> Do you get the picture, or must I throw more ridiculous warnings at your eyes? You must be mentally prepared to be inundated with contact from recruiters. They can sometimes be…unpleasant.</p>

<p>The onslaught of recruiter spam arrives from Dice because your profile is <em>public</em>. Your profile is rather pointless <em>except</em> for the résumé part of the profile. This means that your résumé has to be public, so it’s a good idea to upload a variant that excludes your contact info. Recruiters will check out your résumé and contact you via Dice messaging (which gets sent to your email). You then respond to recruiters, and work with them to get interviews and get hired. It’s a very clunky process. I could rant for several more paragraphs on the downsides of working with recruiters. However, it can be worth it. I’m very happy at my current job, which I earned through a recruiter.</p>

<h2 id="linkedin">LinkedIn</h2>
<ul>
  <li><strong>The gist:</strong> Networking, stalking, and head hunters.</li>
  <li><strong>My experience:</strong> Messaging through LinkedIn actually helped me. Also, I got the feeling that employers/recruiters viewed my LinkedIn more than they read my actual résumé.</li>
  <li><strong>My recommendation:</strong> Thumbs up. Linkedin is overrated, but it’s versitile and omnipresent.</li>
</ul>

<p>I didn’t get a ton of recruiters reaching out to me via LinkedIn. It can’t compete with Dice in that department, but at least with LinkedIn, you get contacted by in-house recruiters, not just 3rd party recruiters.</p>

<p>That said, after I got a job, I updated my LinkedIn profile to show my new gainful employment. Consequently, I’ve been contacted by recruiters at least a few times a week even though I’m not actively trying to get a job. In other words, the recruiter “spam” really only pours in if you’re currently employed (or experienced).</p>

<h3 id="other-uses">Other Uses</h3>

<p>Not to give false hope, but you may want to consider paying for a LinkedIn pro account. This lets you send a few messages to people you’re not connected with. I used this feature to contact executives and engineers at a few companies I was interested in. A couple of folks at one company actually replied to my messages, in which, I sincerely gushed about the company (and bragged about my 1337ness of course).</p>

<h3 id="quick-aside-unique-rsums-and-cool-profiles">Quick Aside: “Unique” résumés and cool profiles</h3>

<p>I consider my LinkedIn profile to be a way for me to show off a bit of my personal style. Some people try to be edgy or unique by formatting their résumés in a different way, but I’ve heard that’s actually a bad idea. Not to mention, a lot of people just don’t come up with good designs. Some do, but plenty don’t. Besides, <a href="http://RebootJeff.github.io/blog/2014/05/31/dev-job-search-tips-from-the-coding-interview-guru/#interviewers-process--employers-perspective">résumés need to be easily skimmed</a> by human eyes and easily scanned by software. After I got hired, I switched from being a job seeker to being an interviewer within my first week at the company. I saw over 10 resumes and sadly, the bland-looking ones were generally easier to skim. The uniquely formatted ones showed good intentions, but poor execution. You should think twice before you use bombastic fonts and lighter colors.</p>

<p>Oh! Back to my original point: I use my LinkedIn profile to demonstrate a bit of my personality through <em>writing style</em> –not through formatting (although I do add bullet points because their text organization powers are un-friggin’-paralleled). In fact, <strong>for pretty much any job site that required me to create a profile, I put in quite a bit of effort to write something actually interesting</strong>. It can be difficult to flex creative muscles for such tasks, but I believe it’s worth it to prevent your profile from being read with the same dry tone as every other candidates’ boring dossier. If you have 5+ years of perfectly relevant skills, then you can probably write a profile devoid of personality/creativity, and you’ll still stand out as a stellar candidate. Hooray for when that day arrives.</p>

<h1 id="stay-tuned">Stay Tuned</h1>

<p>Check back (somewhat) soon for more opinions and anecdotes on software developer job search sites. In part 2 of this Dev Job Searching Tools Roundup, I will ramble about Readyforce, The Muse, The Sourcery, AngelList, VC job listings, and more.</p>

<p>In future blog posts, I will cover other software engineering job hunting topics. I’m particularly excited to discuss my impressions from the other side of interview process. Also on my to-blog list: inheritance in JavaScript and lots of AngularJS best practices / app architecture patterns.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HackR Diary] [Dev Job Search] Tips from the Coding Interview Guru]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/05/31/dev-job-search-tips-from-the-coding-interview-guru/"/>
    <author>
      <name><![CDATA[@RebootJeff]]></name>
      
    </author>
    <updated>2014-05-31T20:37:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/05/31/dev-job-search-tips-from-the-coding-interview-guru</id>
    <content type="html"><![CDATA[<blockquote class="twitter-tweet" lang="en"><p>Author of Cracking the Coding Interview, <a href="https://twitter.com/gayle">@gayle</a> , talking to <a href="https://twitter.com/HackReactor">@hackreactor</a> <a href="http://t.co/aVbcohgqSG">pic.twitter.com/aVbcohgqSG</a></p>&mdash; Jeff Lee (@RebootJeff) <a href="https://twitter.com/RebootJeff/statuses/423949825587945472">January 16, 2014</a></blockquote>
<script async="" src="http://RebootJeff.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>In a <a href="http://RebootJeff.github.io/blog/2014/05/11/hackr-diary-weeks-11-12-and-beyond/#overtime-support">previous post</a>, I mentioned that attended a talk given by <a href="http://www.technologywoman.com">Gayle Laakmann McDowell</a> when she visited Hack Reactor. She’s the author of the famous <em>Cracking the Coding Interview</em>, which is a book that helps developers perform better when interviewed for a new job. Her text mostly focuses on algorithm challenges, but there’s also a lot of content that has more to do with coaching up interview candidates.</p>

<p>I really liked McDowell’s presentation at Hack Reactor. There were plenty of intriguing anecdotes, and of course, there was plenty of good advice. Plus, she included a lot of insight into the hiring process. Many of her stories and comments provided the Hack Reactor community with a “behind the scenes” sort of perspective.</p>

<p>Keep in mind that she worked for companies like Apple, Microsoft, and Google, so <strong>her advice comes from the perspective of giant companies</strong>. I doubt her tips apply equally to smaller employers. For example, McDowell heavily emphasized the importance to study certain algorithms (e.g., various sorting and searching algos) and data structures (e.g., trees, hashes, etc). In my experience mostly interviewing with smaller companies (fewer than 500 employees; as few as 5 employees), studying textbook algorithms and data structures wouldn’t have helped me as much as studying more web-specific skills.</p>

<p>That said, I still want to share some of the more interesting takeaways from McDowell’s talk.</p>

<h1 id="interviewers-process--employers-perspective">Interviewers’ Process / Employers’ Perspective</h1>

<ul>
  <li>Your performance is evaluated relative to other candidates (so you’re not just being judged based on fixed benchmarks).</li>
  <li>Resumes are barely read. You must make yours easy to skim within 15 seconds.</li>
  <li>Unless it’s a warm-up question, you are not expected to get the solution right away.</li>
  <li>Employers judge your GitHub and public repos based on coding style (<a href="https://github.com/airbnb/javascript">do you violate any major no-nos?</a>) and use of <a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/">design patterns</a>. They don’t have much time to judge app architecture.
    <ul>
      <li><em>My 2 Cents:</em> Perhaps this falls under “design patterns”, but I would like to add that there is time to judge your use of a framework. If the employer is familiar with the frameworks you used, they will notice when you fail to follow the framework’s more important conventions. For example, for AngularJS apps, I will notice if you put too much logic in the views, if you abuse $rootScope (which is akin to relying on global scope variables as a crutch), if you create bloated controllers, if you lack services/factories/providers, etc. I will be extra happy if I see you use multiple modules, if I see tests, if I see usage of Angular best practices, etc.</li>
    </ul>
  </li>
  <li>Only the interviewer knows how well you did in the interview. You may think you aced it. You may think you bombed it. <a href="http://www.technologywoman.com/2011/03/31/why-your-interview-performance-is-impossible-to-judge/">But you don’t really know</a>.</li>
</ul>

<blockquote><p>When I was at Google, I referred a number of candidates, and ran a little (informal) experiment. How well could people judge their performance?<br />After each candidate completed their interview, I’d ask them how they did. Then, I’d look up their actual performance. And guess what? There was no correlation. None. Zip. Zero. Zilch.</p><footer><strong>&#8211;Gayle L. McDowell</strong></footer></blockquote>

<h1 id="interview-coaching--advice">Interview Coaching / Advice</h1>

<ul>
  <li>When answering a behavioral/experience question, you should tell a story. Your story-telling should use the following format: Premise, Situation, Action, Result. The “premise” is a quick, 1-sentence intro like “One time, I had to do X for an app.” The “situation” is the context of your story. The “action” and “result” are pretty self-explanatory. I imagine Laackmann’s motivation for this advice is that interviewees usually leave out at least one of these four parts when discussing valuable past experience.</li>
  <li>For each major experience you include on your resume, you should be prepared to discuss what you liked, what you disliked, what was challenging, and how you solved difficult problems/bugs.</li>
  <li>Always follow up with interviewers afterwards. Send them thank-you emails and ask about next steps.</li>
</ul>

<h2 id="what-to-worry-about">What to Worry About</h2>

<ul>
  <li>Your conversational skills don’t need to be great because employers are desperate for technical skills.
    <ul>
      <li><em>My 2 Cents:</em> I think this is dangerous advice. It might apply to a giant company, but if you’re joining a smaller team, you need to be decent at chatting. Culture fit is also a bigger concern for smaller companies, and most company cultures include “must be decently articulate” as a core component.</li>
    </ul>
  </li>
  <li>Worry less about super advanced algorithms, but you should worry a lot about the common algorithms and data structures such as: hashes, trees (and common tree methods such as depth/breadth-first search), binary search, merge sort, and quick sort.
    <ul>
      <li><em>My 2 Cents:</em> I disagree. If you’re aiming for a back-end job, then maybe you need to be more of an algo+data structures expert. But if you’re aiming for a front-end or full-stack job, then there are more practical concerns that you will be quizzed on. I’m happy I know tree search methods, but this kind of knowledge only helped me in a few of many interviews I did during my job search. This topic of “advanced algorithms vs practical concerns” is commonly debated, but I have my reasons, which I hope to discuss in a future blog post. For the record, I’ve conducted interviews at my current job. I ask practical questions that most candidates struggle with.</li>
    </ul>
  </li>
  <li>You must know Big-O, recursion, and maybe even bit-wise.
    <ul>
      <li><em>My 2 Cents:</em> I disagree about the bit-wise stuff (although, I suppose it’s impressive if you can bust it out with ease).</li>
    </ul>
  </li>
</ul>

<h2 id="whiteboarding-tips">Whiteboarding Tips</h2>

<ul>
  <li>If you are asked a trivia question, and you don’t know the answer, consider reasoning the answer by imagining how things should work. For example, if asked a question about CSS, imagine you created CSS. How would you implement a given rule?
    <ul>
      <li><em>My 2 Cents:</em> This one’s iffy because a lot of trivia questions are meant to focus on unintuitive situations. A quick aside for a quick example: <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/margin_collapsing">margin collapsing</a>. If there are two sibling <code>&lt;div&gt;</code> elements, and they both have <code>margin: 10px;</code>, then how much space is between them? You’d expect there to be 20px of space between them, but instead, there is only 10px thanks to margin collapsing.</li>
    </ul>
  </li>
  <li>When solving an algorithm question, come up with some test cases (including edge cases!).</li>
  <li>Think out loud when trying to solve an algorithm question. Don’t just write code.
    <ul>
      <li><em>My 2 Cents:</em> As someone who has interviewed dev candidates, I can’t stress this enough.</li>
    </ul>
  </li>
  <li>When whiteboarding, be conscious of your handwriting, alignment, etc.</li>
  <li>It’s ok to…
    <ul>
      <li>start solving a problem via pseudocode before writing real code. Just let your interviewer(s) know your plan.</li>
      <li>write <code>TODO</code> comments in your code for important-but-tangential stuff like input validation</li>
      <li>create proper variable names at first and then switch to abbreviated versions</li>
    </ul>
  </li>
  <li>Use “breadth-first coding”: write your code to use helper functions that may not exist. Write the helper functions later as needed. Think of it like writing an outline before writing an essay so then other people can quickly get a grasp of your overall approach rather than waiting and awkwardly watching for several minutes while you write out everything.
    <ul>
      <li><em>My 2 Cents:</em> This sounds like a no-brainer, but you’d be surprised how many people don’t do this. To be fair, this is like writing modular code BEFORE refactoring.</li>
    </ul>
  </li>
  <li>Beware of common bugs you might make regardless of how awesome you are. Examples:
    <ul>
      <li>off-by-one errors</li>
      <li>bad comparison operators in if-statements, loops, and other conditionals</li>
      <li>math where you must perform a check before performing the operation to prevent edge cases from making your program explode. E.g., it might be good to perform a check before performing division so then you stop divide-by-zero errors.</li>
    </ul>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Sublime Text 2 Setup and Customization]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/05/15/my-sublime-text-2-setup-and-customization/"/>
    <author>
      <name><![CDATA[@RebootJeff]]></name>
      
    </author>
    <updated>2014-05-15T20:32:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/05/15/my-sublime-text-2-setup-and-customization</id>
    <content type="html"><![CDATA[<p><em>Updated on August 8, 2014.</em></p>

<p>I use Sublime Text 2 as my text editor for coding. I don’t use a fancy IDE like WebStorm, but I do plan on trying out WebStorm more at work. Actually, I should probably upgrade to ST3, but for now, I’m happy with ST2.</p>

<h1 id="config">Config</h1>

<p>However, ST2’s light weight comes at a cost: you probably need to configure some stuff before you’re really ready to roll. Here’s what I do when I first install ST2 on a machine.</p>

<h2 id="key-bindings">Key Bindings</h2>

<p>First, I change the keyboard shortcuts for cycling through open tabs. The default behavior is based on your usage history (most recently viewed tabs), but I prefer just cycling from left to right. There’s actually another key binding that can cycle tabs from left to right, but I prefer using <code>Ctrl+Tab</code>.Therefore, I edited my key bindings like so…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Preferences &gt; Key Bindings – User </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
{ <span class="key"><span class="delimiter">&quot;</span><span class="content">keys</span><span class="delimiter">&quot;</span></span>: [<span class="string"><span class="delimiter">&quot;</span><span class="content">ctrl+tab</span><span class="delimiter">&quot;</span></span>], <span class="key"><span class="delimiter">&quot;</span><span class="content">command</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">next_view</span><span class="delimiter">&quot;</span></span> },
{ <span class="key"><span class="delimiter">&quot;</span><span class="content">keys</span><span class="delimiter">&quot;</span></span>: [<span class="string"><span class="delimiter">&quot;</span><span class="content">ctrl+shift+tab</span><span class="delimiter">&quot;</span></span>], <span class="key"><span class="delimiter">&quot;</span><span class="content">command</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">prev_view</span><span class="delimiter">&quot;</span></span> },
</pre></div>
</div>
 </figure></notextile></div>

<h2 id="settings">Settings</h2>

<p>Next up, I make sure my whitespace is configured to my liking. I think most coders who lift hefty amounts of JavaScript go with indentation 2 spaces at a time, so that’s what I do. I prefer it because it takes up less space than a typical 4-space tab, which is critical when viewing code in split-screen mode. I also like having the option to manually change indentation with spaces if necessary for alignment purposes. Mixing spaces and tabs gets messy.</p>

<p>I also configure Sublime Text to automatically add a new line at the end of every file whenever I save. It won’t add a new line if one already exists at EOF. I personally never suffer from lack of new line at EOF, but <a href="http://stackoverflow.com/questions/729692/why-should-files-end-with-a-newline">some UNIX tools won’t work without them</a>, and I know lots of hardcore coders out there like using such tools. I don’t want to screw them over. With that said, allow me to present my ST2 settings…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Preferences &gt; Settings – User </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// The number of spaces a tab is considered equal to</span>
  <span class="string"><span class="delimiter">&quot;</span><span class="content">tab_size</span><span class="delimiter">&quot;</span></span>: <span class="integer">2</span>,

 <span class="comment">// Set to true to insert spaces when tab is pressed</span>
  <span class="key"><span class="delimiter">&quot;</span><span class="content">translate_tabs_to_spaces</span><span class="delimiter">&quot;</span></span>: <span class="predefined-constant">true</span>,

<span class="comment">// Set to true to ensure the last line of the file ends in a newline</span>
<span class="comment">// character when saving</span>
  <span class="key"><span class="delimiter">&quot;</span><span class="content">ensure_newline_at_eof_on_save</span><span class="delimiter">&quot;</span></span>: <span class="predefined-constant">true</span>,
</pre></div>
</div>
 </figure></notextile></div>

<h1 id="theme-ui-skin">Theme (UI Skin)</h1>

<p>I use the Nexus theme, which you can find here: <a href="https://github.com/EleazarCrusader/nexus-theme">https://github.com/EleazarCrusader/nexus-theme</a>. The readme file explains a bunch of different installation options, but I recommend installing via Package Manager. The readme also tells you how to activate the theme after installation.</p>

<p><img src="https://raw.githubusercontent.com/EleazarCrusader/nexus-theme/master/nexus-theme.png" alt="official Nexus theme screenshot" /></p>

<p class="my-caption">The orange and blue decorations on the tabs tell you if the file has been change since last save.</p>

<h1 id="packages">Packages</h1>

<p>Sublime Text doesn’t come with many bells and whistles. Instead you add them as packages. First, you must install the package manager by following <a href="https://sublime.wbond.net/installation#st2">these instructions</a>. After that, get ready to discover a giant pool of all the bells and whistles you could possibly want. If you need to adjust the settings for any of these packages, you can usually find good documentation from the readme files of their respective GitHub repos.</p>

<p>After you install Package Manager, you can access it by hitting <code>Ctrl+Shift+P</code> (or perhaps <code>Cmd+Shift+P</code> for Macs?) and then typing “package control” into the search box. The typeahead will reveal your various options, but you mostly be using “Package Control: Install Package”. There will be some load time necessary to provide you a list of available packages, but after it’s done, you can search for packages by name. Installation will similarly require some load time. Check the bottom-left of the ST2 window to see relevant status messages.</p>

<p>Here are the packages I installed:</p>

<h3 id="alignment">Alignment</h3>
<p>Prettify your code by aligning multiple lines of variable definitions and hash objects. For example…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Before and After using the Alignment package </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// this stuff...</span>
<span class="keyword">var</span> x = <span class="integer">123</span>;
<span class="keyword">var</span> foo = <span class="string"><span class="delimiter">'</span><span class="content">bar</span><span class="delimiter">'</span></span>;
<span class="keyword">var</span> exampleObj = {
  <span class="key">my</span>: x,
  <span class="key">name</span>: <span class="integer">99</span>,
  <span class="key">is</span>: <span class="string"><span class="delimiter">'</span><span class="content">Jeff</span><span class="delimiter">'</span></span>
};

<span class="comment">// would turn into this stuff...</span>
<span class="keyword">var</span> x          = <span class="integer">123</span>;
<span class="keyword">var</span> foo        = <span class="string"><span class="delimiter">'</span><span class="content">bar</span><span class="delimiter">'</span></span>;
<span class="keyword">var</span> exampleObj = {
  <span class="key">my</span>  : x,
  <span class="key">name</span>: <span class="integer">99</span>,
  <span class="key">is</span>  : <span class="string"><span class="delimiter">'</span><span class="content">Jeff</span><span class="delimiter">'</span></span>
};
</pre></div>
</div>
 </figure></notextile></div>

<p>This may look stupid to you, but I don’t use it all the time. The main place I like to use it is with multiple <code>var example = require('npm package name here');</code> statements at the top of a JS file. By the way, I had to edit the package settings to get alignment for object literals. I added the <code>":"</code> seen below…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Preferences &gt; Package Settings &gt; Alignment &gt; Settings – User </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
{
  <span class="comment">// The mid-line characters to align in a multi-line selection, changing</span>
  <span class="comment">// this to an empty array will disable mid-line alignment</span>
  <span class="key"><span class="delimiter">&quot;</span><span class="content">alignment_chars</span><span class="delimiter">&quot;</span></span>: [<span class="string"><span class="delimiter">&quot;</span><span class="content">=</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">:</span><span class="delimiter">&quot;</span></span>]
}
</pre></div>
</div>
 </figure></notextile></div>

<h3 id="gitgutter">GitGutter</h3>
<p>Add indicators in your gutter so then you can see which lines of code have been changed since the last git commit. See the left edge of this screenshot:
<img src="http://i.imgur.com/ur6FY.png" alt="GitGutter in action" /></p>

<h3 id="sublimelinter">SublimeLinter</h3>
<p>I prefer live linting over build-time linting. SublimeLinter supports a ton of languages, and I have it set to simply bring up an indicator in the gutter and some underscores to point to any issues it finds. It’s not too obtrusive.</p>

<h3 id="trailingspaces">TrailingSpaces</h3>
<p>Extraneous whitespace is bad. Trailing whitespace is worse. I use this package to highlight any trailing whitespace in bright pink. I bet I could set my linter to do this, but oh well.</p>

<h3 id="markdownediting">MarkdownEditing</h3>
<p>Who doesn’t love Markdown? It makes GitHub README files and wiki pages look great. It makes dev blogs look great. It makes writing dev-related text easy. Sometimes, I write rough drafts of blog posts within Google Docs or <a href="http://dillinger.io/">Dillinger</a>, which is a sweet online Markdown editor. In the end, I always complete my blog posts by writing Markdown within Sublime Text.</p>

<p>I recently found a sweet ST package to help edit Markdown files: MarkdownEditing. It completely transforms the look and syntax highlighting of your Markdown. Sadly, I use CodeRay for codeblocks rather than standard Markdown markup. So MarkdownEditing can’t beautify my codeblocks within Sublime Text, but <code>inline code snippets like this one</code> are highlighted in a very helpful way. You can see all the ways that the package alters your Markdown <a href="https://camo.githubusercontent.com/35a66d68a55666133ba7911fb0ea61277740680f/68747470733a2f2f7261772e6769746875622e636f6d2f5375626c696d65546578742d4d61726b646f776e2f4d61726b646f776e45646974696e672f6d61737465722f73637265656e73686f74732f6c696768742e706e67">here</a>. Keep in mind that there are a couple other themes available specifically for MarkdownEditing. I use the dark theme of course.</p>

<h2 id="syntax">Syntax</h2>

<p>You might also find it handy to install packages for specific languages. For example, I dabble with CSS pre-processors and templating languages. I’m currently checking out LESS for CSS and Jade for HTML, so I’ve installed syntax highlighters for them. The package names are simply “LESS” and “Jade”.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HackR Diary] Weeks 11-12: And Beyond!]]></title>
    <link href="http://RebootJeff.github.io/blog/2014/05/11/hackr-diary-weeks-11-12-and-beyond/"/>
    <author>
      <name><![CDATA[@RebootJeff]]></name>
      
    </author>
    <updated>2014-05-11T22:42:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2014/05/11/hackr-diary-weeks-11-12-and-beyond</id>
    <content type="html"><![CDATA[<p><img src="http://RebootJeff.github.io/images/20140511/flash_now_we_boogie.png" alt="Now We Boogie" /></p>

<p class="my-caption">The Flash suggests rhythmic celebration &#8211; Image by Yale Stewart of JL8 <a href="https://www.facebook.com/photo.php?fbid=252029451584354&amp;set=a.191314654322501.42323.126319720821995&amp;type=3&amp;theater">Comic</a></p>

<p>The events discussed in this blog post occurred in December 2013 and January 2014 because a <a href="http://RebootJeff.github.io/blog/2013/11/19/hackr-diary-my-apology/">blogging hiatus</a> caused a bit of a delay. Plus, I’ve just been lazy with blogging recently.</p>

<h1 id="recap-of-events">Recap of Events</h1>

<p>My “final” two weeks at Hack Reactor weren’t really final. As explained in a <a href="https://www.quora.com/Programming-Bootcamps/Has-anyone-had-a-bad-experience-at-a-programming-bootcamp/answer/Jeff-Lee-40">Quora post of mine</a>, I continued going to Hack Reactor for additional lectures and learning exercises AFTER graduation.</p>

<p>Weeks 11 and 12 were all about preparing for job hunting and prepping for hiring day by practicing presentations. These are definitely the least intense weeks of the program. Some students were motivated enough to start new projects. Some students (like me) spent some time to refactor code from our Hack Reactor projects from weeks 6-10. Throughout the final two weeks, we received a wide variety of lectures on how to find a job, on how to approach whiteboarding, and on a few different tech topics too. Most of these lectures were only an hour, and many of them didn’t have tightly associated classwork (which is unlike the first half of the program).</p>

<p>One thing I found odd was the emphasis that staff put on downplaying Hack Reactor when job hunting. I’m <a href="http://sympatheticvibration.com/hack-reaction-week-8-no-recognition/">not the only one</a> to feel funny about it. The reason is that you don’t want employers to frame their perspective of you within the confines of “recent student.” I can understand that, but I didn’t bother editing my blog to avoid “exposing” myself as a recent graduate of a training program.</p>

<p>Unfortunately, the final stages of the Hack Reactor curriculum <a href="https://www.quora.com/Programming-Bootcamps/Has-anyone-had-a-bad-experience-at-a-programming-bootcamp/answer/Jeff-Lee-40">ran into issues</a>. Fortunately, Hack Reactor managed to pull together the resources to compensate. I explain later in this blog post.</p>

<h2 id="pamela-fox-discusses-engineering-culture">Pamela Fox Discusses Engineering Culture</h2>

<p>One of my favorite guest speakers during my time at Hack Reactor was Pamela Fox. Pamela <a href="http://RebootJeff.github.io/blog/2013/10/16/hackr-diary-a-visit-from-pamela-fox-re-backbone/">already gave a talk</a> at Hack Reactor, but it was a more technical talk about <a href="http://backbone.js">Backbone</a>. This time around, she gave a talk about the culture of professional software engineering. It was a great presentation that discussed what commonalities and differences you can expect to see when comparing engineering teams. A lot of what she said ended up influencing the <a href="http://RebootJeff.github.io/blog/2014/01/09/questions-to-ask-dev-interviewers/">questions I ask employers</a> when searching for a job.</p>

<h2 id="consultant-surveys-the-students">Consultant Surveys the Students</h2>

<p>For the first time in Hack Reactor history, a consultant was brought in specifically to give a 2-day workshop on job search prep. The consultant, David Daniels, did all the usual stuff like resume review (which would make him the 5th person to review our resumes during the job search prep portion of Hack Reactor), but he also conducted exercises on networking and personality testing. Plus, he gave a lecture about what companies like Microsoft look at when evaluating candidates.</p>

<h3 id="networking-practice">Networking Practice</h3>

<p>“Tell me about yourself” is such a common opener for job interviews (especially in the phone screen stages), but it’s funny how hard it can be to come up with a coherent answer without any practice. Therefore, David had us all practice giving quick, autobiographical pitches that would not ony sound concise (no rambling!), but also provide all the relevant info that recruiters want to hear (what you’ve been working on, what specific skills you have, what you look for in a new job, etc).</p>

<p>Students were also instructed to practice giving “pitches” on why they want to work for company XYZ in response to the frequently asked question of “Why do you want to work here?” Admittedly, this is something I did not give much attention to after graduation, and I regret that. It’s definitely important to practice answering that question for all the different companies you apply to.</p>

<h3 id="strengths-finder-personality-test">Strengths Finder Personality Test</h3>

<p>The other major activity conducted by David was post-survey analysis. What survey? The <a href="http://strengths.gallup.com/110440/about-strengthsfinder-20.aspx">Strengths Finder</a> survey. It’s a personality test that focuses on your “strengths” in a way that is supposed to help you inspect your personality in a way that is relevant to professional/work life.</p>

<h4 id="my-results">My Results</h4>

<p>Here are my top 5 (paraphrased) strengths according to the test:</p>

<ul>
  <li><strong>Input:</strong> Craving to know more. “Input” folks like to collect and archive all kinds of info.</li>
  <li><strong>Analytical:</strong> Tendancy to search for reasons and causes. “Analytical” folks think about all the factors that might affect a situation.</li>
  <li><strong>Responsibility:</strong> Taking ownership psychological of what they say they will do. “Responsibility” folks are committed to stable values such as honesty and loyalty.</li>
  <li><strong>Restorative:</strong> Strong problem solving. “Restorative” folks figure out what is wrong and resolving it.</li>
  <li><strong>Intellection:</strong> Characterized by intellectual activity. “Intellection” folks are introspective and appreciate intellectual discussions.</li>
</ul>

<p>My results put me in the “typical” engineer group. Together, with the fellow students with similar strengths, we built a Google Spreadsheet to further analyze our results and find out who was most similar to whom. <strong>Damn. We <em>nerdy</em>.</strong></p>

<h4 id="mini-anti-personality-test-rant">Mini-Anti-Personality-Test-Rant</h4>

<p>I’m not a fan of personality tests. Any one who has taken an intro psych class knows that personality tests are often flawed by the wording of the questions, the limited options provided by multiple-choice formats, etc. On top of that, I don’t like the <em>effect</em> that personality tests have. There’s a lot of confirmation bias. Test takers tend to allow the results to define them as a self-fulfilling prophecy. When people learn of other people’s test results, they might end up pigeonholing each other. “Oh that test said you have a tendency to over-analyze situations? I should call you out on it whenever you offer criticism.” (Ok that last hypothetical example is a bit melodramatic, but it’s the type of crap that starts happening on conscious and subconscious levels)</p>

<p>Perhaps what I despise most is that personality tests can solidify self-perceptions <em>and stifle personal change</em> as a result. I believe people can change. They change all the time. This is not optimism. I believe people change for the better <em>and the worse</em> all the time. My point is that some fools take personality tests and believe the results always involve immutable properties. Such belief is more ridiculous than using programming jargon to discuss psychology concepts ;)</p>

<h2 id="graduation">Graduation</h2>

<p>There was booze, dancing, food, funny photos, and good times :D</p>

<h2 id="overtime-support">Overtime Support</h2>

<p>The day after graduation (which was in late December), my cohort returned for a follow-up. The follow-up included asking us not to reveal too many of Hack Reactor’s trade secrets, asking us for feedback about the course, and some extra heartfelt moments.</p>

<p>Then we parted ways. Some flew back home, never to return. Most of us went home for the winter holidays and returned in January for post-graduation job search help. This included mock interviews conducted by Hack Reactor staff (more specifically, <a href="http://www.linkedin.com/in/cameronboehmer">Cameron Boehmer</a>, an awesomely nice guy who created <a href="http://www.businessinsider.com/how-to-start-reading-at-nearly-1000-words-per-minute-today-2014-3">Squirt.io</a>). It also included practicing whiteboarding with peers, lots of mentoring, and a few additional lectures about stuff like user authentication and SEO.</p>

<h3 id="presentation-by-gayle-laakmann">Presentation by Gayle Laakmann</h3>

<p>The author of the mucho famous book, <em><a href="http://www.crackingthecodinginterview.com/">Cracking the Coding Interview</a></em>, gave a talk at Hack Reactor in January. She gave a ton of great advice. I will regurgitate much of it in a future blog post. For now, I just want to share the most interesting tidbit.</p>

<p>Gayle mentioned that you will suck at surmising your own interview success. Apparently, surveys have been conducted, and they reveal zero correlation between how well a candidate thinks they did versus how the candidate’s interviewer thinks they did. You may think you aced an interview, but you actually said something that’s a deal-breaker. Or you may think you bombed, but you actually did better than all the other candidates.</p>

<h2 id="hiring-day">Hiring Day</h2>

<p>Unique to my cohort, hiring day was hosted at Hack Reactor <em>after</em> graduation. We presented group projects in front of an audience of 15 or so companies. We then went into a mini-interview marathon akin to speed dating. Each Hack Reactor student got a chance to speak with about 7 or 8 companies based on preferences submitted to Hack Reactor staff beforehand. After the crazy “speed dating”, there was an open networking session (basically a happy hour). There was a lot of stress leading up to this day, but ya know what? It really wasn’t that bad.</p>

<p>I would say about 1/3 or 1/2 of my peers who participated actually got hired by the companies that showed up. For me, hiring day was just the beginning of a nearly-3-month-long search.</p>

<p>I should (re-)mention that about a third of my cohort didn’t actually participate in hiring day because they weren’t interested in starting a new job soon or they had joined Hack Reactor’s <a href="http://RebootJeff.github.io/blog/2014/03/30/hackr-diary-weeks-8-10-group-collaboration/#hacker-in-residence-program">Hacker-in-Residence program</a>.</p>

<h2 id="job-searching">Job Searching</h2>

<p>As you can imagine, I have a lot to talk about with regards to job searching. I’m excited to blog in detail about the ups and downs of the search. To cut to the chase, let me mention that I am fully employed. I’m a professional software engineer working on a web app that uses full-stack JavaScript. I don’t mean to brag (much), but the gig is pretty friggin’ sweet. Hack Reactor was a success!</p>

<h1 id="what-i-learned">What I Learned</h1>

<p>I learned so much about job hunting. I will go into details in a future blog post, but for now, I will outline some of what I picked up when searching for a job:</p>

<ul>
  <li>Job Sites
    <ul>
      <li>What different job sites to use</li>
      <li>How to use them <em>differently</em></li>
      <li>Which sites are more effective</li>
    </ul>
  </li>
  <li>Job interviews
    <ul>
      <li>What kinds of questions to ask</li>
      <li>What kinds of questions I will be asked</li>
      <li>How to communicate for an interview</li>
      <li>The role of good/back luck</li>
    </ul>
  </li>
  <li>Regrets
    <ul>
      <li>I should’ve used more Hack Reactor connections</li>
      <li>I should’ve taken more action sooner</li>
      <li>I should’ve actively shown more enthusiasm for each company I visited</li>
    </ul>
  </li>
  <li>General
    <ul>
      <li>What recruiters are really like</li>
      <li>How employers evaluate you <em>before</em> any interview</li>
    </ul>
  </li>
</ul>

<h1 id="whats-next-for-hack-reactor">What’s Next for Hack Reactor?</h1>

<p>Yesterday, I went to my cohort’s “3-month” reunion hosted by Hack Reactor. It’s actually been closer to 5 months since graduation, but whatever. At the reuinion, the founders of Hack Reactor did a Q&amp;A panel where they provided career advice and asked us how things were going at our new jobs. After the panel, we were told that Hack Reactor HQ is expanding. It’s already expanded once since my cohort ended by using a second floor of the building. That expansion increased the size of Hack Reactor cohorts. More staff have been hired too.</p>

<p>A third floor will be opening in June. It will mostly be used as offices for the newly augmented staff, but it will also have a new lounge area for alumni to use! Niiice. Wheels have been set in motion to organize alumni events and general activity. For example, there are plans to use the alumni network as an avenue for project collaboration (e.g., Feel like starting a random side project? Get ideas and possibly form a team with alumni).</p>
]]></content>
  </entry>
  
</feed>
