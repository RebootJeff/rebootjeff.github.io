<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[RebootJeff.com]]></title>
  <link href="http://RebootJeff.github.io/atom.xml" rel="self"/>
  <link href="http://RebootJeff.github.io/"/>
  <updated>2013-09-25T21:05:34-07:00</updated>
  <id>http://RebootJeff.github.io/</id>
  <author>
    <name><![CDATA[Jeff Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[HackR Diary] First Impressions]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/09/25/hackr-diary-first-impressions/"/>
    <updated>2013-09-25T21:23:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/09/25/hackr-diary-first-impressions</id>
    <content type="html"><![CDATA[<p>It’s the end of day #3. I don’t have much time to write, so this blog post is a smattering of thoughts from a fresh Hack Reactor student.</p>

<h1 id="initial-observations">Initial Observations</h1>

<h2 id="recap">Recap</h2>

<ul>
  <li>Day 1 and 2 are just review days covering topics and challenges covered by the pre-course work. Day 1 covered ettiquette, expectations, and recursion. Day 2 covered passing functions, a lot of JS fundamentals, and awesome advice for being successful (e.g., we talked about impostor syndrome, Hack Reactor’s motivations, some job-hunting advice, etc).</li>
  <li>Day 3 covered paired programming, object-oriented programming (OOP), and classes.</li>
</ul>

<h2 id="logistics">Logistics</h2>

<ul>
  <li>Week 1 is full of lectures. Each day is about 50% lectures, 50% coding.</li>
  <li>The first 6 weeks will have plenty of lectures and structured challenges. Then there is an interim week where you work on a project from home, which gives you the flexibility to travel, but the Hack Reactor staff will be offline (they basically get a 1-week vacation every 7 weeks). After the interim week is more time for your individual project, time for a group project, and time for job prep.</li>
</ul>

<h2 id="nuances">Nuances</h2>

<ul>
  <li>Lunch breaks and dinner breaks are often cut short due to lectures running long.</li>
  <li>Lectures run long due to people asking questions.</li>
  <li>All teachers advocate for students to ask questions. At Hack Reactor, the students ask a TON of questions because the class atmosphere is very comfortable.</li>
  <li>The students are really nice. Everyone’s excited to meet new people (even the quiet ones are clearly motivated to be social).</li>
  <li>I’ve heard stories of students of other bootcamps going out at night to hang out and have fun. I could be wrong, but so far it seems like there’s no time/energy left for going out at night.</li>
  <li>That said, students don’t stay here that late (so far). A lot of us leave by 9pm. I thought it’d be common to leave no earlier than 10pm, but there aren’t even that many students from the senior cohort by the time the clock strikes 9:20pm (which is the latest I’ve stayed). I have a feeling this will change in a few weeks (beause that will be crunch time for the senior cohort).</li>
  <li>Nothing’s perfect. Some equipment is broken, some chairs are shitty, some online resources are buggy, etc. None of these issues have been big issues.</li>
</ul>

<h1 id="nuggets-of-knowledge">Nuggets of Knowledge</h1>

<h2 id="life-nuggets">Life Nuggets</h2>

<h3 id="re-education">Re: <strong>Education</strong></h3>

<p>Passive learning is deceptively similar to true understanding. When you just observe a correct solution, it can give you the illusion that you learned more than you really did. For example, you might watch someone code up a good solution. When you walk away, you’ll think you understand everything necessary to solve the problem, but all you learned was some code without its meaning.</p>

<h3 id="re-starting-a-new-tech-career">Re: <strong>Starting a new tech career</strong></h3>

<p>Everyone thinks starting a new tech career with a tiny startup is really exciting. That might be true, but people tend to forget an important caveat: less structure could lead to a less efficient roadmap to individual success.</p>

<p>In less formal terms, you might work for a tiny startup on something you truly care about, but the startup could easily be too small or too young to provide an environment with superiors/peers that can help you develop your programming skills (or any job-related skills).</p>

<h2 id="javascript-nuggets">JavaScript Nuggets</h2>

<h3 id="null-vs-undefined">Null vs. Undefined</h3>

<p><code>null</code> is a keyword, but <code>undefined</code> is just an identifier. It’s like a variable that stores the value of <code>undefined</code>. This means you could write <code>undefined = 1;</code> and use it like any other variable, but things could get really messy if you do this.</p>

<h3 id="guard-operator">Guard operator</h3>

<p>Marcus, the primary instructor, warned us that some devs dislike the guard operator, but it’s really concise (which is cool to him). The guard operator is a logical-AND that “guards” a small bit of code the same way an <code>if</code> statement would guard it. For example:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">if</span>(goodStudent === <span class="predefined-constant">true</span>){
    candy++;
}

<span class="comment">// The above code could be refactored into the following:</span>
goodStudent &amp;&amp; candy++;
</pre></div>
</div>
</div>

<p>The following is a more practical example:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="comment">// Let's say you want to only call a function with an array if the array is NOT undefined (i.e., you want to guard against a scenario where you pass an undefined argument to a function).</span>
arg &amp;&amp; myFunction(arg);
</pre></div>
</div>
</div>

<h3 id="adding-undefined-might-yield-a-string">Adding undefined might yield a string</h3>

<p>When the <code>+</code> operator is used with <code>undefined</code>, then the <code>+</code> will act like a concatenation rather than addition. So if you try to add two variables, but you forgot to define one of them, you will get the following:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">var</span> num1 = <span class="integer">3</span>;
<span class="keyword">var</span> num2;    <span class="comment">// num2 is undefined</span>
<span class="keyword">var</span> sum = num1 + num2;    <span class="comment">// num2 has been declared, so no error is thrown</span>
console.log(num1 + num2);
<span class="comment">// prints '3undefined' (which is a string) to the console</span>
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HackR Diary] Pre-Course Anticipation]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/09/22/hackr-diary-pre-course-anticipation/"/>
    <updated>2013-09-22T11:51:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/09/22/hackr-diary-pre-course-anticipation</id>
    <content type="html"><![CDATA[<p><img src="http://RebootJeff.github.io/images/20130922/mytwittler.png" alt="Thumbnail of my twittler" /></p>

<p class="my-caption">Thumbnail of my Twitter clone assignment</p>

<p>Tomorrow is a huge day for me. Tomorrow is when <a href="http://RebootJeff.github.io/blog/2013/08/25/hack-reactor-is-my-future/">I start attending Hack Reactor</a>. I’m about to go from funemployment (going to bed at 4am; waking up at 12pm) to immersive student life (spending 80 hours/week on “campus”). I will write about my journey from amateur to trained pro in a series of blog posts called <a href="http://RebootJeff.github.io/blog/categories/hackr-diary/">HackR Diary</a>.</p>

<h1 id="mandatory-pre-course-work">Mandatory Pre-Course Work</h1>
<p>I enrolled in tomorrow’s Hack Reactor cohort back in late August. So I had a month to get through some pre-course “homework.” Some bits of the homework were harder than I expected (e.g., functional JavaScript challenges); some bits were easier than I expected (e.g., creation of simple Twitter-like front-end). The Twitter clone challenge was actually really fun for me because I like a challenge that actually includes a front-end.</p>

<p>There were times I was frustrated because I felt like I would be doing a lot better with just a little bit of help (e.g., recursion challenges), but I didn’t ask for much help, so I did a lot of solo struggling. However, one of the biggest bummers was going through the Backbone.js assignment. The assignment was to simply complete the <a href="http://www.codeschool.com/courses/anatomy-of-backbonejs">Code School Backbone.js tutorials</a> (two of them). <strong>Hack Reactor provided me with a Code School membership</strong>, and I was excited to take advantage of it, but that particular set of Code School tutorials isn’t very good at teaching. I felt like I didn’t get a good grip of the concepts (models/collections, views/rendering, routers).</p>

<p>I’m also a bit jaded when it comes to online tutorials. They generally do a lot of hand-holding to the point where you don’t retain much info, and if you get stuck on something, you’re a bit screwed. <strong>My low patience for tutorials is part of why I decided to enroll in a bootcamp, but there I was: doing tutorials as part of bootcamp homework!</strong> Don’t get me wrong, online tutorials are great resources in general, but I can only take so much. Eventually, I’d rather do some <a href="http://www.coderbyte.com/">Coderbyte</a> challenges instead of Code School challenges.</p>

<h1 id="pre-course-check-in-meeting">Pre-Course Check-In Meeting</h1>
<p>Hack Reactor makes incoming students meet with a Hacker-in-Residence (basically a Teaching Assitant?) to check up on the pre-course homework. I heard that some students have been weeded out of the bootcamp by the homework.</p>

<p>I met with an H-in-R named <a href="http://thishackergirl.wordpress.com/">Bianca</a>. My meeting was done in person, but these check-in meetings are sometimes conducted via webcam for those who haven’t arrived in San Francisco yet.</p>

<p>Before the meeting, I was pretty worried about how I stacked up compared to my peers. We’re not experts (hence the desire to enroll in a bootcamp), but we’re supposed to be much better than a typical beginner because <a href="http://RebootJeff.github.io/blog/2013/09/15/coding-bootcamp-research-admissions-part2/#hack-reactor-wants-to-kick-your-ass">the admissions process was not easy</a>. During the meeting, Bianca asked me how I felt about the three biggest parts of the pre-course homework: the functional JavaScript challenge involving test-driven development (TDD), the rudimentary Twitter front-end clone, and the JSON recursion challenges.</p>

<p>I anxiously watched as Bianca scrolled through my code. After discussing some questions I had, issues I struggled with, and solutions to my few bugs, I felt a lot better. Maybe I put too much pressure on myself, but I tend to worry a lot. <strong>I walked out of the conference room feeling very positive.</strong></p>

<h1 id="other-pre-course-work">Other Pre-Course Work</h1>
<p>Hack Reactor suggests completing more tutorials and reading some resources if students have some spare time before classes start. Suggested topics include Git, Node.js, CSS, Ruby, Ruby on Rails, and CoffeeScript.</p>

<p>I <a href="http://youtu.be/jM8KE_Fa6JI">studied Backbone.js</a> a bit more, I read about JavaScript <a href="http://www.codeproject.com/Articles/580165/JavaScript-Best-Practices">best</a> <a href="http://www.thinkful.com/learn/javascript-best-practices-1/">practices</a>, and I spent a lot of time doing more Code School tutorials. Some are better than others. I mostly looked at HTML/CSS stuff, which sounds easy, but I just wanted to make sure there weren’t too many gaps in my fundamental knowledge (<code>position</code> and <code>display</code> properties still slap me around sometimes).</p>

<p><strong>The <a href="http://www.codeschool.com/courses/fundamentals-of-design">Code School tutorial on the Fundamentals of Design</a> was pretty awesome</strong> actually. It’s the only tutorial that doesn’t require coding, but it imparted quite a few cool nuggets of knowledge about how to choose fonts, colors, and layouts. The layouts part wasn’t as insightful (I wish they had you actually implement a grid with some coding), but learning about typeface categories (e.g., humanist vs. transitional vs. modern) and what defines a good color scheme (e.g., 60 degrees of hue separation) was sweeeet. Hopefully I’ll get around to blogging about the basics of fonts and colors one day. It’s just some very simple stuff that can help a lot.</p>

<p>Overall, I didn’t do as much studying on my own as I should have. I suck at independent study. Bahumbug.</p>

<h1 id="im-so-friggin-nervous">I’m so friggin’ nervous!</h1>
<p>Although the pre-course check-in meeting left me feeling optimistic about my future success at Hack Reactor, I no longer feel quite so confident.</p>

<p>This past weekend, I got access to my cohort’s Google Group. I bet that Hack Reactor nearly forgot to add me to the group. I browsed the group forum, and I saw posts dating back from July. There were some posts in August about meeting up to get to know one another before our Hack Reactor course starts. Doh! I missed those opportunities!</p>

<p>There was also a thread of self-introductions. Only a handful of people introduced themselves, but damn! They sound impressive. They make me worry about how I’ll compare. What’s funny is that a lot of them are non-Asians who have lived in China. They can speak Mandarin way better than I can (i.e., I only know a few basic words). Hopefully I don’t get a lot of flak. I already get enough grief from my mom.</p>

<h1 id="my-plans-for-blogging">My plans for blogging</h1>
<p>Considering that I will be busier than I have ever been in my entire life(?), I probably won’t have much time for blogging, but I am determined to do a fair amount of blogging anyway!</p>

<p>I still have plenty of <a href="http://RebootJeff.github.io/blog/categories/bootcamp-research/">coding bootcamp research</a> to blog about, but I will give my HackR Diary a higher priority. I’ve set a goal to blog about my experience at Hack Reactor at least once per week. Each diary entry will include a quick recap of topics taught by HackR staff, observational knowledge nuggets I picked up myself, and my personal evaluation of myself and the bootcamp.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Google Analytics to Octopress blog on Github Pages]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/09/17/adding-google-analytics-to-octopress-blog-on-github-pages/"/>
    <updated>2013-09-17T13:22:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/09/17/adding-google-analytics-to-octopress-blog-on-github-pages</id>
    <content type="html"><![CDATA[<p>I wanted a way to count visitors for my blog. Easy enough, right? Just sign up for a free Google Analytics account, obtain a tracking ID from the account, and add the tracking ID to Octopress config file…right?</p>

<p>Wrong. Maybe I was doing something else incorrectly, but I didn’t get things working until I did <a href="http://stefanalfbo.github.io/blog/2013/04/17/octopress-google-analytics-github-pages/">what a guy named Stefan Alfbo wrote about</a>. I found his blog post via Google, which reminds me that my own blog’s Google-powered search doesn’t seem to work <strong>:(</strong>.</p>

<h2 id="problem-solved">Problem solved</h2>

<p>Here’s the trick for getting Google Analytics working on an Octopress blog hosted on Github: open up the <strong>source/_includes/google_analytics.html</strong> file and add…</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="comment">// add this line to the series of _gaq pushes already in the code</span>
_gaq.push([<span class="string"><span class="delimiter">'</span><span class="content">_setDomainName</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">github.io</span><span class="delimiter">'</span></span>]);
</pre></div>
</div>
</div>

<h2 id="questions-remain">Questions remain</h2>

<p>Alfbo recommends putting this new line of code in between the 2 existing <code>_gaq.push</code> statements. I’m not sure if the order of the <code>_gaq</code> array really matters, but I didn’t want to chance it, so I followed his recommendation. However, this left me wondering, “What is the <code>_gaq</code> array anyway? How is it used? And why does it need special attention to get it working with Github hosting?”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Coding Bootcamp Research] Admissions Processes: My Experiences (Part 2 of 2)]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/09/15/coding-bootcamp-research-admissions-part2/"/>
    <updated>2013-09-15T18:40:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/09/15/coding-bootcamp-research-admissions-part2</id>
    <content type="html"><![CDATA[<p><img src="http://RebootJeff.github.io/images/mycodingbootcamplogo_SP.png" alt="my coding bootcamp logo" /></p>

<p class="my-caption">Image Credits: original boot by MilitarySpot.com; ridiculous editing by me</p>

<p>In <a href="http://RebootJeff.github.io/blog/2013/09/10/coding-bootcamp-research-admissions-processes-applications-and-interviews-part-1/">part 1</a>, I gave tips on tackling the admissions processes for coding bootcamps. In this article, I shall recap my personal experiences (all taking place in August 2013) with App Academy, Coding Dojo, Dev Bootcamp, General Assembly, Hack Reactor, and RocketU …in alphabetical order? Sure, why not.</p>

<p>I won’t be covering answers to questions I asked at these interviews. I will cover some coding challenges and questions interviewers asked me. I will redact names. Originally, I wanted to include names, but for the sake of writing more openly, I decided to do some Find and Replace. If you apply to the bootcamps mentioned below, you’ll probably end up discovering a few of the names I’ve redacted anyway.</p>

<p>In a future <a href="http://RebootJeff.github.io/blog/categories/bootcamp-research/">Coding Bootcamp Research</a> blog post, I will provide all the info I gleaned from my interviews.</p>

<h1 id="app-academy-weeds-people-out-asap">App Academy weeds people out ASAP</h1>

<h2 id="format">Format</h2>

<ol>
  <li>45-minute online quiz in Ruby</li>
  <li>Another 45-minute online quiz in Ruby</li>
  <li>???</li>
</ol>

<h2 id="tldr">TL;DR</h2>

<p>BUZZKILL ALERT: I put a lot of time/effort into studying for their pre-interview Ruby quiz only to find out I had to do a 2nd quiz to get an interview. At that point, I was already interviewing with the other bootcamps, and I wasn’t motivated to contine with my App Academy admissions process. I really believe that interviews help show me how awesome a given bootcamp is –so <strong>2 pre-interview quizzes is like 2 obstacles to accessing a sales pitch I actually WANT.</strong></p>

<h2 id="full-recap">Full Recap</h2>

<p>I don’t remember if the response was immediate or took a few days to come my way, but soon after I submitted my App Academy application, I got an email telling me that I had to complete a 45-minute Ruby quiz before my admissions process could continue.</p>

<p>The quiz came with instructions to help me study/prepare. It did not come with a deadline, and there was no countdown timer even though I was told I only had 45 minutes to finish. The quiz just involved implementing some functions. I completed the challenges in about 20-30 minutes. I then spend another 15 minutes refactoring the code. I’m not too familiar with Ruby, but I did learn a lot of fun things about the language that makes it possible to write incredibly concise code. <strong>It was a great quiz (what a weird thing to say).</strong></p>

<p>A day after I submitted my quiz, I got an email telling me to do yet another quiz. At this point, I was not happy. Clearly, App Academy wants to really weed people out of their admissions. I understand that, but I very badly wanted to start the interview process sooner than later. A second quiz meant I’d have to spend more time studying Ruby when I was already busy with applying to other bootcamps and preparing for their interviews.</p>

<p>Maybe I should’ve given them a chance, but I was already less interested in App Academy because they didn’t seem to stand out in any major way other than their deferred payment plan. So I ended up abandoning my App Academy application, and I never got an interview with them.</p>

<p>Originally, I was intrigued by App Academy because it has a reputation for being tougher, putting it at the same high-caliber level as Hack Reactor. However, Hack Reactor seemed to put a lot more effort into community outreach, Quora posting, and just putting out more good vibes to get me excited about their program. In other words, <strong>App Academy’s marketing was over-shadowed by Hack Reactor’s marketing.</strong> I know that probably sounds really lame, but it’s the truth for my personal experience. As for the other bootcamps, they intrigued me by differentiating themselves in other ways.</p>

<h1 id="coding-dojo-keeps-it-simple">Coding Dojo keeps it simple</h1>

<h2 id="format-1">Format</h2>

<ol>
  <li>Non-technical interview</li>
  <li>Profit.</li>
  <li>???</li>
</ol>

<h2 id="tldr-1">TL;DR</h2>

<p>Dojo only put me through 1 non-technical interview. The interview gave me a positive impression of the bootcamp culture, but other factors (like a weird pre-interview video) left me raising an eyebrow.</p>

<h2 id="full-recap-1">Full Recap</h2>

<p>Before my interview with Coding Dojo, <strong>I was emailed a link to a private pre-interview video.</strong> I was excited about what it could possibly cover. I was disappointed to learn it was a FAQs video. I won’t reveal the link or password, but I will give a quick overview of the contents.</p>

<p>The video was a mediocre-quality recording of [CD person 1] talking to the camera. It was unedited, and just didn’t feel very professional. The whole time I watched him answer some FAQs, <strong>I kept wondering why the answers weren’t on the FAQ page of the Coding Dojo website.</strong> Why were these questions and answers password-protected?</p>

<p>Maybe it’s because [CD person 1] answered questions re: comparing Coding Dojo to its competitors by admitting that their hiring network was smaller than most. The only reassurance provided was along the lines of “don’t worry, we’re working on it.”</p>

<p>My first bootcamp interview was a phone call with [CD person 2], a Coding Dojo graduate-turned-teaching-assistant (aka Hacker-in-Residence or Developer-in-Residence). He was incredibly nice, and I dug his personality. He didn’t ask me any technical questions. He only asked me questions about myself to help set my expectations and gauge my motivation levels. He made me feel better about Coding Dojo, but I still figured the other bootcamps would probably do a better job of impressing me.</p>

<p>About 6 days after the interview, I was emailed an offer to enroll in Coding Dojo’s September cohort. After about a week, I declined their offer.</p>

<h1 id="dev-bootcamp----i-didnt-actually-apply">Dev Bootcamp – I didn’t actually apply</h1>

<p>I wanted to join a bootcamp ASAP. DBC’s website says they’re sold out for the next 6 months, so I didn’t bother applying to their program.</p>

<p>A few days ago, I met someone currently in Dev Bootcamp. She said that <strong>DBC is actually flexible in cohort placement.</strong> In fact, she was able to enter a sold out cohort.</p>

<h1 id="general-assembly-likes-htmlcss">General Assembly likes HTML/CSS</h1>

<h2 id="format-2">Format</h2>

<ol>
  <li>Non-technical interview</li>
  <li>Online tutorial about HTML/CSS and jQuery</li>
  <li>HTML/CSS challenge done at home (make an About Me webpage)</li>
  <li>Semi-technical interview about your About Me page</li>
</ol>

<h2 id="tldr-2">TL;DR</h2>

<p>I may have done a few things that screwed up my relationship with GA. Other than that, their admissions process was easy and fun.</p>

<h2 id="full-recap-2">Full Recap</h2>

<p>There’s some relevant backstory I need to tell you first. It all started BEFORE I cared about bootcamps. I enrolled in GA’s Front-End Web Development (FEWD) course. It’s 9 hours per class x 1 class per week x 10 weeks …for $3,000 (or maybe it was $3.5k; I don’t quite remember). I was really excited about the course, but I was worried it covered too many of the basics I already taught myself. I also worried that it wouldn’t really help me get a job due to lack of rigor.</p>

<p>Eventually, I became way more interested in bootcamps, which provide much more learning per dollar spent. Furthermore, the GA FEWD course was clearly aimed at weekend warriors. I’m unemployed, so I may as well invest in a more immersive experience.</p>

<p>Ok…enough excuses. The point is that I eventually canceled my enrollment a few days before the course started. This left a bad impression on GA. [GA person 1] was very patient with me, but I could tell he wasn’t happy with me. He agreed to begin my admissions process for GA’s bootcamp after a phone call (which turned out to be my first interview). The phone call was scheduled after I sent an email to GA asking why my bootcamp application hadn’t gotten a response. <em>Awkward.</em> [GA person 1] even told me he thinks I’d be better served by GA’s FEWD rather than GA’s WDI (Web Development Immersive, which is what they call their bootcamp). I didn’t express it, but I kind of took his comment as an insult. Please forgive my arrogance.</p>

<h3 id="back-to-the-actual-ga-bootcamp-admissions-process">Back to the actual GA bootcamp admissions process</h3>

<p>Via email, I was instructed to do a GA onine tutorial using their system called Dash. It was a pretty good-looking tutorial, but it covered really basic HTML/CSS + jQuery material. I was underwhelmed. I also had to create a simple About Me webpage (offline –no need to host it on the web). They made it clear that their expectations were low. They didn’t even expect me to use any jQuery even though their tutorial included it.</p>

<p>There’s a <a href="http://qr.ae/NvpkG">relevant Quora answer</a> that explains how <strong>GA’s admissions process is supposed to be less technical for the sake of preventing discrimination against applicants with less programming experience.</strong> This is similar to Coding Dojo’s view on applicants. This is the opposite of how App Academy and Hack Reactor approach applicants.</p>

<p>My second interview with GA was held at their offices in SF. I got there late. I was a sweaty mess because I took the BART to get into the city, but apparently GA’s offices are about 1 mile from the nearest BART station. I should’ve used the Caltrain. I’m a fool.</p>

<p>[GA person 1] greeted me as if I hadn’t ruined his life through my FEWD course cancellation, so things started off great. He sent me to an empty classroom where I could be interviewed by [GA person 2], a Developer-in-Residence. She asked me to talk about my About Me page. She asked me what challenges I faced, what resources I used for help, what I thought, etc.</p>

<p>Then she asked me general questions about my background, motivation, living arrangements + commute, etc. As I answered these typical questions, I was a bit befuddled by [GA person 2]. It wasn’t her line of questioning that made me think something was wrong, it was her communication style.</p>

<p>She didn’t give off that aura of excitement that other interviewers had. She also seemed taken aback by my conversational interview style as if she had expected me to take a more passive role. I think I talked too much? [insert joke about how I write blog posts that are too wordy]</p>

<p>I guess what I’m trying to say is that [GA person 2] made me think the interview was about me impressing GA rather than GA impressing me. As I’ve stated before, I believe all interviews are two-way streets.</p>

<p>Luckily, [GA person 3] took [GA person 2]’s place. Apparently she had been sent to interview me in his stead because he got caught up with work. This probably explains her demeanor, so I shouldn’t be so critical of her. She wasn’t prepared to conduct an interview.</p>

<p>[GA person 3] is also a Developer-in-Residence, but he carried himself with the confident vibes of a true pro. <strong>I liked this guy a lot. He made me feel excited about GA.</strong> I had to re-answer a lot of the same questions [GA person 2] asked me, but I got much more of a response out of [GA person 3] whereas [GA person 2] just sorted nodded dismissively as I spoke.</p>

<p>Unfortunately, our time was <strong>very</strong> limited (likely my fault for being late). There was barely any room for me to ask questions. [GA person 3] left and [GA person 1] re-entered. I asked [GA person 1] some questions from <a href="http://RebootJeff.github.io/blog/2013/09/10/coding-bootcamp-research-admissions-processes-applications-and-interviews-part-1/#interview-questions-for-you-to-ask">my giant list</a>, but at that point, I didn’t have my laptop in front of me, which sucked because I didn’t memorize many questions.</p>

<p>I left the building feeling very confident, but <strong>I never heard back from them.</strong> Not to sound too full of myself, but maybe they checked out my blog soon after I published <a href="http://RebootJeff.github.io/blog/2013/08/25/hack-reactor-is-my-future/">my announcement</a> about my enrollment at Hack Reactor.</p>

<h1 id="hack-reactor-wants-to-kick-your-ass">Hack Reactor wants to kick your ass!</h1>

<h2 id="format-3">Format</h2>

<ol>
  <li>Technical interview on basic JavaScript</li>
  <li>AJAX + jQuery challenge done at home</li>
  <li>Technical interview on Functional JavaScript (wtf!)</li>
</ol>

<h2 id="tldr-3">TL;DR</h2>

<p>Holy crap! The admissions process was so friggin’ tough!</p>

<h2 id="full-recap-3">Full Recap</h2>

<p>Before my first HackR interview, I was emailed a big list of things to study. The list included a lot of JavaScript’s built-in Array and String functions. Right off the bat, I felt a bit intimidated because although the material looked easy, the length of the pre-interview to-do list was exceptional.</p>

<p>I was interviewed in person by a Hacker-in-Residence named [HackR X] and a co-founder named [HackR staff]. Quick aside: HackR’s office space is really friggin’ warm so you should dress appropriately. I was sweating even before I got nervous.</p>

<p>[HackR X] asked me to do some live coding, which was so easy (basic looping, arrays, etc. in JS) that I got over-confident. I made some <em>really</em> careless mistakes (off-by-1 bug, overly-complicated algorithm, etc). Woops.</p>

<p>It’s all good though. [HackR staff] seemed intimidating at first by just focusing on his own laptop the whole time as if he was just there to casually judge me. However, [HackR staff] and [HackR X] eventually helped me edit my code.</p>

<p>Then, they asked me some questions. At the end of the interview, [HackR staff] did a quick recap, explaining that HackR has three objectives for first-round interviews:</p>

<ol>
  <li>Set my expectations - They wanted to make sure I knew that their program is no joke; it’s seriously intense</li>
  <li>Gauge my motivation/drive - They wanted to see how much self-teaching I’ve done</li>
  <li>Check my financial situation - They wanted to hear how I planned to pay the high tuition</li>
</ol>

<p>My first HackR interview was scheduled for 1 hour, but it lasted for at least 1.5 hours because I asked a crapload of questions. Before I interviewed with them, I was already extra excited about them because of some hype from <a href="http://kevinhamiltonsmith.com/hack-reactor-student-blogs/">student/alumni blogs</a> and <a href="http://www.quora.com/Hack-Reactor">their thoughtful responses to Quora questions</a>. So I put in extra effort into preparing my questions. [HackR staff] showed more interest in my candidacy-for-HackR-student when I started asking a lot of good questions that [HackR X] couldn’t answer.</p>

<p>Side note: [HackR staff] appeared surprised when I asked him about their refund policy. That’s ironic when you consider that <a href="http://hackreactor.com/developer-bootcamp-contracts">their own blog suggests you ask all bootcamps about refunds</a>.</p>

<p>After the first interview, I was told to complete a coding challenge at home before my second interview. I was full of confidence and empty of any commitments, so I scheduled my second interview to take place four days after my first interview. That didn’t leave me with much time, but [HackR staff] assured me that it would only take about 8 hours to complete.</p>

<h3 id="here-comes-the-pain">Here comes the pain</h3>

<p>It took me <em>at least</em> 8 hours. First, I was instructed to go through <a href="http://discover-devtools.codeschool.com/">Code School’s tutorial on Google Chrome dev tools</a>. Then, things got quirky. It’s hard to explain, but the challenge included some unique presentation. You’ll have to explore it yourself. However, I’m not entirely praising it because the instructions felt somewhat vague even after reading the additional tips they provided. I remember reading a student blog that claimed <strong>HackR purposefully makes certain instructions vague or certain code buggy just to keep you on your toes.</strong> Too bad I forgot the name of the blog, so I can’t give you a link.</p>

<p>Anyway, I had to teach myself basic AJAX. I already taught myself basic jQuery, which was also a required technology for the challenge. Unfortunately, I didn’t have a very good understanding of AJAX. I got my code to work, but one particular feature functioned only after some guesswork. I didn’t truly know how that feature worked. Moreover, I could sense my app was only about 98% correct. <strong>My brain told me this was ok, but my heart told me to go cry like the weakling that I am.</strong></p>

<p>I should mention that Hack Reactor lets you ask for their help via email. So I did. Twice. The first time, I got a response within a few hours. The second time, I never got a response. So if you’re trying to get through the coding challenge, keep in mind that <strong>you cannot rely on their email help.</strong> Doh.</p>

<p>My second-round interview was a somewhat disjointed experience. At first, I was interviewed by Hacker-in-Residence [HackR Y]. Once again, I felt like I had over-stepped my bounds. When [HackR Y] asked me about my experience with the AJAX + jQuery challenge, I interpreted the moment as an opportunity to ask him to help me get my code 100% correct. We spent more than a few minutes on it before he decided it was time to move on. As it turned out, the interview was supposed to focus on new challenges, not the AJAX + jQuery challenge. That was an unpleasant surprise (considering the effort I spent overcoming its difficulties).</p>

<p>I began programming solutions to the new challenges, which involved pretty simple functions. However, throughout the interview, [HackR Y] randomly left to deal with a phone call. He described it as “the most important phone call of my life” so the man was not investing much attention into my interview. I didn’t hold it against him because he assured me my interview time would be extended as necessary, and I didn’t have any other plans that day.</p>

<p>Eventually, [HackR Z], another Hacker-in-Residence took over [HackR Y]’s interviewing duties. <strong>This is where I got my ass beat.</strong> [HackR Z] asked me to rewrite the functions I had just completed in a way that reused one after the other. Not only that, but the rewrite challenge also required the functions to accept functions as parameters. I believe all of this can be described as Functional Programming, a computer science concept I had never heard of before.</p>

<p>I managed to make a function that called another function while passing it a function. Hot damn. Then I was told to go another layer deeper. <strong>My brain replied, “DO NOT WANT.”</strong> I was abandoned by my own brain. I guess most people would call it “panic” but it just felt like I couldn’t think. It could almost be described as ignorant bliss if not for the soul-crushing self-disappointment that accompanied it.</p>

<p>[HackR Z] was cool about it. He guided me through a solution, then he brought me to a <del>beautiful backyard under false pretenses to put me out of my misery</del> conference room so we could talk more. I proceeded to ask him a bunch of questions, some of which I had already asked [HackR X] to answer (I wanted to get multiple perspectives for certain questions). <strong>I got the impression that [HackR Z] was not just cool, he was superbly chill.</strong></p>

<p>Plus, but he did something particularly considerate. The first thing he did upon closing the conference room door behind us was give me immediate feedback. He straight-up told me not to worry about my brain fart during the live coding session because he felt the whole ordeal qualified as a great interview.</p>

<p>I don’t casually throw around the word “epic” like many of my peers do, but [HackR Z] basically <strong>excorcised the demon of self-doubt from my mind.</strong> And it felt epic. The feeling of doubt felt epic, and the feeling of that toxicity evaporating felt even more epic. Epic, epic, <em>EPIC!</em></p>

<h1 id="rocketu-is-new-and-eager">RocketU is new and eager</h1>

<h2 id="format-4">Format</h2>
<ol>
  <li>Non-technical interview</li>
  <li>Semi-technical interview on HTML/CSS + programming concepts</li>
</ol>

<h2 id="tldr-4">TL;DR</h2>

<p>RocketU really felt extra eager to me. The new bootcamp in town really wanted to impress. The technical questions were trickier than they should’ve been due to some miscommunication.</p>

<h2 id="full-recap-4">Full Recap</h2>

<p>The first interview was a typical test of personality fit. I spoke with [RU person 1] over the phone for the first interview. It was a typical non-technical conversation about my background and expectations. She tried to talk up RocketU’s awesomeness by describing how amazing the instructors are, but for whatever reason, I started worrying about RocketU’s lack of cool factor. Other bootcamps feel like families or clubs. RocketU was missing that vibe (more on this a few paragraphs below).</p>

<p>The second interview had some very specific quiz-like questions, but no live coding. I loved the second interviewer. [RU person 2] is an instructor with a solid background in teaching technical material. He asked me questions about HTML/CSS. He then asked me how I would solve a very particular problem. After he gave me some hints, I realized that I completely misunderstood the problem when he first described it.</p>

<p>I actually ended up misunderstanding him TWICE, so it took me awhile to solve the problem, which is sad because the problem really wasn’t that difficult. It was just a re-phrased version of a classic algorithm problem/concept.</p>

<p>I wish [RU person 2] could’ve showed me around RocketSpace a bit more because I never even got to see the part of the office the RocketU students use. I only got to check out a portion of the main RocketSpace floor.</p>

<p>However, the real bummer is that the whole experience felt a bit more corporate (for lack of a better word) and a bit less start-uppy than the other bootcamps. This is pretty ironic considering that RocketU is part of a startup accelerator called RocketSpace.</p>

<p>There are a few reasons for the “corporate” feel: The office space felt less fun and energetic (it’s less intimate; it’s less open due to the presence of many small dividers), RocketU doesn’t have its own blog filled with stories to get you pumped up, and RocketU is too young to have a promo video showing off its cool students. Plus, RocketU is run by people with experience in corporate training. So like I said earlier, the vibe I got from RocketU was very different from the vibe I got from its competitors.</p>

<p>That said, I wouldn’t be surprised if my impressions are just plain wrong because RocketU doesn’t have as much outreach/marketing and my interviews weren’t particularly long.</p>

<h1 id="for-the-record">For the record</h1>

<p>I did not send followup emails or thank you emails after my interviews. I know you’re supposed to do that for job interviews, but I wasn’t sure what to do for bootcamp interviews. Looking back on it, I wish I had at least sent thank you emails even though everything worked out in the end.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Not to Rescue a Baby Snake]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/09/13/how-not-to-rescue-a-baby-snake/"/>
    <updated>2013-09-13T10:04:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/09/13/how-not-to-rescue-a-baby-snake</id>
    <content type="html"><![CDATA[<p><img src="http://RebootJeff.github.io/images/20130913/gopher_snake_SP.jpg" alt="a gopher snake" /></p>

<p class="my-caption">A gopher snake - Image Credits: <a href="http://naturemappingfoundation.org/natmap/facts/gopher_snake_712.html">NatureMapping Animal Facts</a></p>

<h1 id="supah-random-time">Supah Random Time</h1>

<p>I recently moved a baby snake from my parking garage. I did it for two reasons: (1) Save the baby! (2) Play with a snake!</p>

<p>I then did something much more random. I wrote up a detailed email about the mini-adventure, and I sent it to my apartment’s building manager…because why not? Actually, there’s a good reason to not do this: it’s weird. Then again, I don’t do this type of writing very often, so it was fun. Below, you can find a relevant YouTube video. Below that, you can find an slightly edited version (<em>emphasis added</em>) of the email I sent to a stranger.</p>

<iframe width="300" height="169" src="http://RebootJeff.github.io//www.youtube-nocookie.com/embed/vcC9qrWZQoE" frameborder="0" allowfullscreen=""></iframe>

<h1 id="the-email">The Email</h1>

<p>Hi [Apartment Management],</p>

<p>If you are busy, don’t bother reading this email now. There is no urgency. This is just an “FYI” sort of thing.</p>

<p>I feel obligated to let you know that I removed a small snake from the parking garage at [address]. I threw it outside about 100 feet from the building.</p>

<p>I probably looked rather ridiculous during the whole situation. If someone alerts you to “suspicious activity” involving a short Asian man with glasses, black jacket, black gloves, brown backpack, red tennis racquet, and plain cardboard box…well…<strong>that was me.</strong></p>

<p>I was walking to my car on [floor number] when I noticed the baby snake. It looked harmless, but it was hanging out in the middle of the floor, where cars were likely to run over it. In fact, I was likely to run over it. This motivated me to move it.
[ Ed. note: wow that was a dry paragraph :( ]</p>

<p>I went back to my apartment to gather some supplies. I put on a pair of batting gloves. I then put on a pair of tactical gloves <em>over</em> the batting gloves (I was not a soldier or a cop; I was given tactical gloves when interning for the Navy; they wanted the interns to move some warehouse crap so they gave us nifty SWAT gloves to make us feel special).</p>

<p>I proceeded to “arm” myself with a tennis racquet and a small cardboard box. I felt quite safe…until I finally approached the snake and it started lashing out. <strong>I hope there are no security cameras that captured my fear on tape.</strong></p>

<p>I began circling the snake, and I was unpleasantly surprised that its eyes/head followed my feet rather than following the racquet or the cardboard box. It seemed to know that my tools were not vulnerable. It seemed to know my feet were actually part of my body. Luckily, it had no way of knowing my feet were armored by some decently tough boots.</p>

<p>After I ran around the snake a few times, it probably got dizzy because I was able to finally get behind it without its head tracking me. I slowly moved my box and racquet closer to him. With the type of bravery often associated with stupidity, I swatted the snake into the box. I was really quite proud of myself at that point.</p>

<p>But of course there was a plot twist. I walked over to the garage gate, but I guess its sensors are designed to discriminate against non-machines because it would not open for me the same way it opens for my car. I went back to my car, which was still resting in its parking spot. I hit the garage opener button inside the car. Nothing happened, so I considered driving my car closer to the garage gates.</p>

<p>That would require leaving my snake box on the floor or bringing the snake box into the car with me. I didn’t want to create a “suspicious package” situation, so option #1 was out of the question. I had no way of keeping the box shut other than holding it closed with my hands, so removing my hands from the box to drive seemed like a bad idea. That’s how option #2 vanished.</p>

<p>I ventured into a stairwell to find an exit. To my dismay, I ended up at an exit door that recommended I do not disturb it lest it disturb the rest of the building with an emergency alarm. Faced with the facts, I had to use the elevator to go down to the lobby. By the way, is there a way to get to the lobby via stairs? Maybe I missed a door.</p>

<p>I finally made it outside. I walked down the road to get to the spot where [street #1] and [street #2] split (or merge, depending on your mood). I walked about 10 feet up [a hill]. It was here that I decided to open the box and drop the snake. It was here that I probably looked the most suspicious <strong>(and awkward)</strong>. I made a motion similar to tossing water out of a bucket, but no snake was ejected from the box. I’m sure nearby drivers thought I was a lunatic had they looked my way as they drove by.</p>

<p>I slowly turned the box towards my face to look inside. I didn’t completely aim the top of the box at myself because I’m not crazy, but as I peered into the box at a very acute angle (or obtuse, depending on your mood), I realized the little animal was hiding under a flap. I felt a certain sense of guilt at that point, but the baby was likely going to face <strong>death by Goodyear</strong> if I hadn’t disturbed it.</p>

<p>I turned the box in a few different ways until I heard the snake fall from its hiding spot. Finally, I released the snake. It landed <strong>belly up</strong>, which made me feel like a jerk one last time.</p>

<p>For the record, I did some quick online research just now. It was likely a harmless gopher snake. I watched a YouTube video of a man letting a wild gopher snake bite him because apparently those babies have no teeth. How interesting.</p>

<p>Regards,</p>

<p>Jeff</p>

<h1 id="by-the-way">By the way</h1>

<h2 id="im-an-idiot">I’m an idiot.</h2>
<p>Sometimes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Coding Bootcamp Research] Admissions Processes: Applications and Interviews (Part 1 of 2)]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/09/10/coding-bootcamp-research-admissions-processes-applications-and-interviews-part-1/"/>
    <updated>2013-09-10T14:25:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/09/10/coding-bootcamp-research-admissions-processes-applications-and-interviews-part-1</id>
    <content type="html"><![CDATA[<p><img src="http://RebootJeff.github.io/images/mycodingbootcamplogo_SP.png" alt="my coding bootcamp logo" /></p>

<p class="my-caption">Image Credits: original boot by MilitarySpot.com; ridiculous editing by me</p>

<p>In this blog post, I’m going to cover some basic info and tips about applications and interviews for coding bootcamps. The bootcamps are selective programs. Read on if you’re curious about the application process and/or if you need some help preparing for interviews.</p>

<p>I can only provide my thoughts based on applying to Coding Dojo, Hack Reactor, RocketU, General Assemby, and App Academy. This blog post won’t be very bootcamp-specific, but in part 2 of 2, I will write detailed descriptions of my personal application and interview experiences.</p>

<h1 id="applications">Applications</h1>

<p>I filled out applications for RocketU and Coding Dojo first. Then I submitted applications for Hack Reactor, General Assembly, and App Academy. All applications consisted of web forms that were fairly straightforward, but some included interesting mini-essays. You can visit their respective websites and find the forms yourself, but I just want to mention that they aren’t too time-consuming.</p>

<p>On the other hand, I heard Dev Bootcamp’s application asks you to make a video of yourself so they can check out your personality. That might be a bit more time consuming. I didn’t bother applying to Dev Bootcamp because I wanted to enroll in a bootcamp program ASAP, but Dev Bootcamp’s application page shows their classes are sold out for the next 6 months!</p>

<h2 id="check-for-dates">Check for dates</h2>

<p>That reminds me: you should check to see what dates are available. Unfortunately, not all sites make it crystal clear. You might waste a lot of time reading a website only to find out later that their next open enrollment is too late for you.</p>

<h3 id="examples">Examples</h3>

<p>Note: These examples will probably be out-dated within a year or so. I imagine these companies will change their websites in due time.</p>

<p><a href="http://apply.devbootcamp.com/">Dev Bootcamp</a> - Their website doesn’t tell you they’re sold out for 6 months until you reach their application page, which you probably won’t do until you’ve read a lot of the other pages on their site.</p>

<p><a href="http://hackreactor.com/">Hack Reactor</a> - You have to scroll down about 33% of their single-page website before you find their start dates in a section entitled <em>The Program</em>. When I was just skimming, I missed these dates because my eyes were naturally drawn to the big jQuery, HTML5, etc. logos displayed just below the dates.</p>

<p><a href="http://codingdojo.co/">Coding Dojo</a> - They actually show their next start date right away. The first thing you read on their website is when, where, and how much does it cost. Good job, Dojo!</p>

<p><a href="https://generalassemb.ly/education/web-development-immersive/san-francisco">General Assembly</a> - A navigation bar at the top helps you skip to the <em>Schedule</em> list of available dates.</p>

<p><a href="http://rocket-space.com/rocketu/#bootcamp">RocketU</a> - The RocketU single-page website shows info about their non-bootcamp programs before getting to the bootcamp overview. They provide a navigation link to jump to the bootcamp info, and that’s when you’re greeted with next available start date and tuition cost. Not bad.</p>

<p><a href="http://www.appacademy.io/applications/new">App Academy</a> - Their navigation bar at the top of the page includes a link to dates. Their application allows you to appy to multiple dates. Nice touch! I don’t remember if any other applications have that ability.</p>

<h2 id="dont-fret-for-about-one-week">Don’t fret for about one week</h2>

<p>Also, you should relax after submitting an application because <strong>it took 2-7 days for the bootcamps to respond to my applications.</strong> I think some bootcamps provided automatic confirmation emails to let me know they got my application, but if I recall correctly, at least one bootcamp didn’t give me any sanity-fostering confirmation email.</p>

<p>If you don’t hear back from a bootcamp right away, keep in mind that they’re flooded with applications. I suggest waiting a week for them to respond to you before sending any followup emails.</p>

<h1 id="interviews">Interviews</h1>

<p>It’s important to consider that <strong>the interview process is as much an opportunity for them to wow you as it is a time for you to impress them.</strong> This is why I looked forward to each interview. I couldn’t wait to be wowed.</p>

<p>Before each interview, I reviewed my research on the particular bootcamp. I re-visited the bootcamp’s website and their blog to find nuggets of info worth asking them about. A lot of my questions probed for elaboration on something very specific to the bootcamp in question.</p>

<p>I had handful of standard questions about logistics, a few questions comparing them against their competitors, questions about curriculae, etc. You can find a list of questions at the end of this blog post. I didn’t ask all my prepared questions though. Sometimes, you need to evaluate how your interview conversations are flowing. I can’t say I flawlessly navigated these conversations, but I made conscious decisions to ask or not ask certain questions as the circumstances required.</p>

<h2 id="my-interviewing-advice">My interviewing advice</h2>

<ul>
  <li>Write down a ton of questions to ask for the final half/third of your interview. Asking a lot of questions makes you look AWESOME.
    <ul>
      <li>Ask questions that show you’re planning ahead (i.e., questions about logistics).</li>
      <li>Ask questions that show you’re serious (i.e., very specific/thoughtful questions).</li>
    </ul>
  </li>
  <li>Be prepared to answer basic questions that you already answered in your application forms. Examples:
    <ul>
      <li>Why do you want to do a bootcamp?</li>
      <li>How did you hear about us?</li>
      <li>Why do you want to learn to code?</li>
      <li>Can you handle the intensity of our program? Are you sure? Are you sure you’re sure?</li>
      <li>What prior programming experience do you have?</li>
    </ul>
  </li>
  <li>Do NOT panic during the technical portion of the interviews. If you don’t know something, just admit it. They don’t expect you to be an expert; they just want to see how much you know so far by asking progressively harder questions until they get to topics beyond your current experience.</li>
</ul>

<p>I panicked a bit in my Hack Reactor and RocketU interviews. In both cases, the interviewer was nice and helped me out. In both cases, I walked out with positive vibes.</p>

<h1 id="interview-questions-for-you-to-ask">Interview questions for YOU to ask</h1>

<p>You might think it’s hard to come up with interesting questions. I used to think that way, but then I stopped being cynical for 2 seconds so then my mind could do some brainstorming. Here are a few ideas for finding inspiration:</p>

<h2 id="question-topics">Question Topics</h2>

<ul>
  <li>Ask questions about something interesting mentioned on the bootcamp’s blog.</li>
  <li>Ask questions about specific topics covered by their curriculum.</li>
  <li>Find the interviewer’s LinkedIn profile or Twitter feed. You might find something cool to ask about.</li>
  <li>Ask for examples of something they brag about (e.g., if they brag about guest speakers or networking events ask more about those).</li>
  <li>Check out <a href="http://RebootJeff.github.io/blog/2013/09/04/coding-bootcamp-research-how-to-compare-bootcamps/">my list of factors</a>. Formulate questions about them.</li>
</ul>

<h2 id="examples-1">Examples</h2>

<h3 id="logistics">Logistics</h3>

<ul>
  <li>What are the exact start and end* dates for the cohort that starts in (INSERT MONTH HERE)?
    <ul>
      <li>*Note: Some bootcamps don’t provide end dates on their websites.</li>
      <li>Are there any holidays or breaks?</li>
    </ul>
  </li>
  <li>How many students and teachers are there?</li>
  <li>Does the bootcamp use a rolling cohort system?</li>
  <li>What are a typical day’s hours?
    <ul>
      <li>What percentage of students stay extra late?</li>
    </ul>
  </li>
  <li>What are your payment plans/options?
    <ul>
      <li>Do you have a refund policy?</li>
    </ul>
  </li>
  <li>Are there any special requirements?
    <ul>
      <li>Do I need a Mac/Linux?</li>
    </ul>
  </li>
</ul>

<h3 id="qualifications">Qualifications</h3>
<ul>
  <li>What kind of industry experience do the faculty have?</li>
  <li>How do you help students find jobs?</li>
  <li>How often do students find jobs after graduation?</li>
  <li>Do you have any hiring/company partners?</li>
  <li>Do you conduct any alumni outreach?
    <ul>
      <li>What kind of support do you provide to alumni?</li>
    </ul>
  </li>
  <li>What are the roles of the various faculty/staff members?
    <ul>
      <li>How much attention will I get from lead instructors versus part-time instructors versus junior assistants?</li>
    </ul>
  </li>
</ul>

<h3 id="technical">Technical</h3>
<ul>
  <li>Why did you choose to cover language X instead of language Y?</li>
  <li>How much of the curriculum features group projects versus individual projects versus quick assignments?</li>
</ul>

<h3 id="personalityculturevision">Personality/Culture/Vision</h3>
<ul>
  <li>What’s your favorite bootcamp-hosted event?
    <ul>
      <li>E.g., fire-side chat, guest speaker, social event, networking event, etc.</li>
    </ul>
  </li>
  <li>Why did you decide to work for the bootcamp?</li>
  <li>What is your favorite part (aka sprint) of the curriculum?</li>
  <li>What personality traits do your students have in common?
    <ul>
      <li>How much experience do your students have before starting the course?</li>
    </ul>
  </li>
  <li>Do you ever kick out students? (You may want to re-phrase this question to be less blunt)
    <ul>
      <li>How do you help struggling students?</li>
      <li>How do you ensure no students fall behind?</li>
    </ul>
  </li>
  <li>What are you doing to improve the bootcamp?
    <ul>
      <li>Are you hiring more teachers? Extra staff? Specialized staff (e.g., job hunting, alumni outreach, etc)?</li>
      <li>Are you expanding into other cities/locations?</li>
    </ul>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Coding Bootcamp Research] How to Compare Bootcamps]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/09/04/coding-bootcamp-research-how-to-compare-bootcamps/"/>
    <updated>2013-09-04T01:12:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/09/04/coding-bootcamp-research-how-to-compare-bootcamps</id>
    <content type="html"><![CDATA[<p><img src="http://RebootJeff.github.io/images/mycodingbootcamplogo_SP.png" alt="my coding bootcamp logo" /></p>

<p class="my-caption">Image Credits: original boot by MilitarySpot.com; ridiculous editing by me</p>

<h1 id="how-do-you-research-bootcamps">How do you research bootcamps?</h1>
<p>When you’re about to buy a car, you gather relevant data by going to KBB, Edmunds, and other sites. You read editorial reviews and watch video reviews. You can investigate possible issues by searching forums and recall databases.</p>

<p>When comparing cars, you consider fuel economy, reliability, style, and niceties. When comparing any big expenditure, you consider price and value. As for determining which aspects of a car really matter to you the most, it’s pretty intuitive to just think about your daily life.</p>

<p>So what do you do when “shopping” for a coding bootcamp? It’s a lot like shopping for cars, choosing a university, or making any other big decision: it’s time-consuming, it can be overwhelming, and there’s a ton of info for your consideration. However, it’s pretty easy to learn how to research cars and colleges thanks to the abundance of resources out there –but bootcamps are new, so it’s no surprise that learning how to research them seems mysterious. I’m going to help you.</p>

<p>When I started looking at coding bootcamps, I wasn’t sure what to do other than basic Googling and looking at compay websites. This blog post serves as an examination of how to examine bootcamps.</p>

<h1 id="what-factors-should-you-consider">What factors should you consider?</h1>
<p>I’m not claiming you need to thoroughly analyze every item in the list below. Just like any other big decision, you need to prioritize various factors based on your own preferences and needs.</p>

<ul>
  <li><strong>Curriculum:</strong> What will you learn? How will you learn it?
    <ul>
      <li><strong>Technical Skills:</strong>
  Which programming languages will be taught? What tools of the trade will you learn? What about Test Driven Development (TDD)? How many frameworks will you be exposed to?</li>
      <li><strong>Non-Tech Skills:</strong> Does the bootcamp cover job interview prep? Paired programming? Presentation experience? Resume workshops? Listening skills?</li>
      <li><strong>Intensity:</strong> How much time is devoted to various topics? How difficult is the bootcamp relative to other bootcamps?</li>
    </ul>
  </li>
  <li><strong>Faculty:</strong> How many teachers are employed by the bootcamp? What qualifies them to teach you and earn your money?</li>
  <li><strong>Job Placement:</strong> Other than teaching you relevant skills, how can a bootcamp help you get a job?
    <ul>
      <li><strong>Alumni Success:</strong> What kinds of careers have previous students earned after attending the bootcamp (employment rate)?</li>
      <li><strong>Network:</strong> How well-connected is the bootcamp? How many employers are in touch with the program?</li>
      <li><strong>Image:</strong> What kind of reputation does course have? Are employers familiar with the brand?</li>
      <li><strong>Initiatives:</strong> Does the bootcamp conduct a hiring day? How many employers show up to the hiring day? Does the bootcamp offer job interview training? Does the bootcamp have a staff member dedicated to helping you find a job?</li>
    </ul>
  </li>
  <li><strong>Schedule:</strong> Is there any flexibility in when you work? Are there any days off? Holidays?
    <ul>
      <li><strong>Typical Day:</strong> Students often dedicate more than 8 hours per day, but what about faculty? Will the long hours make it difficult to commute?</li>
      <li><strong>Start &amp; End Dates:</strong> Do you want to get started right away? If so, the start date surely matters. The end date might affect your ability to find a job ASAP. What if the end date is right around the end of employers’ fiscal years?</li>
    </ul>
  </li>
  <li><strong>Cost:</strong> How does a bootcamp’s price compare to its competitors? Why did they choose a particular price?
    <ul>
      <li><strong>Payment Plans:</strong> What’s the initial deposit? Do you pay in chunks, or all at once upfront? Can you defer payment until after a certain date?</li>
      <li><strong>Discounts:</strong> Are there any scholarships for minorities/females? Are there any refunds or partial refunds upon getting hired by their employer network?</li>
      <li><strong>Value:</strong> How much faculty time do you get for your money? Does the bootcamp provide computers? Does the bootcamp provide extra nice office space?</li>
    </ul>
  </li>
  <li><strong>Facilities:</strong> Speaking of office space, are the facilities boring, or do they add to the learning experience? Where are they located? Will the location involve high commute costs? How feasible is it to live in a hostel near the bootcamp?</li>
  <li><strong>Character:</strong> Does the bootcamp feel like a startup, a corporate player, or an amateur hour?
    <ul>
      <li><strong>Personalities:</strong> What’s the culture like? Do they welcome total noobs, or do they demand demonstrable coding experience?</li>
      <li><strong>Long-Term Vision:</strong> How does the bootcamp treat its alumni? Does the bootcamp plan on expanding its territory or re-investing in a single location?</li>
      <li><strong>Extras &amp; Perks:</strong> Free wifi? Duh. Free lunch? Oh nice. Organized outings? Sports? Happy hours? Guest lectures from industry experts?</li>
    </ul>
  </li>
</ul>

<h1 id="how-do-you-prioritize-factors">How do you prioritize factors?</h1>
<p>Not only do you want to know what factors to consider, but you also want to know how much you should care.</p>

<p>For factors like cost and location of facilities, it’s obvious how to think about their impacts relative to your life. For factors such as curriculum and long-term vision, it can be hard to figure out what matters to you. Should you look for a bootcamp that focuses on Ruby on Rails or Python with Django? Should you believe it when people say picking a programming language doesn’t matter?</p>

<p>Other factors might actually surprise you once you dig into them. For example, it might bother you to find out that some of your tuition/time is being spent on <a href="http://devbootcamp.com/2013/01/30/yoga-panic-pandas-3-things-you-might-not-expect-from-a-programming-bootcamp/">mandatory yoga</a> classes.</p>

<p>(For the record, I like the idea of mandatory yoga, but I’ve seen <a href="http://qr.ae/IL5Mc">negative reactions</a> to the fact.)</p>

<p>I will try to explore the question of “how do you prioritize factors?” in much greater detail in upcoming blog posts that focus on a few factors at a time.</p>

<h1 id="how-do-you-gather-info">How do you gather info?</h1>

<ul>
  <li><strong>Bootcamp website:</strong> Most bootcamp websites provide an overview of curriculum, tuition, etc. They don’t always do a good job of telling you the quality of their faculty or the typical day schedule.</li>
  <li><strong>Comparison sites:</strong> A pair of new websites have been created to help you compare bootcamps by providing spec sheets. They don’t do a good job of providing info on bootcamp culture. What’s nice is that they have reviews, but the reviews basically feel like Quora comments.
    <ul>
      <li><a href="http://bootcamps.in">bootcamps.in</a>: Has a few helpful articles and a big list of self-education resources.</li>
      <li><a href="http://bootcamper.io">bootcamper.io</a>: No articles, but cleaner aesthetics and better layout.</li>
    </ul>
  </li>
  <li><strong>Quora:</strong> This is a fantastic resource if you want to hear from both students and co-founders. I’ve seen a lot of posts by founders of Dev Bootcamp, RocketU, Hack Reactor, and a few non-San Francisco bootcamps. Some posts feel like advertisements, but some feel like authentic, honest nuggets of insight.</li>
  <li><strong>Student blogs:</strong> There are a lot of blogs out there by current and former students. They often cover curriculum details. They sometimes talk about bootcamp culture. It’s nice to read success stories, but you might also find tales of unfulfilled expectations.</li>
  <li><strong>YouTube and Vimeo:</strong> Searching for videos can help you find out more about a bootcamp’s facilities, student personalities, etc.</li>
  <li><strong>Admissions interviews:</strong> These are going to be your best chance to get your questions answered about typical day schedule, payment options, job placement, etc. Just keep in mind that the answers are biased.</li>
</ul>

<p>You can also find press coverage of bootcamps, but I’ve found that they generally fail to give you much insight. Most articles are just explaining what a coding bootcamp is. Some press coverage involves video interviews and whatnot. Those are worth watching because even though they’re edited fluff pieces, they still give a glimpse into personalities and facilities.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mini-Review of CheckiO]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/09/02/mini-review-of-checkio/"/>
    <updated>2013-09-02T13:12:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/09/02/mini-review-of-checkio</id>
    <content type="html"><![CDATA[<h1 id="overview">Overview</h1>

<p><a href="http://www.checkio.org/">CheckiO</a> is a website that aims to teach programming by providing an online gaming world with some social features heavily emphasized. CheckiO is meant for beginners and experts alike, but all coding challenges must be completed in Python.</p>

<p>The creators have quite a bit of hype behind them. They have received hundreds of thousands of dollars in funding. They have cultivated a thriving community of users. So yeah, my interest was piqued.</p>

<iframe width="300" height="169" src="http://RebootJeff.github.io//www.youtube-nocookie.com/embed/kWoW6RgH04g" frameborder="0" allowfullscreen=""></iframe>

<p>Side note: The site doesn’t seem to use secure HTTPS. It lets you log in with your other social media and developer community accounts (Facebook, Twitter, WordPress, GitHub, Stack Exchange, etc) so does that mean it’s safer to log in with a Twitter account rather than with a native CheckiO account?</p>

<h2 id="disclaimer">Disclaimer</h2>

<p>I did not play with CheckiO for more than a few hours, so that’s why I call this blog post a mini-review.</p>

<p>I think giving it a couple of hours is enough to pass judgement considering that most users will probably give up or continue based on their initial 10 minutes on the site. But my point is that it’s possible that CheckiO is a much deeper, richer website if you’re patient enough to explore it.</p>

<h1 id="what-i-thought">What I Thought</h1>

<p>It looks like the CheckiO community is quite strong, but the site is designed to attract users with a visual wow factor that is misleading. The visuals don’t really tie into the actual coding experience very well. It reminds me of when I first tried Neopets. I was disappointed to find that interaction with the pets was limited to static interaction rather than real-time, animated interactions.</p>

<p>Although the visuals of the CheckiO world seem to be geared towards attracting a younger crowd, that potential user base will be deterred by the detachment of said world. Try as they might, the creators of CheckiO fail to make the world, the backstory, the characters, etc. feel relevant when facing a coding challenge. It’s kind of like how some action movies and video games have plots that barely exist because the creators focused more on the action than the story. I get the sense that the creators of CheckiO are actually trying hard to make their story feel relevant, but it’s just not working for me.</p>

<p>In other words, CheckiO wants to prevent users from thinking it’s just another site full of coding challenges by showering the experience with cool graphics and a backstory. They want you to think it’s an edutainment experience rather than a purely academic one. They want you to think CheckiO is a game rather than a series of assignment akin to homework, but it just doesn’t feel like a video game.</p>

<p>The bulk of the experience is not something that could be described as “gameplay.” The in-browser IDE screams “boring” when compared to the home screen presented after logging in. This is a big bummer because everything you see leading up to a coding challenge makes you think you’re about to see something really cool and interactive. It actually makes me think I’m about to see a mini-game. Instead, you end up setting your eyes on a very unappealing IDE.</p>

<p>Despite its attempts to the contrary, CheckiO is just another site full of coding challenges. The challenges are fun for people who already enjoy programming, but the site just doesn’t live up to its potential to reach out to a new, bigger, untapped audience. The user experience really needs to be remade to properly engage users quickly. Instead, it leaves you a bit confused because it looks like a site full of features and gamification, but you can’t quite figure out how to enjoy the benefits.</p>

<p>Given the current success earned by CheckiO, I have a feeling more patient yields more rewards when using the site, but I still have a hard time imagining that “coding on CheckiO” could ever be described as “playing CheckiO.” I feel bad to give CheckiO a thumbs down because they’re the type of underdog with the type of good intentions that I want to support.</p>

<h2 id="woo">Woo!</h2>
<ul>
  <li>Thriving international community</li>
  <li>Fun coding challenges</li>
</ul>

<h2 id="boo">Boo!</h2>
<ul>
  <li>Long load times</li>
  <li>Tangled navigation</li>
  <li>Omg bubbly/glassy UI is so 2009 duh</li>
  <li>Solutions not displayed for first few challenges (even after you pass them)</li>
  <li>The weird capitalization in the brand name “CheckiO” bothers me :p</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack Reactor is my future]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/08/25/hack-reactor-is-my-future/"/>
    <updated>2013-08-25T15:58:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/08/25/hack-reactor-is-my-future</id>
    <content type="html"><![CDATA[<p><img src="http://RebootJeff.github.io/images/hackreactorlogo_SP.png" alt="Hack Reactor logo" /></p>

<p class="my-caption">Image Credits:  <a href="https://hackreactor.eventbrite.com/">Hack Reactor</a></p>

<p>I have enrolled in the September 23, 2013 cohort of <a href="http://hackreactor.com">Hack Reactor</a> (aka HackR), which is a 12-week coding bootcamp (or “academy” as they say) located in downtown San Francisco. I will pay them thousands of dollars so I can spend about 72-80 hours/week training, learning, and exploring –all in an attempt to gain the skills of a software developer (with a focus on web tech).</p>

<h1 id="hold-up-whats-a-coding-bootcamp">Hold up. What’s a coding bootcamp?</h1>
<p>Coding bootcamps are training courses that teach students the fundamentals needed to become immediately employable in some field of programming (generally web development, but some bootcamps focus on smartphone apps). Most bootcamps require full-time commitment (you must quit your job) and are pretty intense. Students generally “work” for more than 40 hours per week.</p>

<p>I put “work” in quotes because it in this case, I’m using the word to cover many different things that happen in a typical day at a bootcamp. Students listen to lectures by faculty and guest speakers. Students program in pairs. Students study and complete assignments. Most importantly, students get a ton of hands-on learning experience. Bootcamp curriculae typically involve projects that help students establish a portfolio of apps.</p>

<p>Bootcamps are a great option for people who want to switch from a non-computer science career to a programming-heavy career. That said, there will be some CS grads in some bootcamps because college often neglects to teach relevant hard skills like how to use git.</p>

<p>Coding bootcamps are also called programming bootcamps, developer/dev bootcamps, etc. The term “bootcamp” is sometimes replaced with “immersive course” or just “immersive.”</p>

<p>Check out this video to get a sense of the Hack Reactor vibe:</p>

<iframe width="300" height="169" src="http://RebootJeff.github.io//www.youtube.com/embed/ko9bXImNirE" frameborder="0" allowfullscreen=""></iframe>

<h1 id="why-pick-hack-reactor">Why pick Hack Reactor?</h1>
<p>In the coming days and weeks, I am going to extensively blog about my experience researching different bootcamps in a series unsurprisingly entitled <a href="http://RebootJeff.github.io/blog/categories/bootcamp-research/">Coding Bootcamp Research</a>. The series will cover all the ins and outs of how I examined my options, the admissions processes, and my decision to choose HackR over its competitors.</p>

<p>To give you the gist of it, I chose HackR because it seems to produce the smartest bootcamp “grads” through a combination of high quality faculty/curriculum and lots of time. What I mean by “lots of time” is that faculty are on the clock from 9am-8pm x 6 days/week instead of the typical 9am-6pm x 5 days/week found at other bootcamps.</p>

<p>The claim that HackR has the best grads is backed up by…more claims. They claim that 100% of their grads find a developer job within 3 months after graduation. They claim that the average starting salary of their alumni is somewhere around $100,000 (I don’t remember the exact dollar amount because the raw amount matters less than how high it ranks). No other bootcamps claim to have such high levels of success.</p>

<p>Why should I believe Hack Reactor? Because I trust them. And I would normally litter such claims in my blog with relevant links, but the previous few paragraphs lack links because I will simply discuss these things in much greater detail in future blog posts.</p>

<p>I have a lot to say regarding HackR’s pros and cons. I have a lot to say about the pros and cons of App Academy, Coding Dojo, General Assembly, Dev Bootcamp, and the brand new RocketU as well. So stay tuned.</p>

<h1 id="so-what-now">So… what now?</h1>
<p>I have about a month of funemployment left before HackR dominates my life. During that time, I have to deal with financial concerns, HackR introductory homework, and my own personal goals.</p>

<h2 id="money-money-money-moneyey">Money, money, money (moneyey!)</h2>
<p>This is about to get a bit personal, so prepare thyself.</p>

<p>I need to deal with tuition. $2,000 down. $15,780 to go. In the word of the great philosopher, Bart Simpson: “Eep.” Luckily, my mom has offered to cover my tuition. At first, I was reluctant to accept. After all, I have the money…sort of (most of my money is in stocks). I wouldn’t have much left over if I paid tuition myself, but the real reason I hesitated to accept my mom’s generosity was based on principle.</p>

<p>I like being independent in many ways. Financial independence is one of those ways.</p>

<p>I often question what my mom thinks rather than just accepting her ideas at face value. I changed my mind about her offer by using a thought process I use whenever I encounter this questioning that routinely visits my mind. The process is simple. I ask myself, <strong>“How would I feel if I were the parent?”</strong> Obviously, I easily consider what happens when I’m the child. So when I consider the parent perspective, I can imagine being a parent considering the child perspective too.</p>

<p>But let’s not get too cyclical/meta because I was telling a story that actually has an ending.</p>

<p>As I thought about things from the view of my hypothetical, futuristic, child-rearing mind, I realized that if I were in my mom’s shoes, I would very much want my son to accept my money. The reason? Principle.</p>

<blockquote>
  <p>OMG @RebootJeff just paradoxed himself #WTF #ICallBS #hypocrisy</p>
</blockquote>

<p>Shut up and listen. You can posit that I’m merely rationlizing a money-grubbing stance, and I know that’s what it looks like, but I hold myself obligated to meet the same standards and expectations when I’m finally a parent. In this case, the expectation I’m talking about is the responsibility (and deep desire) to help my child <del>become a Neil deGrasse Tyson badass</del> get really awesome education.</p>

<p>Not to mention, my family has that traditional Asian risk-aversion baked into its collective mind. However, as my mom pointed out, pursuing fantastic educational opportunities shouldn’t be considered a (financial) risk to avoid if the parent can help out.</p>

<h2 id="the-curriculum-begins-now">The curriculum begins now</h2>
<p>There are a few tasks to accomplish prior to the first day of class other than making HackR rich(er). The bootcamp’s pre-course work requires about 90 hours of dedication (about 50 hours mandatory + about 40 hours optional). I’ve been instructed to…</p>

<ol>
  <li>
    <p>Complete a lot of <a href="http://codeschool.com">Code School</a> tutorials (which is a bit of a bummer because I’m tired of online tutorials).</p>
  </li>
  <li>
    <p>Learn more JavaScript through some TDD challenges using Jasmine and Mocha (I don’t know what these are if they’re not hot beverages).</p>
  </li>
  <li>
    <p>Learn about git via various videos and tutorials (which should be easy because I already know some git).</p>
  </li>
  <li>
    <p>Build a basic Twitter clone (which sounds so difficult that I can’t wait to do it –what an odd feeling).</p>
  </li>
  <li>
    <p>Check out a list of optional online resources.</p>
  </li>
</ol>

<h2 id="my-own-pre-course-to-do-list">My own pre-course to-do list</h2>
<p>I plan on completing most of the optional pre-course work (in addition to the mandatory parts), but I also hope to make time for some other pre-course goals of mine. Maybe some are covered by the pre-course work, but here’s a comprehensive list:</p>

<h3 id="relevant">Relevant</h3>

<ul>
  <li>
    <p>Watch videos re: <a href="https://tutsplus.com/course/improve-workflow-in-sublime-text-2/">Sublime Text wizadry</a></p>
  </li>
  <li>
    <p>Consider PAYING for Sublime Text to get rid of the money-begging feature</p>
  </li>
  <li>
    <p>Figure out regex</p>
  </li>
  <li>
    <p>Get intimate with that scary thingamabob known as <a href="http://linuxcommand.org/lc3_learning_the_shell.php">Linux shell</a></p>
  </li>
  <li>
    <p>Buy a notebook that is made of something called “paper”</p>
  </li>
  <li>
    <p>Conform to a proper sleep schedule (makes me cry just thinking about it)</p>
  </li>
  <li>
    <p>Watch more lectures from Berkeley’s <a href="http://www.youtube.com/watch?v=Fr-B4xHZRzY">CS169: Software as a Service</a></p>
  </li>
  <li>
    <p>Buy tons of snacks/drinks because I won’t have much time for grocery shopping during bootcamp weeks</p>
  </li>
  <li>
    <p>Attend lots of dev meetups, especially <a href="http://www.theodinproject.com/">Odin Project</a> meetups</p>
  </li>
  <li>
    <p>Think of how I want to make my own HackR vlog</p>
  </li>
</ul>

<h3 id="not-so-relevant">Not-so-relevant</h3>

<ul>
  <li>
    <p>Take one last hit of that <a href="http://www.sfr-solo.org/solo2/cgi-bin/schedaction.cgi?autox&amp;where=all&amp;Next_three_months">autocross</a> high</p>
  </li>
  <li>
    <p>Finish reading some rather <a href="http://www.amazon.com/Batman-Robin-Vol-Must-Die/dp/1401235085">disturbing-but-amazing Batman</a> comic books</p>
  </li>
  <li>
    <p>Deactivate my online dating profiles because I won’t have time for that crap (although it’s not like I was a total playa to begin with)</p>
  </li>
  <li>
    <p>Help a roommate build a new PC (he’s never built one before)</p>
  </li>
  <li>
    <p>Make at least 1 more faux vlog episode</p>
  </li>
  <li>
    <p>Make at least 1 music recording</p>
  </li>
</ul>

<p>Most of all, I want to write up a LOT of blog posts documenting all the research I did when investigating coding bootcamps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Event Review] 12 (non-technical) Steps to be a Better Developer]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/08/24/event-review-12-non-technical-steps-to-be-a-better-developer/"/>
    <updated>2013-08-24T15:34:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/08/24/event-review-12-non-technical-steps-to-be-a-better-developer</id>
    <content type="html"><![CDATA[<div style="float: right; margin: 10px;">
<blockquote class="twitter-tweet"><p>In SF for the week. Heading to the east bay Ruby group tomorrow and speaking at the SF Ruby group Thursday if you want to come say hello.</p>&mdash; Gregg Pollack (@greggpollack) <a href="https://twitter.com/greggpollack/statuses/369523580796542978">August 19, 2013</a></blockquote>
<script async="" src="http://RebootJeff.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>

<p>Yesterday, <a href="https://chartboost.com">Chartboost</a> hosted a presentation by <a href="http://www.linkedin.com/in/greggpollack">Gregg Pollack</a>, founder of <a href="http://www.codeschool.com">Code School</a> and <a href="http://envylabs.com">Envy Labs</a>. I found this event by joining <a href="http://www.meetup.com/sfruby/events/131917612/">The San Francisco Ruby Meetup Group</a>.</p>

<p><strong><em>The slides + audio recording can be found here: <a href="http://penxy.com/qeh">http://penxy.com/qeh</a></em></strong></p>

<p>The talk Pollack provided was not very technical in nature. He mostly focused on general productivity, communication, and other soft skills rather than discussing hard skills. Therefore, the talk had a self-help or self-improvement vibe –as opposed to an academic one.</p>

<h1 id="what-i-learned">What I Learned</h1>
<p>I didn’t plan on going into as much detail as I did in my <a href="http://RebootJeff.github.io/blog/2013/08/10/event-review-intro-to-ux-at-general-assembly/">previous event review</a> because you can check out the presentation for yourself in the penxy link I already provided. However, the penxy recording failed to capture the last 2 out of 12 steps. It also missed the conclusion. I also like to ramble.</p>

<h2 id="the-12-steps-to-be-a-better-developer">The 12 steps to be a better developer</h2>

<pre><code>1. Set expectation
2. Be mindful of your engineering background
3. Software development is a craft
4. Learn how to delegate and improve the system
5. Continue to learn inside and outside your company
6. Stay out of your comfort zone
7. Make friends and build relationships
8. Don't be afraid to ask for help
9. Learn to eliminate distractions and get in the zone
10. The most complex solution is rarely the best solution
11. Communicate visually
12. Understand what brings happiness
</code></pre>

<h2 id="my-reinterpretation-of-the-12-steps">My (re)interpretation of the 12 steps</h2>
<p>I think a lot of Gregg Pollack’s steps are good, a few are great, but a lot are poorly worded. Ok, they’re not “poorly worded” per se, but some seem a tad cryptic. It’s almost as if Pollack picked partially enigmatic titles on purpose, allowing him to turn a 12-step list into a 1-hour presentation. Almost.</p>

<p>To be fair, I don’t think he has nefarious intentions, but I disagree with the wording of the 12 steps enough to motivate me to re-present them with different diction.</p>

<h3 id="pay-more-attention-to-communicating-expectations">1. Pay more attention to communicating <em>expectations</em></h3>
<p>Everyone knows communication is important. Pollack takes the time to suggest you spend more attention on communication with clients with a focus on expectations. Pollack posits that you think about some failed projects and consider that a possible (perhaps probable?) cause of failure was mismatched expectations.</p>

<p>You can preempt this problem by obtaining client feedback more often, being geographically closer to the client, and by having someone on the client’s team become part of your team (as a liason, I imagine). By the way, Pollack often frames his ideas in the context of client-consultant relationships due to his experience running a consultancy.</p>

<h3 id="avoid-criticizing-people">2. Avoid <em>criticizing</em> people</h3>
<p>Here’s another bit regarding communication: don’t forget other people don’t think like you do. Pollack specifically points out that engineers need to be cognizant of the simple fact that non-engineers think differently, and if you don’t account for the difference, then you may “kill collaboration.”</p>

<p>At this point, Pollack mostly discussed the problem of “diagnosing problems” and criticizing others. I actually started reading the oft-cited <em><a href="http://en.wikipedia.org/wiki/How_to_Win_Friends_and_Influence_People">How to Win Friends and Influence People</a></em>, and the concept of criticism is covered in one of the early chapters. Lesson learned: most people simply cannot handle criticism.</p>

<p>Pollack recommends rephrasing your criticism into additions to another’s ideas rather than subtractions. I think that’s a bit crazy, but what do I know? I admit my less-than-4 years of work experience don’t make me an expert in workplace communication. On one hand, I agree that cold-and-calculating communication may seem efficient to engineers, but it just sounds asshole-y to most people. In other words, learn some empathy skills and put them to use in the workplace! On the other hand, I think the technique of rephrasing criticism into “Yes, and …” statements involves too much hand holding, and you will fail to convey your points because they are too busy treating the diabeetus caused by all the sugarcoating (TIL: “sugarcoating” is only one word).</p>

<p>Before moving on to the next step, Pollack briefly discussed the awesome warm-fuzzies derived from good listening skills. I concur with his thoughts on good listening.</p>

<h3 id="a-good-developer-builds-what-others-want">3. A good developer builds what <em>others</em> want</h3>
<p>Why did Pollack include this step? This step was presented more as a way to help describe the role of developers, but it doesn’t really help you become a better developer in my opinion.</p>

<p>So what did Pollack say exactly? Well, he essentially said the customer’s needs come first, but he just worded it differently. He said it’s a developer’s job to take whatever canvas they’re given and make something awesome. He cited a Walt Disney quote about building things for the sake of others –not for yourself. He said a lot of things without providing examples of actions you can take to improve your quality as a developer. Boo. I guess his point is just that you should stop whining and get over yourself?</p>

<h3 id="delegate-work-pretty-straightforward-stuff">4. Delegate work (pretty straightforward stuff)</h3>
<p>Everyone is familiar with cautionary tales about over-burdening oneself. Everyone knows you need to hire people to prevent you from tasking too many multis (so to speak). Everyone knows about the significance of delegation.</p>

<p>But section 4 of this talk was not wholly uninsightful. He provided an example of “doing the math” by talking about framing delegation in terms of hours saved. His example involved a snazzy company that hired a full-time barista to take care of coffee for everyone else. After guesstimating some numbers, Pollack posited that the 8-hour barista added 20 hours of development productivity at the relatively low cost of a barista’s wages.</p>

<blockquote>
  <p>WITHOUT barista: 80 employees x 1 cup of coffee per employee x 15 minutes of time used to get each cup of coffee = 20 hours per day spent on coffee
(not an exact quote, but you get the point)</p>
</blockquote>

<p>As a sometimes smartass-y skeptic, I take issue with his guesstimates. More importantly, I’d like to point out that the 15 minutes spent on getting coffee is probably considered as a break that employees enjoy. They will likely find a new way to take a break if you shorten the amount of time it takes to get their caffeine buzz. To be fair, this is something that Pollack acknowledges (somewhat) in a later section of his talk, so I shall holster my quick-draw revolver named Wise Guy.</p>

<h3 id="remember-extracurriculars-do-them">5. Remember <em>extracurriculars</em>? Do them.</h3>
<p>This is a two-parter. First, Pollack highly recommends attending meetups, seminars, talks, conferences, etc. that are relevant to software development. He also recommended further academic learning through resources like Code School	 of course. Second, your company should foster internal knowledge transfer via internal brown bags, “What I’m Working On Now” presentations, retrospectives, book clubs, planned pair programming, and even just eating meals together.</p>

<p>One tidbit that I found interesting was that Pollack said it’s worth mentioning to hiring managers and bosses that you like attending meetups and whatnot. Bonus points!</p>

<h3 id="embrace-challenging-tasks-avoid-embracing-trite-crap">6. Embrace <em>challenging</em> tasks; avoid embracing trite crap</h3>
<p>Pollack claimed that human nature causes us to embrace easy-to-accomplish goals and tasks such as responding to work emails. This can lead to traps where you feel productive by doing a lot of small, low-value tasks. To avoid these traps, plan your day around addressing the big challenges first –don’t procrastinate by scheduling the tough stuff after the easy stuff.</p>

<p>On a higher level, it’s important to embrace tough challenges for the sake of keeping your brain fit, keeping your skills up-to-date, accomplishing meaningful work, etc.</p>

<h3 id="nurture-friendships-with-co-workers">7. Nurture <em>friendships</em> with co-workers</h3>
<p>Many forget that one way to make the developer community better is to make friends in the community. One way to make workplace collaboration better is to become better friends with co-workers.</p>

<p>At this point, Pollack quickly discussed introversion/shyness (as an audience member later pointed out, introversion != shyness). He provided some social skill tips like establishing personal goals to meet 5 new people per meetup, for example. When meeting new people, Pollack’s main tactic is to ask them about themselves. I think we’ve all heard that advice before. My take on it is that it works, but it still feels awkward until the conversation gets through the first few minutes of chilliness.</p>

<h3 id="ask-for-help-sooner-than-later">8. Ask for help <em>sooner</em> than later</h3>
<p>We’ve all heard it before: if you don’t ask for help now, you’ll struggle with your issue for much longer by going solo. Pollack’s rule of thumb is to ask for help after trying to tackle a bug, obstacle, etc. on your own for 30 minutes. If a small problem is taking you more than 30 minutes to solve, it probably means you’re using the wrong approach anyway (i.e., you’re digging yourself into a deeper hole).</p>

<h3 id="take-breaks-and-avoid-synchronous-communication">9. Take <em>breaks</em> and avoid synchronous communication</h3>
<p>I like Pollacks claim that optimal work hours are 80% productive and 20% (unproductive) fun. Companies should embrace breaks and create a work environment that acknowledges employees’ “need” to check Facebook at work. But employees shouldn’t just take breaks while at the office, they should take breaks <em>from</em> the office by working at alternative locations such as coffee shops.</p>

<p>In step 9, Pollack also talked about abandoning synchronous communication like IM for asynchornous communications like email. He said IM can be a problem because it interrupts your train of thought whenever someone contacts you. Upon interruption, you’ll be tempted to check email or do other less intellectual work. It’s a bit weird to me that Pollack basically grouped “avoid distractions” with “take breaks” in step 9. They seem unrelated enough to warrant separation, but oh well.</p>

<h3 id="make-sure-you-dont-over-engineer-your-software">10. Make sure you don’t <em>over-engineer</em> your software</h3>
<p>It’s easy to get stuck spending lots of time on optimization, worrying about handling heavy load, predicting future requirements, and expanding “just in case” feature sets. Pollack went so far as to suggest not worrying about optimization or heavy loads until your software starts buckling under the pressure of intense usage. Do I agree? I’m afraid I’m too ignorant at this point to really have an opinion.</p>

<h3 id="use-visual-communication-not-just-text-based-comms">11. Use <em>visual</em> communication, not just text-based comms</h3>
<p>You might love email. Your client might love email. But sometimes, it’s hard to really describe a feature or a bug through text alone. Pollack is in love with the idea of not only attaching annotated screenshots, but also sending screencasts.</p>

<p>I had never really thought about screencasting as a form of regular, commonplace communication, but it makes a ton of sense. The key is to limit yourself to 5-minute videos recorded in a single take. Such screencasts may be rough around the edges, but they can still drive a point home faster and harder than a simple email.</p>

<p>Additionally, screencasts provide other benefits such as added wow-factor for client interactions and passing along an easily shareable mini-demo to customers or the client’s stakeholders.</p>

<h3 id="better-work-is-motivated-by-meaning">12. Better work is motivated by <em>meaning</em></h3>

<div style="float:right;"><iframe width="300" height="168" src="http://RebootJeff.github.io//www.youtube.com/embed/u6XAPnuFjJc" frameborder="0" allowfullscreen=""></iframe></div>
<p>The final step of Pollack’s talk doesn’t really seem like a proper step to me. Maybe I zoned out, but Pollack didn’t connect the dots.</p>

<p>Perhaps he is suggesting that if you don’t think your work is meaningful, then you should find a new job, thereby increasing your productivity and output quality. In the end, Step 12 is still a good point. It will be familiar to any one who has seen <a href="http://www.youtube.com/watch?v=u6XAPnuFjJc">this animated lecture</a> about motivation.</p>

<div style="clear:both;"></div>

<h1 id="what-i-thought">What I Thought</h1>
<p>This was a very solid event. I give it 8 hamster dances out of 10. Audience members were even given stickers and Code School coupons.</p>

<h2 id="presentation-content">Presentation Content</h2>
<p>I like Pollack’s style of discussing productivity problems in the context of “human nature.” The term “human nature” came up a lot, and whether or not it’s backed up by science, it certainly makes the presentation content feel more intuitive.</p>

<p>I’m also partial to Pollack’s claim that writing skills are a good way to differentiate yourself from other developers. He said that if two developers are applying for the same job, and they have similar hard skills, then one of the best ways to pick a new hire is to examine their writing because better writers are better communicators.</p>

<p>As you can tell from my re-interpretation of the 12 steps, I didn’t like some of Pollack’s wording, but I admit that I’m oddly particular about such things. I also didn’t like that some of the advice was just common sense. Maybe it’s unfair, but I tend to expect a lot of insight from advice-giving presentations so I feel let down when I’m presented with advice that is not only familiar, but derived from the same common sense I already possess.</p>

<h2 id="speaker">Speaker</h2>
<p>Pollack’s filler word is “right?” (with upward inflection). I find this to be a little annoying. It’s not the first time an otherwise awesome speaker has used “right?” this often. I think it bothers me because I perceive it to be slightly patronizing …or maybe a subtle form of pandering.</p>

<p>That said, I really like Pollack’s relatability. He seems to be a down-to-earth guy, making his speaking style easy to follow. Well done, Mr. Pollack.</p>

<h2 id="venue">Venue</h2>
<p>Chartboost had tons of free beer, great pizza (not just some Pizza Hut banality*), tons of free soft drinks, good mic setup for the speaker, and friendly staff on hand. After the presentation, they encouraged audience members to stick around and mingle, consume more pizza and beer, and use their company ping pong table. Sweet.</p>

<p>*Note: I’m not actually anti-Pizza Hut, and I’m certainly not a foodie, but even I found it refreshing to eat higher-quality pizza at a free meetup.</p>

<h1 id="followup">Followup</h1>
<p>I need to check out <a href="http://www.techsmith.com/jing.html">Jing</a>, a screencasting tool. It has limited recording time and no editing features. These limitations prevent you from spending too much time over-engineering your communique. It forces you to get to the point and be concise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Article Review] $80 Plates Are Unnecessary? How Insightful]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/08/16/article-review-80-plates-are-unnecessary/"/>
    <updated>2013-08-16T12:13:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/08/16/article-review-80-plates-are-unnecessary</id>
    <content type="html"><![CDATA[<p><a href="http://www.moneyunder30.com/things-worth-spending-for-9101">This Money Under 30 article</a> recently appeared in my Facebook feed. One friend posted it; another friend left a beautifully/brutally succinct comment like so:</p>

<blockquote>
  <p>This article is bad.</p>
</blockquote>

<p>I concur, but I suck at being succint, so this here’s a giant explanation in the form of a blog post…</p>

<h1 id="is-my-sacasm-detector-working">Is My Sacasm Detector Working?</h1>

<p>The article is so random that it feels like satire at various points. The text is written with few facts  –mostly just vague thoughts. The author, Phil Villarreal, avoids specifics, and just encourages the misconception that you always get what you pay for. Value isn’t always directly tied to price. There are usually quite a few exceptions in the world of consumer goods.</p>

<p>What is considered too expensive/cheap? Other than that $80 exaggerated plate, we have no idea what price ranges he’s talking about. Also, his article assumes value always comes at a price. Is my sacrasm detector faulty, or is Mr. Villarreal being completely serious?</p>

<h1 id="systematic-breakdown">Systematic Breakdown</h1>

<p>Based on the article’s format, I’m going to split the rest of my blog post into two sections: 6 products/services with a tight value-cost relationship and 6 products/services where you may as well tap into their respective bargain bins.</p>

<p>I admit this blog post lacks citations, but at least I make some verifiable claims. Besides, I only need to provide anecdotal counter-examples to rebut Villarreal’s arguments thanks to his own reliance on anecdotes, hearsay, overgeneralizations, etc.</p>

<h2 id="allegedly-worth-spending-more">Allegedly Worth Spending More</h2>

<p><strong>Socks</strong> - Even expensive socks get holes in them. I’ve gotten expensive socks as gifts. They were thin and broke quickly. I’ve gotten generic-brand dress socks from Costco. In my 3+ years of wearing business pro and business casual attire on a daily basis, the cheap generics never broke, but the others did.</p>

<p><strong>Pillows</strong> - Yes, they’re important. No, you don’t need to pay extra to be happy with your choice of bedtime headrest. How many people do you know that have unnoteworthy pillows? How many of them are truly discontented?</p>

<p><strong>Toilet Paper</strong> - I would’ve agreed, but recently, I saw <a href="http://imgur.com/GN84qn1">this gem from Consumer Reports</a>: </p>

<p><a href="http://i.imgur.com/GN84qn1.jpg"><img src="http://i.imgur.com/GN84qn1.jpg" alt="Toilet Paper comparo" /></a></p>

<p>So maybe I should reconsider my stance on toilet paper –now that’s a statement I never thought I’d share with the Internet.</p>

<p><strong>Computers</strong> - Most people don’t need expensive/fast computers, but if you’re going to spend the extra dough, you need to know what features you need. <strong>You don’t just throw more money at the store and assume you’ll get a product that performs better for your purposes.</strong> Most people will never notice the difference between an Intel Core i7 CPU (expensive) and a Core i3 (cheap). They <em>will</em> notice the difference between an SSD harddrive (expensive) and a conventional one (cheap). Too bad the Villarreal doesn’t provide these types of relevant details.</p>

<p><strong>Home Repairs</strong> - I agree, but how do I filter the <em>expensive good</em> from the <em>over-priced bad</em>. Advice please?</p>

<p><strong>Shoes</strong> - This is a perfect example of how the author needs to provide more context (i.e., PRICE RANGES). Yes, $20 Payless sneakers will die if you look at them too hard. But is he suggesting boycotting $40 Sketchers too? There is room for middle ground, but the article ignores that. Sure, Villarreal emphasizes comfort when it comes to shoes, but cheap shoes can be comfortable too.</p>

<p>By the way, if you’re buying shoes for a specific sport, I’d suggest that paying a lot generally isn’t worth it unless you’re really serious. For example, with the way I run on the court, I will wear out the tread of expensive tennis shoes just as quickly as I wear out the tread of mid-tier tennis shoes. I don’t think the $40-60 price difference is worth the added stiffness/support of a hardcore tennis shoe.</p>

<h2 id="allegedly-not-worth-spending-more">Allegedly NOT Worth Spending More</h2>

<p><strong>Shoelaces</strong> - Fair enough. Good analogy, Mr. Villarreal.</p>

<p><strong>Phones</strong> - I can understand saying the average Joe doesn’t need a top-of-the-line phone. However, expensive phones will generally be able to handle future OS updates better than cheaper ones, so it’s not always bad to get a flagship phone. Basically, if you’re a techie, you shouldn’t feel bad about your expensive phone purchase despite what Villarreal claims.</p>

<p>What’s dumb is buying a new phone too often –something the article mentions. What’s especially shameful is paying for a $100+/month phone bill just so you can do a lot of texting, occasional on-the-go Facebook, and take derivative photos…usually of food. If the phone user is on a family plan, then more power to them. If not, they better not complain about their bank account balance. [/off-topic]</p>

<p><strong>Haircuts</strong> - I mostly agree, but does he intend to speak for women as well?</p>

<p>And I don’t usually judge authors by their looks, but I’m not taking haircut advice from this guy. [I actually feel iffy about this burn. Too personal?] <strong><em>Regardless, “accept your mediocrity” is never good advice. This is the line that REALLY makes me think this article is satire. Am I being trolled?</em></strong></p>

<p><strong>Clothes</strong> - Let me get this straight. We should invest in quality socks, but not quality coats, dress clothes, gloves, pants, etc? WTF is this guy smoking? You don’t have to be an expert blogger like Villarreal to know that it’s worth investing in a solid jacket/coat, and that good jeans can last for a longggg time. (Yes, 4 ‘g’s because I’m talking about serious duration here)</p>

<p><strong>Car Repairs</strong> - Is the author color blind? Because the world sounds pretty black and white from his perspective. (Yes, I know color blind humans can generally see more than just B&amp;W) </p>

<p>Earlier, I made a case for saving money on things that wear out in my paragraph re:shoes, but now we’re talking about complicated beasts called cars. A higher-priced tire can have lots of benefits (less rolling resistance, less tire noise, much better grip, etc). The low-tier tires can have shitty grip. Mid-tier tires can have awesome grip, so I think they’re worth it. If Villarreal thinks shoes are crucial, he should also consider that tires are basically the shoes of cars. They’re considered the most crucial part all carowners can change.</p>

<p>More expensive motor oil can make a difference –especially conventional vs synthetic. Synthetic is a more expensive option even when you factor in its superior longevity (usually 5,000 miles between oil changes instead of 3,000), but it’s better for your engine and the environment (and the oil-based economy?) because you’re using up less oil and fewer resources during you car’s lifespan.</p>

<p>Lastly, more expensive brake pads generally have better stopping power. If you survive a near-accident and feel like doing something to allay your new-found fear, then you should consider spending some extra moolah to upgrade your tires and brakes.</p>

<p><strong>Food</strong> - $80 plates are not necessary? How insightful.</p>

<p>Maybe Villarreal could give some tips on how to buy healthy stuff at the grocery store without spending a lot? Otherwise, I will end up eating nothing other than ramen based on his two-extremes critical thinking skills.</p>

<p>Seriously though, everyone complains that eating healthy is expensive. Does he disagree? If so, he should explain because that would actually be useful.</p>

<h1 id="expound-is-the-apt-word">“Expound” is the Apt Word</h1>
<p>The article provides no specific suggestions for what brands/specs/details to buy/avoid (other than suggesting you make all judgements based on price tag), very few good examples, no context for what’s a good price range, etc. There is no true insight.</p>

<p>The article runs on weak reasoning, and the type of writing that tends to earn accusations of “lazy journalism.” It’s “lazy” because it uses an attractive, list-oriented headline/format to bait the reader into thinking a really efficient learning experience is presented within. Instead, the article reads like something an editor forced a blogger/journalist to write at the last minute to meet a quota. It’s filler.</p>

<p><strong>I admit I could be wrong about what is and isn’t worth splurging on, as I don’t have a ton of life experience. However, the style of Villarreal’s arguments leave so much room for questioning. <em>That’s what bothers me so much.</em></strong></p>

<p>You can’t present a case in such a manner without expecting someone to poke holes in it. For example, if I say, “The sky is blue due to the properties of light,” then I am technically correct, but I wouldn’t expect everyone to just accept that statement at its face value. I’d feel obligated to expound.</p>

<p>In my paragraph re:cars, I did a lot of explaining because I expect most people aren’t too familiar with cars’ intricacies. Ignorance is not stupidity. I assume most people are ignorant about a lot of car-related things, but I don’t assume them to be too stupid to understand some important, relevant details.</p>

<p>Villarreal fails to expound on the many statements that he should know aren’t worthy of acceptance based on face value alone. He should feel obligated to explain further, but he doesn’t because the article was never meant to truly help any one. It was just meant to get some easy page views.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Awesomeness Added: Auto HR after H1]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/08/15/auto-hr-after-h1/"/>
    <updated>2013-08-15T12:02:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/08/15/auto-hr-after-h1</id>
    <content type="html"><![CDATA[<p>I wasn’t happy with the style of my standard <code>&lt;h1&gt;</code> header. I wanted to spice things up. After some aimless browsing, I learned that there is an <code>:after</code> selector in CSS. Inspired by this new selector, I wanted to find a way to add an <code>&lt;hr/&gt;</code> element “after” my <code>&lt;h1&gt;</code> headers. </p>

<h1 id="check-out-this-sweet-hr-man">Check Out This Sweet HR, Man</h1>

<p>Apparently, it doesn’t quite work the way I expected, but that’s ok because I eventually found <a href="http://css-tricks.com/examples/hrs/">this sweet compilation of horizontal rules</a>!</p>

<p>I entered the following CSS code into my <strong>sass/custom/_styles.scss</strong> file:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="class">.entry-content</span> <span class="type">h1</span> {
  <span class="key">text-align</span>: <span class="value">center</span>;
  <span class="key">margin-top</span>: <span class="float">12px</span>;
}
<span class="class">.entry-content</span> <span class="type">h1</span><span class="pseudo-class">:after</span> {
  <span class="key">content</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content"> </span><span class="delimiter">&quot;</span></span>;
  <span class="key">display</span>: <span class="value">block</span>;
  <span class="key">height</span>: <span class="float">1px</span>;
  <span class="key">margin</span>: <span class="float">6px</span> <span class="float">0px</span> <span class="float">6px</span> <span class="float">0px</span>;
  <span class="key">background-image</span>: <span class="error">-</span><span class="error">w</span><span class="error">e</span><span class="error">b</span><span class="error">k</span><span class="error">i</span><span class="error">t</span><span class="error">-</span><span class="error">l</span><span class="error">i</span><span class="error">n</span><span class="error">e</span><span class="error">a</span><span class="error">r</span><span class="error">-</span><span class="error">g</span><span class="error">r</span><span class="error">a</span><span class="error">d</span><span class="error">i</span><span class="error">e</span><span class="error">n</span><span class="error">t</span>(<span class="value">left</span>, <span class="color">rgba(0,0,0,0)</span>, <span class="color">rgba(0,0,0,0.75)</span>, <span class="color">rgba(0,0,0,0)</span>); 
  <span class="key">background-image</span>:    <span class="error">-</span><span class="error">m</span><span class="error">o</span><span class="error">z</span><span class="error">-</span><span class="error">l</span><span class="error">i</span><span class="error">n</span><span class="error">e</span><span class="error">a</span><span class="error">r</span><span class="error">-</span><span class="error">g</span><span class="error">r</span><span class="error">a</span><span class="error">d</span><span class="error">i</span><span class="error">e</span><span class="error">n</span><span class="error">t</span>(<span class="value">left</span>, <span class="color">rgba(0,0,0,0)</span>, <span class="color">rgba(0,0,0,0.75)</span>, <span class="color">rgba(0,0,0,0)</span>); 
  <span class="key">background-image</span>:     <span class="error">-</span><span class="error">m</span><span class="error">s</span><span class="error">-</span><span class="error">l</span><span class="error">i</span><span class="error">n</span><span class="error">e</span><span class="error">a</span><span class="error">r</span><span class="error">-</span><span class="error">g</span><span class="error">r</span><span class="error">a</span><span class="error">d</span><span class="error">i</span><span class="error">e</span><span class="error">n</span><span class="error">t</span>(<span class="value">left</span>, <span class="color">rgba(0,0,0,0)</span>, <span class="color">rgba(0,0,0,0.75)</span>, <span class="color">rgba(0,0,0,0)</span>); 
  <span class="key">background-image</span>:      <span class="error">-</span><span class="error">o</span><span class="error">-</span><span class="error">l</span><span class="error">i</span><span class="error">n</span><span class="error">e</span><span class="error">a</span><span class="error">r</span><span class="error">-</span><span class="error">g</span><span class="error">r</span><span class="error">a</span><span class="error">d</span><span class="error">i</span><span class="error">e</span><span class="error">n</span><span class="error">t</span>(<span class="value">left</span>, <span class="color">rgba(0,0,0,0)</span>, <span class="color">rgba(0,0,0,0.75)</span>, <span class="color">rgba(0,0,0,0)</span>); 
}
</pre></div>
</div>
</div>

<p>So instead of adding <code>&lt;hr/&gt;</code>s after my <code>&lt;h1&gt;</code>s, I added gradients inside of very thin background images. It’s more complicated than what I had originally envisioned, but it looks way nicer.</p>

<h1 id="codeblock-the-party-pooper">Codeblock, the Party Pooper</h1>
<p>Unfortunately, in the process of writing this blog post, I discovered that my codeblocks (powered by CodeRay) aren’t as responsive as I had hoped. I mentioned my CodeRay configuration in <a href="http://RebootJeff.github.io/blog/2013/08/02/ready-set-octopress/#update-aug-10-2013">my first post</a>. The configuration involves picking a codeblock format Octopress <strong>_config.yml</strong> file.</p>

<p>I chose <code>coderay_line_numbers: table</code> at first, because I want line numbers, and I want them to be separated from the code. The problem is that CodeRay codeblock tables are apparently unresponsive to browser size. Consequently, the codeblocks were wider than the <code>&lt;div&gt;</code>s that contained them whenever they were viewed on a smartphone or even on a PC looking at this blog’s front page. The front page automatically narrows my posts quite a bit, and that made the codeblock tables very unhappy. It was very annoying.</p>

<p>I haven’t found a true solution despite diving into the CSS. All the relevant CSS selectors already have <code>width: 100%</code> so I don’t know what else to do. I experimented with some <code>overflow</code> properties, but to no avail. For now, I have resorted to turning off line numbers entirely. Dammit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Event Review] Intro to UX and Subpar Acoustics at General Assembly]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/08/10/event-review-intro-to-ux-at-general-assembly/"/>
    <updated>2013-08-10T13:31:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/08/10/event-review-intro-to-ux-at-general-assembly</id>
    <content type="html"><![CDATA[<p><img src="http://RebootJeff.github.io/images/ga_logo_sp.jpg" alt="General Assembly logo" /></p>

<p>Last Thursday, <a href="https://generalassemb.ly/">General Assembly</a> hosted a presentation by <a href="http://bluelikeanorange.net">Jenny Tsai</a> (nice URL, by the way). Tsai is a pro UX designer, but her talk was meant for UX noobs. So instead of focusing on <em>how</em> to be a great UX designer, <strong>she focused on <em>what</em> is a UX designer.</strong> I’m not looking to become a UX designer, but the event was free, and I like hearing about the various roles involved in modern tech startups. Besides, I think all wannabe web developers such as myself wonder what differences separate UX design and web development.</p>

<p>Unfortunately, I was a fool, so I didn’t bring a laptop or padfolio for taking notes, so I’m just going to relay the short bits I jotted down in my smartphone.</p>

<h1 id="what-i-learned">What I Learned</h1>
<p>Note: Tsai didn’t present this info in a DOs vs DON’Ts fashion. She didn’t do a “What’s the deal with wireframes” slide. I’m presenting the info my way, not her way.</p>

<h2 id="general">General</h2>
<p><strong>What is UX design?</strong> Designer is to developer as architect is to engineer.</p>

<p><strong>What do UX designers do on any given day?</strong> Draw wireframes and mockups, draft user personas, create task flows, and get user input.</p>

<p><strong>What’s the deal with “wireframes” and “pixel perfect mockups”?</strong> Wireframe is to mockup as sketch is to painting. It’s all about fidelity. Both are generally non-functional, but sometimes functional mockups are created just to demonstrate animations, screen changes, and general navigation. You want to use wireframes for quickly iterating on an idea. You should save mockups for later because they use a lot of time, which is equivalent to money. And I hear money is expensive these days.</p>

<p><strong>What are user personas?</strong> Looks more like a marketing thing to me, but it’s basically creating profiles of target demographics. For I’mPregnantNowWhat.com, a user persona is going to be a profile of a young woman whose tech savviness is at level X. She cares about A, B, and C. And so on. I zoned out for a bit here, so I could be wrong.</p>

<p><strong>What are task flows?</strong> Flow charts on how users interact with the website/app.</p>

<p><strong>Who do UX designers interact with on a daily basis?</strong> Product managers, marketing peeps, customer service folks, developers, and other designers. PMs have the vision, marketing cares about the branding, customer service gives you customer feedback, and developers are the engineering for your architecting.</p>

<p><strong>What is information architecture?</strong> Figuring out how relevant info is organized. For example, a shopping website could display products based on price, color, size, etc. For example, with Amazon.com, IA also involves deciding what product categories/options are displayed to the user so they can browse based on those categories/options. I imagine this is where the battle between overwhelming a user with too many choices and underwhelming the user with not enough info unfolds.</p>

<p><strong>What software is used by UX designers?</strong> Wireframing software (there are a ton to choose from), collections of pre-made buttons and other GUI elements (especially common for smartphone apps where you can drag and drop stuff like on-screen keyboards into the mockup), and Adobe Creative Suite for pixel perfect mockups and assets (such as logos or new buttons).</p>

<p><strong>What does it take to be a UX designer?</strong> Yes, you need some artistic skills. Tsai was an art student. However, you need a lot of logic, not just artistry. Logic helps you solve the problem of meeting user needs through UI design, interaction design, IA, etc.</p>

<h2 id="users">Users</h2>
<p>UX design juggles a lot of objectives, but in the end, it’s all about merging the product’s objectives with the user’s needs. The example Tsai kept using was Amazon. Amazon’s objective is to sell stuff. The user wants to buy stuff. To do that, a user needs to be able to easily browse, search, etc.</p>

<p>So how do you know what users need? You interview them. Regarding user feedback, Tsai mentioned the following:</p>
<table>
	<colgroup>
		<col span="1" style="width: 50%;" />
		<col span="1" style="width: 50%;" />
	</colgroup>
	<tbody>
		<tr>
			<td style="vertical-align: top; padding: 5px;">DO tap into your colleague&#8217;s friends and family. She emphasized the importance of that one degree of separation &#8211;it&#8217;s a bias killer, apparently.</td>
			<td style="vertical-align: top; padding: 5px;">DON&#8217;T interview friends and family who might be biased or afraid to hurt your precious feelings.</td>
		</tr><tr>
			<td style="vertical-align: top; padding: 5px;">DO ask users what apps they currently love. Try to find out what their general preferences/habits are. Find out how they interact with existing products (and how much they like it). Users are less likely to guess or unintentionally lie during an interview if you ask them about their current behavior rather than hypothetical behavior.</td>
			<td style="vertical-align: top; padding: 5px;">DON&#8217;T ask users what they think about a hypothetical work flow, interaction, process, product change, etc. Users don&#8217;t always understand the hypothetical impacts of hypothetical designs.</td>
		</tr><tr>
			<td style="vertical-align: top; padding: 5px;">DO find interviewees via Task Rabbit, Craigslist, or even Facebook.</td>
			<td style="vertical-align: top; padding: 5px;">DON&#8217;T be afraid to &#8220;cast a wide net&#8221; to get faster responses to your quest for feedback.</td>
	</tr></tbody></table>

<h1 id="what-i-thought">What I Thought</h1>
<p><strong>Tsai did a pretty great job. 9/10.</strong> Some of her presentation slides included small, hard-to-read text. It would’ve been fine for a smaller conference room, but I sat in the last row of chairs, and I couldn’t read a lot of the text. Other than that, she spoke well, the slides looked visually appealing, and she answered all questions easily.</p>

<p>I could do without the intro slide where she sighs over the fantastic view of the Bay Bridge she gets to enjoy on her daily walk to work. Then again, maybe I’m just cold-hearted; maybe other people loved that part of her talk.</p>

<p>I arrived 5 minutes late, but judging by the post-presentation Q&amp;A session, she neglected to describe her own career path at the beginning of her presentation. That’s a big oversight because this is an introductory talk! Of course audience members want to hear how you got your start! You can check out her LinkedIn by going to her website in case you’re wondering about her career history.</p>

<p>As for the content, after the one hour session, I definitely have a clearer picture of not just the roles of UX designers, but also the roles of those who interact with UX designers. <strong>The talk also gave noobs like me a better understanding of what it takes to make a web/mobile app.</strong></p>

<p><strong>The only real bummer was the acoustics.</strong> I’m going to whine a lot here, so skip to the <a href="#followup">followup</a> if you get bored. The General Assembly (GA) building is pretty nice. It has a few classrooms and conference rooms, but like all cool beans, GA uses a relatively open floor plan. Tsai’s presentation was held not in a classroom, but in an open area on the second floor. When I arrived, there were a handful of people working at nearby computers. They were chatting, as you’d expect, but that’s a distraction for audience members.</p>

<p>On top of that, the air conditioning system popped on during the last segment of the event, and it spooked Tsai. Everyone thought it was some annoying truck or something, but the sound didn’t go away. It really bothered Tsai. After she inquired, the GA staffer explained it was just the AC. Damn that was an annoying AC.</p>

<p>By the way, just like everyone else, I think exposed walls/ceilings, glass conference rooms, and open floor plans are slick as hell (especially compared to the drab corporate offices in DC). However, it’s <em>pretty obvious</em> that the recipe for office hawtness is also a recipe for poor acoustics. I’m surprised GA hosts presentations in the middle of an open floor of such a building. <strong>I give GA a score of 6/10.</strong> Yes, I’m sure my scores change the world.</p>

<p>Side note: When using folding chairs, is it possible to stagger the rows so then the columns don’t line up? This would help short folks like me see through the heads of taller people rather than staring at the back of the head of the tall guy sitting directly in front of me. I’m sure staggering rows would be less space-efficient, but if you’ve got a lot of rows, then the people in the back could sure use some help seeing the presenter and the projector screen.</p>

<h1 id="followup">Followup</h1>
<p>GA did a good job of following up with attendees. We were emailed a survey (in which I notified them of their crappy acoustics), a blurb about GA’s other UX classes, and two lists of resources, which you can see for yourself below.</p>

<h2 id="ux-website-reading-list">UX website reading list:</h2>
<ul>
  <li>http://www.uxbooth.com/</li>
  <li>http://boxesandarrows.com/</li>
  <li>http://www.uie.com/</li>
  <li>http://uxmag.com/</li>
  <li>http://www.uxnewsfeed.com/</li>
  <li>http://www.inspireux.com/</li>
  <li>http://uxdesign.smashingmagazine.com/</li>
  <li>http://www.nngroup.com/reports/</li>
  <li>http://techcrunch.com/</li>
  <li>http://bx.businessweek.com/user-experience-ux/news/</li>
  <li>http://hbr.org/</li>
</ul>

<h2 id="ux-book-reading-list">UX book reading list:</h2>
<ul>
  <li>Design of Everyday Things</li>
  <li>The Elements of User Experience Design (by Jesse James Garrett, who Tsai referenced)</li>
  <li>Don’t Make Me Think</li>
  <li>A Project Guide to UX</li>
  <li>The Inmates are Running the Asylum</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Video] SF Hills Are Great ...For Video]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/08/06/video-by-me-sf-hill-are-great-for-video/"/>
    <updated>2013-08-06T23:14:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/08/06/video-by-me-sf-hill-are-great-for-video</id>
    <content type="html"><![CDATA[<iframe src="http://player.vimeo.com/video/71790058?portrait=0&amp;color=26BB01&amp;byline=0&amp;title=0" width="300" height="168" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>

<h3 id="a-hrefhttpvimeocom71790058wandering-around-bits-of-sfa-from-a-hrefhttpvimeocomuser19992362jeff-leea-on-a-hrefhttpsvimeocomvimeoa"><a href="http://vimeo.com/71790058">Wandering Around: Bits of SF</a> from <a href="http://vimeo.com/user19992362">Jeff Lee</a> on <a href="https://vimeo.com">Vimeo</a></h3>

<p>Soon after I moved from the east coast, I set aside an afternoon to simply roam around downtown San Francisco. I was really excited to grab my crummy-yet-trusty, point-and-shoot Panasonic Lumix TS-1, and just be a tourist.</p>

<p>To my delight, I discovered that the hilly nature of the city lends itself to providing fantastic views. Also, being short helps me conquer hills.</p>

<p>I compiled some of those views into a brief clip because I think I can do a better job of sharing vistas through my camera’s video recording than through its photo capturing …and because I like adding music to visuals.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ready. Set. Octopress.]]></title>
    <link href="http://RebootJeff.github.io/blog/2013/08/02/ready-set-octopress/"/>
    <updated>2013-08-02T17:40:00-07:00</updated>
    <id>http://RebootJeff.github.io/blog/2013/08/02/ready-set-octopress</id>
    <content type="html"><![CDATA[<p class="last-updated">Last updated: Aug 10th, 2013</p>

<h1 id="here-we-go">Here We Go</h1>
<p>Dammit. I’ve made so many tweaks and adjustments, but I still haven’t gotten this blog looking quite right. I’m about to get nerdy, so <a href="#whats-next">jump down</a> if you have no sympathy for programmer growing pains.</p>

<p>FYI, I’m using <a href="http://octopress.org">Octopress</a> to create this blog, <a href="https://github.com/RebootJeff">github</a> to host, and I write posts/pages in a little language called <a href="http://daringfireball.net/projects/Markdown/">Markdown</a>. Maybe I should’ve just created a WordPress blog, but I admit I fell victim to Octopress’s tagline: “A blogging framework for hackers.”</p>

<p>Some of you non-tech geeks may raise an eyebrow at the term “hacker,” but it’s really <a href="http://www.paulgraham.com/gba.html">not as evil as you think</a>. The word embodies a more jargon-y connotation as well as the archetype portrayed in the media. In this case, Octopress is appealing to the techy DIY folks who like to have a lot of control over their creations (even at the expense of convenience…as is definitely the case for me).</p>

<h2 id="the-tweaks-never-end">The Tweaks Never End</h2>
<p>I began customizing this blog by adding a lovely Octopress theme. I then tweaked the hell out of it. You can compare and contrast by checking out the theme’s <a href="http://www.adrianartiles.com/">original implementation</a>. My changes customized the color scheme, the background image, the size of the hero (i.e., cover photo area on the home page), the Twitter widget, the footer, navigation links, etc.</p>

<p>The customization process was tough because I had never seen a <a href="https://github.com/Shopify/liquid/wiki/Liquid-for-Designers">Liquid</a> setup before. Also, I’m fairly new to git, Ruby, and the other bits involved in an Octopress-powered blog. I had to delete, re-install, and re-clone more times than I care to disclose.</p>

<p><del>But I’m still not done. I still need to tweak the colors and the background image. I want a green theme because I think green is under-used. Unfortunately, it clashes with certain Markdown parts. I switched my blog’s Markdown engine to <a href="https://github.com/vmg/redcarpet">Redcarpet</a>, but I still get gross code blocks and lists. I tried using <a href="https://github.com/nono/Jekyll-plugins/blob/master/redcarpet2_markdown.rb">a Redcarpet plugin</a>, but that threw errors during the <code>rake generate</code> process. I tried <a href="http://blog.alestanis.com/2013/02/04/octopress-and-the-twilight-color-scheme/">kramdown</a> with a sweet <a href="https://github.com/danielpietzsch/CodeRay-GitHub-Theme">CodeRay theme</a>, but that setup completely ignored code blocks, block quotes, etc. I need help!</del></p>

<h3 id="update-aug-10-2013">Update! (Aug 10, 2013)</h3>
<p>I used <a href="http://html5devgal.com/blog/2013/06/08/octopress-toc-and-coderay-codeblocks/">HTML5 Dev Gal</a>’s helpful instructions and links to finally implement the alliterative combo of Kramdown and CodeRay. I also realized how to add custom CSS to specifically address lists created via the Markdown engine.</p>

<p>So hooray! Lists and Code blocks are no longer given a ridiculous dark blue background! And why were lists given a background anyway?</p>

<p>Sadly, <a href="http://kramdown.rubyforge.org/converter/html.html#toc">automatic TOCs</a> don’t seem to work. I also still need to figure out how to add autolinking, which works in stock Octopress, but once modified to use kramdown, shit’s broken?</p>

<h1 id="tldr">TL;DR</h1>
<p>I’m whining about how difficult it can be to use a DIY path, but it’s really helped me learn a lot. So it’s all good.</p>

<h2 id="whats-next">What’s Next?</h2>
<p>So what can you expect on this blog other than sentences that probably shouldn’t start with the word “so”?</p>

<h3 id="past">Past</h3>
<ul>
  <li>Difficulties of my cross-country move</li>
</ul>

<h3 id="present">Present</h3>
<ul>
  <li>Chronicles of my career change</li>
  <li>Short reviews</li>
  <li>Compilations of cool links I’ve found</li>
</ul>

<h3 id="future">Future</h3>
<ul>
  <li>My goals, targets, milestones</li>
  <li>My thoughts on the future of tech, cars, gaming, music, tennis, and more</li>
</ul>
]]></content>
  </entry>
  
</feed>
